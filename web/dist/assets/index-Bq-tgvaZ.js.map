{"version":3,"file":"index-Bq-tgvaZ.js","sources":["../../node_modules/react-dom/client.js","../../src/components/StatusBadge.tsx","../../src/components/LoadingSpinner.tsx","../../src/components/ErrorMessage.tsx","../../src/pages/Dashboard.tsx","../../src/pages/NetworkTopology.tsx","../../src/components/MetricCard.tsx","../../src/pages/CloudPods.tsx","../../src/pages/Aviatrix.tsx","../../src/pages/Analytics.tsx","../../src/pages/TrafficShaping.tsx","../../src/pages/NetworkImpairments.tsx","../../src/pages/Testing.tsx","../../src/pages/Settings.tsx","../../src/pages/About.tsx","../../src/pages/NotFound.tsx","../../src/components/ErrorBoundary.tsx","../../src/App.tsx","../../src/main.tsx"],"sourcesContent":["'use strict';\n\nvar m = require('react-dom');\nif (process.env.NODE_ENV === 'production') {\n  exports.createRoot = m.createRoot;\n  exports.hydrateRoot = m.hydrateRoot;\n} else {\n  var i = m.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;\n  exports.createRoot = function(c, o) {\n    i.usingClientEntryPoint = true;\n    try {\n      return m.createRoot(c, o);\n    } finally {\n      i.usingClientEntryPoint = false;\n    }\n  };\n  exports.hydrateRoot = function(c, h, o) {\n    i.usingClientEntryPoint = true;\n    try {\n      return m.hydrateRoot(c, h, o);\n    } finally {\n      i.usingClientEntryPoint = false;\n    }\n  };\n}\n","import React from 'react';\nimport { Chip } from '@mui/material';\n\ninterface StatusBadgeProps {\n  status: string;\n  label?: string;\n  size?: 'small' | 'medium';\n}\n\nconst StatusBadge: React.FC<StatusBadgeProps> = ({ \n  status, \n  label, \n  size = 'small' \n}) => {\n  const getStatusColor = (status: string): 'default' | 'primary' | 'secondary' | 'error' | 'info' | 'success' | 'warning' => {\n    switch (status.toLowerCase()) {\n      case 'running':\n      case 'up':\n      case 'active':\n      case 'healthy':\n      case 'connected':\n      case 'success':\n        return 'success';\n      case 'stopped':\n      case 'down':\n      case 'inactive':\n      case 'disconnected':\n      case 'error':\n      case 'failed':\n        return 'error';\n      case 'pending':\n      case 'warning':\n      case 'standby':\n        return 'warning';\n      case 'info':\n      case 'information':\n        return 'info';\n      default:\n        return 'default';\n    }\n  };\n\n  return (\n    <Chip\n      label={label || status}\n      color={getStatusColor(status)}\n      size={size}\n      variant=\"filled\"\n    />\n  );\n};\n\nexport default StatusBadge;\n","import React from 'react';\nimport { CircularProgress, Box, Typography } from '@mui/material';\n\ninterface LoadingSpinnerProps {\n  size?: number;\n  message?: string;\n  fullScreen?: boolean;\n}\n\nconst LoadingSpinner: React.FC<LoadingSpinnerProps> = ({ \n  size = 40, \n  message = 'Loading...', \n  fullScreen = false \n}) => {\n  const content = (\n    <Box display=\"flex\" flexDirection=\"column\" alignItems=\"center\" gap={2}>\n      <CircularProgress size={size} />\n      {message && (\n        <Typography variant=\"body2\" color=\"text.secondary\">\n          {message}\n        </Typography>\n      )}\n    </Box>\n  );\n\n  if (fullScreen) {\n    return (\n      <Box\n        display=\"flex\"\n        justifyContent=\"center\"\n        alignItems=\"center\"\n        minHeight=\"100vh\"\n        bgcolor=\"background.default\"\n      >\n        {content}\n      </Box>\n    );\n  }\n\n  return content;\n};\n\nexport default LoadingSpinner;\n","import React from 'react';\nimport { Alert, AlertTitle, Button, Box } from '@mui/material';\nimport { Refresh as RefreshIcon } from '@mui/icons-material';\n\ninterface ErrorMessageProps {\n  message: string;\n  title?: string;\n  onRetry?: () => void;\n  severity?: 'error' | 'warning' | 'info';\n}\n\nconst ErrorMessage: React.FC<ErrorMessageProps> = ({ \n  message, \n  title = 'Error', \n  onRetry,\n  severity = 'error' \n}) => {\n  return (\n    <Box display=\"flex\" justifyContent=\"center\" alignItems=\"center\" minHeight=\"400px\">\n      <Alert \n        severity={severity} \n        action={\n          onRetry && (\n            <Button \n              color=\"inherit\" \n              size=\"small\" \n              onClick={onRetry}\n              startIcon={<RefreshIcon />}\n            >\n              Retry\n            </Button>\n          )\n        }\n        sx={{ maxWidth: 600 }}\n      >\n        <AlertTitle>{title}</AlertTitle>\n        {message}\n      </Alert>\n    </Box>\n  );\n};\n\nexport default ErrorMessage;\n","import React, { useState, useEffect } from 'react';\nimport {\n  Box,\n  Grid,\n  Card,\n  CardContent,\n  Typography,\n  Button,\n  Chip,\n  LinearProgress,\n  IconButton,\n  Tooltip,\n  Alert,\n  Paper,\n  List,\n  ListItem,\n  ListItemText,\n  ListItemIcon,\n  Divider,\n  Avatar,\n  Badge,\n  CircularProgress,\n  Table,\n  TableBody,\n  TableCell,\n  TableContainer,\n  TableHead,\n  TableRow,\n  TablePagination,\n} from '@mui/material';\nimport {\n  Refresh as RefreshIcon,\n  PlayArrow as PlayIcon,\n  Pause as PauseIcon,\n  Stop as StopIcon,\n  Settings as SettingsIcon,\n  TrendingUp as TrendingUpIcon,\n  TrendingDown as TrendingDownIcon,\n  NetworkCheck as NetworkCheckIcon,\n  Security as SecurityIcon,\n  Cloud as CloudIcon,\n  Speed as SpeedIcon,\n  BugReport as BugReportIcon,\n  Storage as StorageIcon,\n  Router as RouterIcon,\n  Wifi as WifiIcon,\n  Memory as MemoryIcon,\n  Memory as CpuIcon,\n  Storage as StorageIcon2,\n  Timeline as TimelineIcon,\n  Assessment as AssessmentIcon,\n  Warning as WarningIcon,\n  CheckCircle as CheckCircleIcon,\n  Error as ErrorIcon,\n  Info as InfoIcon,\n} from '@mui/icons-material';\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip as RechartsTooltip, ResponsiveContainer, BarChart, Bar, PieChart, Pie, Cell } from 'recharts';\n\n// Import components\nimport MetricCard from '../components/MetricCard';\nimport StatusBadge from '../components/StatusBadge';\nimport LoadingSpinner from '../components/LoadingSpinner';\nimport ErrorMessage from '../components/ErrorMessage';\n\n// Mock data for demonstration\nconst mockData = {\n  systemStatus: {\n    overall: 'healthy',\n    uptime: '2d 14h 32m',\n    version: '1.0.0',\n    lastUpdate: '2024-01-15 14:30:00',\n  },\n  protocols: [\n    { name: 'BGP', status: 'running', neighbors: 3, routes: 1250, uptime: '2d 14h' },\n    { name: 'OSPF', status: 'running', neighbors: 5, routes: 890, uptime: '2d 14h' },\n    { name: 'ISIS', status: 'stopped', neighbors: 0, routes: 0, uptime: '0s' },\n  ],\n  interfaces: [\n    { name: 'eth0', status: 'up', speed: '1Gbps', rx: 1250000, tx: 980000, errors: 0 },\n    { name: 'eth1', status: 'up', speed: '1Gbps', rx: 890000, tx: 1100000, errors: 0 },\n    { name: 'eth2', status: 'down', speed: '10Gbps', rx: 0, tx: 0, errors: 0 },\n  ],\n  cloudResources: {\n    cloudpods: {\n      instances: 12,\n      networks: 8,\n      storages: 15,\n      loadbalancers: 3,\n      status: 'connected',\n    },\n    aviatrix: {\n      gateways: 5,\n      transitGateways: 2,\n      spokeGateways: 3,\n      status: 'connected',\n    },\n  },\n  trafficStats: {\n    totalPackets: 12500000,\n    totalBytes: 15600000000,\n    packetsPerSecond: 1250,\n    bytesPerSecond: 1560000,\n    droppedPackets: 125,\n    droppedBytes: 156000,\n  },\n  performanceMetrics: [\n    { time: '00:00', cpu: 45, memory: 60, network: 30 },\n    { time: '04:00', cpu: 35, memory: 55, network: 25 },\n    { time: '08:00', cpu: 65, memory: 70, network: 80 },\n    { time: '12:00', cpu: 75, memory: 75, network: 90 },\n    { time: '16:00', cpu: 55, memory: 65, network: 60 },\n    { time: '20:00', cpu: 40, memory: 58, network: 35 },\n  ],\n  recentEvents: [\n    { time: '14:30:15', type: 'info', message: 'BGP neighbor 192.168.1.2 established', severity: 'info' },\n    { time: '14:25:32', type: 'warning', message: 'High CPU usage detected (85%)', severity: 'warning' },\n    { time: '14:20:18', type: 'success', message: 'OSPF convergence completed', severity: 'success' },\n    { time: '14:15:45', type: 'error', message: 'Interface eth2 link down', severity: 'error' },\n    { time: '14:10:22', type: 'info', message: 'CloudPods resource sync completed', severity: 'info' },\n  ],\n  topRoutes: [\n    { destination: '192.168.1.0/24', nextHop: '192.168.1.1', protocol: 'BGP', metric: 0, age: '2d 14h' },\n    { destination: '10.0.0.0/8', nextHop: '10.0.0.1', protocol: 'OSPF', metric: 10, age: '2d 14h' },\n    { destination: '172.16.0.0/12', nextHop: '172.16.0.1', protocol: 'BGP', metric: 0, age: '2d 14h' },\n    { destination: '0.0.0.0/0', nextHop: '203.0.113.1', protocol: 'BGP', metric: 0, age: '2d 14h' },\n  ],\n};\n\nconst Dashboard: React.FC = () => {\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n  const [data, setData] = useState(mockData);\n  const [page, setPage] = useState(0);\n  const [rowsPerPage, setRowsPerPage] = useState(5);\n\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        setLoading(true);\n        setError(null);\n        \n        // Simulate API calls\n        await new Promise(resolve => setTimeout(resolve, 1000));\n        \n        // In a real implementation, these would be actual API calls\n        // const systemStatus = await fetch('/api/v1/status').then(r => r.json());\n        // const protocols = await fetch('/api/v1/protocols').then(r => r.json());\n        // etc.\n        \n        setData(mockData);\n        setLoading(false);\n      } catch (err) {\n        console.error('Failed to fetch dashboard data:', err);\n        setError(err instanceof Error ? err.message : 'Unknown error');\n        setLoading(false);\n      }\n    };\n\n    fetchData();\n    \n    // Set up periodic refresh\n    const interval = setInterval(fetchData, 30000); // Refresh every 30 seconds\n    return () => clearInterval(interval);\n  }, []);\n\n  const handleRefresh = () => {\n    setLoading(true);\n    // Trigger refresh\n    window.location.reload();\n  };\n\n  const handleChangePage = (event: unknown, newPage: number) => {\n    setPage(newPage);\n  };\n\n  const handleChangeRowsPerPage = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setRowsPerPage(parseInt(event.target.value, 10));\n    setPage(0);\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status.toLowerCase()) {\n      case 'running':\n      case 'up':\n      case 'healthy':\n      case 'connected':\n        return 'success';\n      case 'stopped':\n      case 'down':\n      case 'disconnected':\n        return 'error';\n      case 'warning':\n        return 'warning';\n      default:\n        return 'default';\n    }\n  };\n\n  const getSeverityIcon = (severity: string) => {\n    switch (severity) {\n      case 'success':\n        return <CheckCircleIcon color=\"success\" />;\n      case 'warning':\n        return <WarningIcon color=\"warning\" />;\n      case 'error':\n        return <ErrorIcon color=\"error\" />;\n      default:\n        return <InfoIcon color=\"info\" />;\n    }\n  };\n\n  if (loading) {\n    return (\n      <Box display=\"flex\" justifyContent=\"center\" alignItems=\"center\" minHeight=\"400px\">\n        <LoadingSpinner size={60} />\n      </Box>\n    );\n  }\n\n  if (error) {\n    return <ErrorMessage message={error} />;\n  }\n\n  return (\n    <Box>\n      {/* Header */}\n      <Box display=\"flex\" justifyContent=\"space-between\" alignItems=\"center\" mb={3}>\n        <Typography variant=\"h4\" component=\"h1\">\n          Dashboard\n        </Typography>\n        <Box>\n          <Tooltip title=\"Refresh\">\n            <IconButton onClick={handleRefresh} disabled={loading}>\n              <RefreshIcon />\n            </IconButton>\n          </Tooltip>\n          <Tooltip title=\"Settings\">\n            <IconButton>\n              <SettingsIcon />\n            </IconButton>\n          </Tooltip>\n        </Box>\n      </Box>\n\n      {/* System Status Overview */}\n      <Grid container spacing={3} mb={3}>\n        <Grid item xs={12} md={3}>\n          <Card>\n            <CardContent>\n              <Box display=\"flex\" alignItems=\"center\" mb={2}>\n                <RouterIcon color=\"primary\" sx={{ mr: 1 }} />\n                <Typography variant=\"h6\">System Status</Typography>\n              </Box>\n              <StatusBadge \n                status={data.systemStatus.overall} \n                label={data.systemStatus.overall.toUpperCase()} \n              />\n              <Typography variant=\"body2\" color=\"text.secondary\" sx={{ mt: 1 }}>\n                Uptime: {data.systemStatus.uptime}\n              </Typography>\n              <Typography variant=\"body2\" color=\"text.secondary\">\n                Version: {data.systemStatus.version}\n              </Typography>\n            </CardContent>\n          </Card>\n        </Grid>\n        \n        <Grid item xs={12} md={3}>\n          <Card>\n            <CardContent>\n              <Box display=\"flex\" alignItems=\"center\" mb={2}>\n                <CloudIcon color=\"primary\" sx={{ mr: 1 }} />\n                <Typography variant=\"h6\">CloudPods</Typography>\n              </Box>\n              <StatusBadge \n                status={data.cloudResources.cloudpods.status} \n                label={data.cloudResources.cloudpods.status.toUpperCase()} \n              />\n              <Typography variant=\"body2\" color=\"text.secondary\" sx={{ mt: 1 }}>\n                Instances: {data.cloudResources.cloudpods.instances}\n              </Typography>\n              <Typography variant=\"body2\" color=\"text.secondary\">\n                Networks: {data.cloudResources.cloudpods.networks}\n              </Typography>\n            </CardContent>\n          </Card>\n        </Grid>\n        \n        <Grid item xs={12} md={3}>\n          <Card>\n            <CardContent>\n              <Box display=\"flex\" alignItems=\"center\" mb={2}>\n                <SecurityIcon color=\"primary\" sx={{ mr: 1 }} />\n                <Typography variant=\"h6\">Aviatrix</Typography>\n              </Box>\n              <StatusBadge \n                status={data.cloudResources.aviatrix.status} \n                label={data.cloudResources.aviatrix.status.toUpperCase()} \n              />\n              <Typography variant=\"body2\" color=\"text.secondary\" sx={{ mt: 1 }}>\n                Gateways: {data.cloudResources.aviatrix.gateways}\n              </Typography>\n              <Typography variant=\"body2\" color=\"text.secondary\">\n                Transit: {data.cloudResources.aviatrix.transitGateways}\n              </Typography>\n            </CardContent>\n          </Card>\n        </Grid>\n        \n        <Grid item xs={12} md={3}>\n          <Card>\n            <CardContent>\n              <Box display=\"flex\" alignItems=\"center\" mb={2}>\n                <SpeedIcon color=\"primary\" sx={{ mr: 1 }} />\n                <Typography variant=\"h6\">Traffic</Typography>\n              </Box>\n              <Typography variant=\"h4\" color=\"primary\">\n                {data.trafficStats.packetsPerSecond.toLocaleString()}\n              </Typography>\n              <Typography variant=\"body2\" color=\"text.secondary\">\n                packets/sec\n              </Typography>\n              <Typography variant=\"body2\" color=\"text.secondary\">\n                {data.trafficStats.bytesPerSecond.toLocaleString()} bytes/sec\n              </Typography>\n            </CardContent>\n          </Card>\n        </Grid>\n      </Grid>\n\n      {/* Performance Metrics */}\n      <Grid container spacing={3} mb={3}>\n        <Grid item xs={12} md={8}>\n          <Card>\n            <CardContent>\n              <Typography variant=\"h6\" gutterBottom>\n                Performance Metrics\n              </Typography>\n              <ResponsiveContainer width=\"100%\" height={300}>\n                <LineChart data={data.performanceMetrics}>\n                  <CartesianGrid strokeDasharray=\"3 3\" />\n                  <XAxis dataKey=\"time\" />\n                  <YAxis />\n                  <RechartsTooltip />\n                  <Line type=\"monotone\" dataKey=\"cpu\" stroke=\"#1976d2\" strokeWidth={2} />\n                  <Line type=\"monotone\" dataKey=\"memory\" stroke=\"#dc004e\" strokeWidth={2} />\n                  <Line type=\"monotone\" dataKey=\"network\" stroke=\"#2e7d32\" strokeWidth={2} />\n                </LineChart>\n              </ResponsiveContainer>\n            </CardContent>\n          </Card>\n        </Grid>\n        \n        <Grid item xs={12} md={4}>\n          <Card>\n            <CardContent>\n              <Typography variant=\"h6\" gutterBottom>\n                Resource Usage\n              </Typography>\n              <Box mb={2}>\n                <Box display=\"flex\" justifyContent=\"space-between\" mb={1}>\n                  <Typography variant=\"body2\">CPU</Typography>\n                  <Typography variant=\"body2\">65%</Typography>\n                </Box>\n                <LinearProgress variant=\"determinate\" value={65} />\n              </Box>\n              <Box mb={2}>\n                <Box display=\"flex\" justifyContent=\"space-between\" mb={1}>\n                  <Typography variant=\"body2\">Memory</Typography>\n                  <Typography variant=\"body2\">70%</Typography>\n                </Box>\n                <LinearProgress variant=\"determinate\" value={70} />\n              </Box>\n              <Box mb={2}>\n                <Box display=\"flex\" justifyContent=\"space-between\" mb={1}>\n                  <Typography variant=\"body2\">Network</Typography>\n                  <Typography variant=\"body2\">45%</Typography>\n                </Box>\n                <LinearProgress variant=\"determinate\" value={45} />\n              </Box>\n              <Box mb={2}>\n                <Box display=\"flex\" justifyContent=\"space-between\" mb={1}>\n                  <Typography variant=\"body2\">Storage</Typography>\n                  <Typography variant=\"body2\">30%</Typography>\n                </Box>\n                <LinearProgress variant=\"determinate\" value={30} />\n              </Box>\n            </CardContent>\n          </Card>\n        </Grid>\n      </Grid>\n\n      {/* Protocols and Interfaces */}\n      <Grid container spacing={3} mb={3}>\n        <Grid item xs={12} md={6}>\n          <Card>\n            <CardContent>\n              <Typography variant=\"h6\" gutterBottom>\n                Routing Protocols\n              </Typography>\n              <List>\n                {data.protocols.map((protocol, index) => (\n                  <React.Fragment key={index}>\n                    <ListItem>\n                      <ListItemIcon>\n                        <NetworkCheckIcon color={getStatusColor(protocol.status) as any} />\n                      </ListItemIcon>\n                      <ListItemText\n                        primary={protocol.name}\n                        secondary={\n                          <Box>\n                            <Typography variant=\"body2\" color=\"text.secondary\">\n                              Status: {protocol.status} | Neighbors: {protocol.neighbors} | Routes: {protocol.routes}\n                            </Typography>\n                            <Typography variant=\"body2\" color=\"text.secondary\">\n                              Uptime: {protocol.uptime}\n                            </Typography>\n                          </Box>\n                        }\n                      />\n                      <Chip \n                        label={protocol.status} \n                        color={getStatusColor(protocol.status) as any}\n                        size=\"small\"\n                      />\n                    </ListItem>\n                    {index < data.protocols.length - 1 && <Divider />}\n                  </React.Fragment>\n                ))}\n              </List>\n            </CardContent>\n          </Card>\n        </Grid>\n        \n        <Grid item xs={12} md={6}>\n          <Card>\n            <CardContent>\n              <Typography variant=\"h6\" gutterBottom>\n                Network Interfaces\n              </Typography>\n              <List>\n                {data.interfaces.map((iface, index) => (\n                  <React.Fragment key={index}>\n                    <ListItem>\n                      <ListItemIcon>\n                        <WifiIcon color={getStatusColor(iface.status) as any} />\n                      </ListItemIcon>\n                      <ListItemText\n                        primary={iface.name}\n                        secondary={\n                          <Box>\n                            <Typography variant=\"body2\" color=\"text.secondary\">\n                              Speed: {iface.speed} | RX: {iface.rx.toLocaleString()} | TX: {iface.tx.toLocaleString()}\n                            </Typography>\n                            <Typography variant=\"body2\" color=\"text.secondary\">\n                              Errors: {iface.errors}\n                            </Typography>\n                          </Box>\n                        }\n                      />\n                      <Chip \n                        label={iface.status} \n                        color={getStatusColor(iface.status) as any}\n                        size=\"small\"\n                      />\n                    </ListItem>\n                    {index < data.interfaces.length - 1 && <Divider />}\n                  </React.Fragment>\n                ))}\n              </List>\n            </CardContent>\n          </Card>\n        </Grid>\n      </Grid>\n\n      {/* Recent Events and Top Routes */}\n      <Grid container spacing={3}>\n        <Grid item xs={12} md={6}>\n          <Card>\n            <CardContent>\n              <Typography variant=\"h6\" gutterBottom>\n                Recent Events\n              </Typography>\n              <List>\n                {data.recentEvents.map((event, index) => (\n                  <React.Fragment key={index}>\n                    <ListItem>\n                      <ListItemIcon>\n                        {getSeverityIcon(event.severity)}\n                      </ListItemIcon>\n                      <ListItemText\n                        primary={event.message}\n                        secondary={event.time}\n                      />\n                    </ListItem>\n                    {index < data.recentEvents.length - 1 && <Divider />}\n                  </React.Fragment>\n                ))}\n              </List>\n            </CardContent>\n          </Card>\n        </Grid>\n        \n        <Grid item xs={12} md={6}>\n          <Card>\n            <CardContent>\n              <Typography variant=\"h6\" gutterBottom>\n                Top Routes\n              </Typography>\n              <TableContainer>\n                <Table size=\"small\">\n                  <TableHead>\n                    <TableRow>\n                      <TableCell>Destination</TableCell>\n                      <TableCell>Next Hop</TableCell>\n                      <TableCell>Protocol</TableCell>\n                      <TableCell>Metric</TableCell>\n                    </TableRow>\n                  </TableHead>\n                  <TableBody>\n                    {data.topRoutes\n                      .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\n                      .map((route, index) => (\n                        <TableRow key={index}>\n                          <TableCell>{route.destination}</TableCell>\n                          <TableCell>{route.nextHop}</TableCell>\n                          <TableCell>\n                            <Chip \n                              label={route.protocol} \n                              size=\"small\" \n                              color=\"primary\"\n                            />\n                          </TableCell>\n                          <TableCell>{route.metric}</TableCell>\n                        </TableRow>\n                      ))}\n                  </TableBody>\n                </Table>\n              </TableContainer>\n              <TablePagination\n                rowsPerPageOptions={[5, 10, 25]}\n                component=\"div\"\n                count={data.topRoutes.length}\n                rowsPerPage={rowsPerPage}\n                page={page}\n                onPageChange={handleChangePage}\n                onRowsPerPageChange={handleChangeRowsPerPage}\n              />\n            </CardContent>\n          </Card>\n        </Grid>\n      </Grid>\n    </Box>\n  );\n};\n\nexport default Dashboard;\n","import React from 'react';\nimport { Box, Typography } from '@mui/material';\n\nconst NetworkTopology: React.FC = () => {\n  return (\n    <Box>\n      <Typography variant=\"h4\" component=\"h1\">\n        Network Topology\n      </Typography>\n      <Typography variant=\"body1\" color=\"text.secondary\">\n        Network topology visualization and management interface.\n      </Typography>\n    </Box>\n  );\n};\n\nexport default NetworkTopology;\n","import React from 'react';\nimport { Card, CardContent, Typography, Box, IconButton, Tooltip } from '@mui/material';\nimport { TrendingUp as TrendingUpIcon, TrendingDown as TrendingDownIcon } from '@mui/icons-material';\n\ninterface MetricCardProps {\n  title: string;\n  value: string | number;\n  subtitle?: string;\n  icon?: React.ReactNode;\n  color?: 'primary' | 'secondary' | 'success' | 'error' | 'warning' | 'info';\n  trend?: 'up' | 'down' | 'neutral';\n  trendValue?: string;\n  onClick?: () => void;\n  tooltip?: string;\n}\n\nconst MetricCard: React.FC<MetricCardProps> = ({\n  title,\n  value,\n  subtitle,\n  icon,\n  color = 'primary',\n  trend,\n  trendValue,\n  onClick,\n  tooltip\n}) => {\n  const getTrendIcon = () => {\n    switch (trend) {\n      case 'up':\n        return <TrendingUpIcon color=\"success\" />;\n      case 'down':\n        return <TrendingDownIcon color=\"error\" />;\n      default:\n        return null;\n    }\n  };\n\n  const getTrendColor = () => {\n    switch (trend) {\n      case 'up':\n        return 'success.main';\n      case 'down':\n        return 'error.main';\n      default:\n        return 'text.secondary';\n    }\n  };\n\n  const cardContent = (\n    <Card \n      sx={{ \n        height: '100%',\n        cursor: onClick ? 'pointer' : 'default',\n        transition: 'transform 0.2s ease-in-out, box-shadow 0.2s ease-in-out',\n        '&:hover': onClick ? {\n          transform: 'translateY(-2px)',\n          boxShadow: 4\n        } : {}\n      }}\n      onClick={onClick}\n    >\n      <CardContent>\n        <Box display=\"flex\" justifyContent=\"space-between\" alignItems=\"flex-start\" mb={2}>\n          <Box>\n            <Typography variant=\"h6\" color=\"text.secondary\" gutterBottom>\n              {title}\n            </Typography>\n            <Typography \n              variant=\"h4\" \n              color={`${color}.main`}\n              fontWeight=\"bold\"\n            >\n              {typeof value === 'number' ? value.toLocaleString() : value}\n            </Typography>\n          </Box>\n          {icon && (\n            <Box color={`${color}.main`}>\n              {icon}\n            </Box>\n          )}\n        </Box>\n        \n        {subtitle && (\n          <Typography variant=\"body2\" color=\"text.secondary\" gutterBottom>\n            {subtitle}\n          </Typography>\n        )}\n        \n        {trend && trendValue && (\n          <Box display=\"flex\" alignItems=\"center\" gap={0.5}>\n            {getTrendIcon()}\n            <Typography \n              variant=\"body2\" \n              color={getTrendColor()}\n              fontWeight=\"medium\"\n            >\n              {trendValue}\n            </Typography>\n          </Box>\n        )}\n      </CardContent>\n    </Card>\n  );\n\n  if (tooltip) {\n    return (\n      <Tooltip title={tooltip} arrow>\n        {cardContent}\n      </Tooltip>\n    );\n  }\n\n  return cardContent;\n};\n\nexport default MetricCard;\n","import React, { useState, useEffect } from 'react';\nimport {\n  Box,\n  Grid,\n  Card,\n  CardContent,\n  Typography,\n  Button,\n  Chip,\n  IconButton,\n  Tooltip,\n  Alert,\n  Paper,\n  List,\n  ListItem,\n  ListItemText,\n  ListItemIcon,\n  Divider,\n  Avatar,\n  Badge,\n  CircularProgress,\n  Table,\n  TableBody,\n  TableCell,\n  TableContainer,\n  TableHead,\n  TableRow,\n  TablePagination,\n  Dialog,\n  DialogTitle,\n  DialogContent,\n  DialogActions,\n  TextField,\n  FormControl,\n  InputLabel,\n  Select,\n  MenuItem,\n  Switch,\n  FormControlLabel,\n  Tabs,\n  Tab,\n  Accordion,\n  AccordionSummary,\n  AccordionDetails,\n  LinearProgress,\n} from '@mui/material';\nimport {\n  Refresh as RefreshIcon,\n  Add as AddIcon,\n  Edit as EditIcon,\n  Delete as DeleteIcon,\n  PlayArrow as PlayIcon,\n  Pause as PauseIcon,\n  Stop as StopIcon,\n  Settings as SettingsIcon,\n  Cloud as CloudIcon,\n  Storage as StorageIcon,\n  NetworkCheck as NetworkCheckIcon,\n  Memory as MemoryIcon,\n  Memory as CpuIcon,\n  Timeline as TimelineIcon,\n  Assessment as AssessmentIcon,\n  Warning as WarningIcon,\n  CheckCircle as CheckCircleIcon,\n  Error as ErrorIcon,\n  Info as InfoIcon,\n  ExpandMore as ExpandMoreIcon,\n  Computer as ComputerIcon,\n  Router as RouterIcon,\n  Storage as StorageIcon2,\n  Speed as SpeedIcon,\n  Security as SecurityIcon,\n  Public as PublicIcon,\n  VpnKey as VpnKeyIcon,\n  AccountTree as AccountTreeIcon,\n  Dashboard as DashboardIcon,\n} from '@mui/icons-material';\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip as RechartsTooltip, ResponsiveContainer, BarChart, Bar, PieChart, Pie, Cell } from 'recharts';\n\n// Import components\nimport MetricCard from '../components/MetricCard';\nimport StatusBadge from '../components/StatusBadge';\nimport LoadingSpinner from '../components/LoadingSpinner';\nimport ErrorMessage from '../components/ErrorMessage';\n\n// Mock data for CloudPods integration\nconst mockCloudPodsData = {\n  connection: {\n    status: 'connected',\n    endpoint: 'https://cloudpods.example.com',\n    version: '3.10.0',\n    lastSync: '2024-01-15 14:30:00',\n    uptime: '2d 14h 32m',\n  },\n  resources: {\n    instances: [\n      {\n        id: 'i-1234567890abcdef0',\n        name: 'web-server-01',\n        status: 'running',\n        type: 't3.medium',\n        zone: 'us-west-1a',\n        vcpu: 2,\n        memory: 4,\n        storage: 20,\n        network: 'vpc-12345678',\n        publicIp: '203.0.113.10',\n        privateIp: '10.0.1.10',\n        os: 'Ubuntu 20.04',\n        created: '2024-01-10 09:15:00',\n        tags: ['web', 'production', 'nginx'],\n      },\n      {\n        id: 'i-0987654321fedcba0',\n        name: 'db-server-01',\n        status: 'running',\n        type: 'r5.large',\n        zone: 'us-west-1b',\n        vcpu: 4,\n        memory: 16,\n        storage: 100,\n        network: 'vpc-12345678',\n        publicIp: '203.0.113.11',\n        privateIp: '10.0.1.11',\n        os: 'Ubuntu 20.04',\n        created: '2024-01-10 09:20:00',\n        tags: ['database', 'production', 'postgresql'],\n      },\n      {\n        id: 'i-abcdef1234567890',\n        name: 'cache-server-01',\n        status: 'stopped',\n        type: 't3.small',\n        zone: 'us-west-1c',\n        vcpu: 1,\n        memory: 2,\n        storage: 10,\n        network: 'vpc-12345678',\n        publicIp: '203.0.113.12',\n        privateIp: '10.0.1.12',\n        os: 'Ubuntu 20.04',\n        created: '2024-01-12 14:30:00',\n        tags: ['cache', 'staging', 'redis'],\n      },\n    ],\n    networks: [\n      {\n        id: 'vpc-12345678',\n        name: 'production-vpc',\n        cidr: '10.0.0.0/16',\n        status: 'available',\n        subnets: 3,\n        instances: 12,\n        region: 'us-west-1',\n        created: '2024-01-10 09:00:00',\n        tags: ['production', 'web'],\n      },\n      {\n        id: 'vpc-87654321',\n        name: 'staging-vpc',\n        cidr: '172.16.0.0/16',\n        status: 'available',\n        subnets: 2,\n        instances: 5,\n        region: 'us-west-1',\n        created: '2024-01-12 10:00:00',\n        tags: ['staging', 'test'],\n      },\n    ],\n    storages: [\n      {\n        id: 'vol-1234567890abcdef0',\n        name: 'web-data-01',\n        size: 100,\n        type: 'gp3',\n        status: 'in-use',\n        instance: 'i-1234567890abcdef0',\n        zone: 'us-west-1a',\n        created: '2024-01-10 09:15:00',\n        tags: ['web', 'data'],\n      },\n      {\n        id: 'vol-0987654321fedcba0',\n        name: 'db-data-01',\n        size: 500,\n        type: 'gp3',\n        status: 'in-use',\n        instance: 'i-0987654321fedcba0',\n        zone: 'us-west-1b',\n        created: '2024-01-10 09:20:00',\n        tags: ['database', 'data'],\n      },\n    ],\n    loadBalancers: [\n      {\n        id: 'lb-1234567890abcdef0',\n        name: 'web-lb-01',\n        status: 'active',\n        type: 'application',\n        scheme: 'internet-facing',\n        vpc: 'vpc-12345678',\n        instances: 2,\n        listeners: 2,\n        healthChecks: 1,\n        created: '2024-01-10 09:30:00',\n        tags: ['web', 'production'],\n      },\n    ],\n  },\n  metrics: {\n    instances: {\n      total: 12,\n      running: 10,\n      stopped: 2,\n      pending: 0,\n    },\n    networks: {\n      total: 8,\n      available: 7,\n      pending: 1,\n    },\n    storage: {\n      total: 15,\n      inUse: 12,\n      available: 3,\n      totalSize: 2500, // GB\n    },\n    loadBalancers: {\n      total: 3,\n      active: 2,\n      inactive: 1,\n    },\n  },\n  performance: [\n    { time: '00:00', cpu: 45, memory: 60, network: 30, storage: 25 },\n    { time: '04:00', cpu: 35, memory: 55, network: 25, storage: 20 },\n    { time: '08:00', cpu: 65, memory: 70, network: 80, storage: 35 },\n    { time: '12:00', cpu: 75, memory: 75, network: 90, storage: 40 },\n    { time: '16:00', cpu: 55, memory: 65, network: 60, storage: 30 },\n    { time: '20:00', cpu: 40, memory: 58, network: 35, storage: 25 },\n  ],\n  recentEvents: [\n    { time: '14:30:15', type: 'info', message: 'Instance i-1234567890abcdef0 started', severity: 'info' },\n    { time: '14:25:32', type: 'warning', message: 'High CPU usage on instance i-0987654321fedcba0', severity: 'warning' },\n    { time: '14:20:18', type: 'success', message: 'Load balancer lb-1234567890abcdef0 health check passed', severity: 'success' },\n    { time: '14:15:45', type: 'error', message: 'Instance i-abcdef1234567890 stopped unexpectedly', severity: 'error' },\n    { time: '14:10:22', type: 'info', message: 'Storage volume vol-1234567890abcdef0 attached', severity: 'info' },\n  ],\n};\n\ninterface TabPanelProps {\n  children?: React.ReactNode;\n  index: number;\n  value: number;\n}\n\nfunction TabPanel(props: TabPanelProps) {\n  const { children, value, index, ...other } = props;\n  return (\n    <div\n      role=\"tabpanel\"\n      hidden={value !== index}\n      id={`cloudpods-tabpanel-${index}`}\n      aria-labelledby={`cloudpods-tab-${index}`}\n      {...other}\n    >\n      {value === index && <Box sx={{ p: 3 }}>{children}</Box>}\n    </div>\n  );\n}\n\nconst CloudPods: React.FC = () => {\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n  const [data, setData] = useState(mockCloudPodsData);\n  const [tabValue, setTabValue] = useState(0);\n  const [page, setPage] = useState(0);\n  const [rowsPerPage, setRowsPerPage] = useState(10);\n  const [createDialogOpen, setCreateDialogOpen] = useState(false);\n  const [selectedResource, setSelectedResource] = useState<string | null>(null);\n\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        setLoading(true);\n        setError(null);\n        \n        // Simulate API calls\n        await new Promise(resolve => setTimeout(resolve, 1000));\n        \n        // In a real implementation, these would be actual API calls\n        // const connection = await fetch('/api/v1/cloudpods/connection').then(r => r.json());\n        // const instances = await fetch('/api/v1/cloudpods/instances').then(r => r.json());\n        // etc.\n        \n        setData(mockCloudPodsData);\n        setLoading(false);\n      } catch (err) {\n        console.error('Failed to fetch CloudPods data:', err);\n        setError(err instanceof Error ? err.message : 'Unknown error');\n        setLoading(false);\n      }\n    };\n\n    fetchData();\n    \n    // Set up periodic refresh\n    const interval = setInterval(fetchData, 30000); // Refresh every 30 seconds\n    return () => clearInterval(interval);\n  }, []);\n\n  const handleRefresh = () => {\n    setLoading(true);\n    // Trigger refresh\n    window.location.reload();\n  };\n\n  const handleTabChange = (event: React.SyntheticEvent, newValue: number) => {\n    setTabValue(newValue);\n  };\n\n  const handleChangePage = (event: unknown, newPage: number) => {\n    setPage(newPage);\n  };\n\n  const handleChangeRowsPerPage = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setRowsPerPage(parseInt(event.target.value, 10));\n    setPage(0);\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status.toLowerCase()) {\n      case 'running':\n      case 'active':\n      case 'available':\n      case 'in-use':\n      case 'connected':\n        return 'success';\n      case 'stopped':\n      case 'inactive':\n      case 'disconnected':\n        return 'error';\n      case 'pending':\n      case 'warning':\n        return 'warning';\n      default:\n        return 'default';\n    }\n  };\n\n  const getSeverityIcon = (severity: string) => {\n    switch (severity) {\n      case 'success':\n        return <CheckCircleIcon color=\"success\" />;\n      case 'warning':\n        return <WarningIcon color=\"warning\" />;\n      case 'error':\n        return <ErrorIcon color=\"error\" />;\n      default:\n        return <InfoIcon color=\"info\" />;\n    }\n  };\n\n  if (loading) {\n    return (\n      <Box display=\"flex\" justifyContent=\"center\" alignItems=\"center\" minHeight=\"400px\">\n        <LoadingSpinner size={60} />\n      </Box>\n    );\n  }\n\n  if (error) {\n    return <ErrorMessage message={error} />;\n  }\n\n  return (\n    <Box>\n      {/* Header */}\n      <Box display=\"flex\" justifyContent=\"space-between\" alignItems=\"center\" mb={3}>\n        <Typography variant=\"h4\" component=\"h1\">\n          CloudPods Integration\n        </Typography>\n        <Box>\n          <Tooltip title=\"Refresh\">\n            <IconButton onClick={handleRefresh} disabled={loading}>\n              <RefreshIcon />\n            </IconButton>\n          </Tooltip>\n          <Tooltip title=\"Settings\">\n            <IconButton>\n              <SettingsIcon />\n            </IconButton>\n          </Tooltip>\n        </Box>\n      </Box>\n\n      {/* Connection Status */}\n      <Alert \n        severity={data.connection.status === 'connected' ? 'success' : 'error'} \n        sx={{ mb: 3 }}\n        action={\n          <Button color=\"inherit\" size=\"small\">\n            Configure\n          </Button>\n        }\n      >\n        <Typography variant=\"h6\">\n          CloudPods {data.connection.status === 'connected' ? 'Connected' : 'Disconnected'}\n        </Typography>\n        <Typography variant=\"body2\">\n          Endpoint: {data.connection.endpoint} | Version: {data.connection.version} | \n          Last Sync: {data.connection.lastSync}\n        </Typography>\n      </Alert>\n\n      {/* Metrics Overview */}\n      <Grid container spacing={3} mb={3}>\n        <Grid item xs={12} sm={6} md={3}>\n          <MetricCard\n            title=\"Instances\"\n            value={data.metrics.instances.total}\n            subtitle={`${data.metrics.instances.running} running, ${data.metrics.instances.stopped} stopped`}\n            icon={<ComputerIcon />}\n            color=\"primary\"\n          />\n        </Grid>\n        <Grid item xs={12} sm={6} md={3}>\n          <MetricCard\n            title=\"Networks\"\n            value={data.metrics.networks.total}\n            subtitle={`${data.metrics.networks.available} available, ${data.metrics.networks.pending} pending`}\n            icon={<NetworkCheckIcon />}\n            color=\"success\"\n          />\n        </Grid>\n        <Grid item xs={12} sm={6} md={3}>\n          <MetricCard\n            title=\"Storage\"\n            value={data.metrics.storage.total}\n            subtitle={`${data.metrics.storage.totalSize} GB total, ${data.metrics.storage.inUse} in use`}\n            icon={<StorageIcon />}\n            color=\"warning\"\n          />\n        </Grid>\n        <Grid item xs={12} sm={6} md={3}>\n          <MetricCard\n            title=\"Load Balancers\"\n            value={data.metrics.loadBalancers.total}\n            subtitle={`${data.metrics.loadBalancers.active} active, ${data.metrics.loadBalancers.inactive} inactive`}\n            icon={<SpeedIcon />}\n            color=\"info\"\n          />\n        </Grid>\n      </Grid>\n\n      {/* Tabs */}\n      <Paper sx={{ mb: 3 }}>\n        <Tabs value={tabValue} onChange={handleTabChange} aria-label=\"CloudPods tabs\">\n          <Tab label=\"Instances\" icon={<ComputerIcon />} />\n          <Tab label=\"Networks\" icon={<NetworkCheckIcon />} />\n          <Tab label=\"Storage\" icon={<StorageIcon />} />\n          <Tab label=\"Load Balancers\" icon={<SpeedIcon />} />\n          <Tab label=\"Performance\" icon={<TimelineIcon />} />\n          <Tab label=\"Events\" icon={<AssessmentIcon />} />\n        </Tabs>\n      </Paper>\n\n      {/* Instances Tab */}\n      <TabPanel value={tabValue} index={0}>\n        <Box display=\"flex\" justifyContent=\"space-between\" alignItems=\"center\" mb={2}>\n          <Typography variant=\"h6\">Instances</Typography>\n          <Button\n            variant=\"contained\"\n            startIcon={<AddIcon />}\n            onClick={() => setCreateDialogOpen(true)}\n          >\n            Create Instance\n          </Button>\n        </Box>\n        \n        <TableContainer component={Paper}>\n          <Table>\n            <TableHead>\n              <TableRow>\n                <TableCell>Name</TableCell>\n                <TableCell>Status</TableCell>\n                <TableCell>Type</TableCell>\n                <TableCell>Zone</TableCell>\n                <TableCell>IP Address</TableCell>\n                <TableCell>OS</TableCell>\n                <TableCell>Actions</TableCell>\n              </TableRow>\n            </TableHead>\n            <TableBody>\n              {data.resources.instances\n                .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\n                .map((instance) => (\n                  <TableRow key={instance.id}>\n                    <TableCell>\n                      <Box display=\"flex\" alignItems=\"center\">\n                        <ComputerIcon sx={{ mr: 1 }} />\n                        {instance.name}\n                      </Box>\n                    </TableCell>\n                    <TableCell>\n                      <Chip \n                        label={instance.status} \n                        color={getStatusColor(instance.status) as any}\n                        size=\"small\"\n                      />\n                    </TableCell>\n                    <TableCell>{instance.type}</TableCell>\n                    <TableCell>{instance.zone}</TableCell>\n                    <TableCell>\n                      <Box>\n                        <Typography variant=\"body2\">Public: {instance.publicIp}</Typography>\n                        <Typography variant=\"body2\">Private: {instance.privateIp}</Typography>\n                      </Box>\n                    </TableCell>\n                    <TableCell>{instance.os}</TableCell>\n                    <TableCell>\n                      <IconButton size=\"small\">\n                        <EditIcon />\n                      </IconButton>\n                      <IconButton size=\"small\">\n                        <DeleteIcon />\n                      </IconButton>\n                    </TableCell>\n                  </TableRow>\n                ))}\n            </TableBody>\n          </Table>\n        </TableContainer>\n        \n        <TablePagination\n          rowsPerPageOptions={[5, 10, 25]}\n          component=\"div\"\n          count={data.resources.instances.length}\n          rowsPerPage={rowsPerPage}\n          page={page}\n          onPageChange={handleChangePage}\n          onRowsPerPageChange={handleChangeRowsPerPage}\n        />\n      </TabPanel>\n\n      {/* Networks Tab */}\n      <TabPanel value={tabValue} index={1}>\n        <Box display=\"flex\" justifyContent=\"space-between\" alignItems=\"center\" mb={2}>\n          <Typography variant=\"h6\">Networks</Typography>\n          <Button\n            variant=\"contained\"\n            startIcon={<AddIcon />}\n            onClick={() => setCreateDialogOpen(true)}\n          >\n            Create Network\n          </Button>\n        </Box>\n        \n        <Grid container spacing={2}>\n          {data.resources.networks.map((network) => (\n            <Grid item xs={12} md={6} key={network.id}>\n              <Card>\n                <CardContent>\n                  <Box display=\"flex\" justifyContent=\"space-between\" alignItems=\"center\" mb={2}>\n                    <Typography variant=\"h6\">{network.name}</Typography>\n                    <Chip \n                      label={network.status} \n                      color={getStatusColor(network.status) as any}\n                      size=\"small\"\n                    />\n                  </Box>\n                  <Typography variant=\"body2\" color=\"text.secondary\" gutterBottom>\n                    CIDR: {network.cidr}\n                  </Typography>\n                  <Typography variant=\"body2\" color=\"text.secondary\" gutterBottom>\n                    Region: {network.region}\n                  </Typography>\n                  <Typography variant=\"body2\" color=\"text.secondary\" gutterBottom>\n                    Subnets: {network.subnets} | Instances: {network.instances}\n                  </Typography>\n                  <Typography variant=\"body2\" color=\"text.secondary\">\n                    Created: {network.created}\n                  </Typography>\n                  <Box mt={2}>\n                    {network.tags.map((tag, index) => (\n                      <Chip key={index} label={tag} size=\"small\" sx={{ mr: 1, mb: 1 }} />\n                    ))}\n                  </Box>\n                </CardContent>\n              </Card>\n            </Grid>\n          ))}\n        </Grid>\n      </TabPanel>\n\n      {/* Storage Tab */}\n      <TabPanel value={tabValue} index={2}>\n        <Box display=\"flex\" justifyContent=\"space-between\" alignItems=\"center\" mb={2}>\n          <Typography variant=\"h6\">Storage</Typography>\n          <Button\n            variant=\"contained\"\n            startIcon={<AddIcon />}\n            onClick={() => setCreateDialogOpen(true)}\n          >\n            Create Volume\n          </Button>\n        </Box>\n        \n        <TableContainer component={Paper}>\n          <Table>\n            <TableHead>\n              <TableRow>\n                <TableCell>Name</TableCell>\n                <TableCell>Status</TableCell>\n                <TableCell>Size (GB)</TableCell>\n                <TableCell>Type</TableCell>\n                <TableCell>Instance</TableCell>\n                <TableCell>Zone</TableCell>\n                <TableCell>Actions</TableCell>\n              </TableRow>\n            </TableHead>\n            <TableBody>\n              {data.resources.storages.map((storage) => (\n                <TableRow key={storage.id}>\n                  <TableCell>\n                    <Box display=\"flex\" alignItems=\"center\">\n                      <StorageIcon sx={{ mr: 1 }} />\n                      {storage.name}\n                    </Box>\n                  </TableCell>\n                  <TableCell>\n                    <Chip \n                      label={storage.status} \n                      color={getStatusColor(storage.status) as any}\n                      size=\"small\"\n                    />\n                  </TableCell>\n                  <TableCell>{storage.size}</TableCell>\n                  <TableCell>{storage.type}</TableCell>\n                  <TableCell>{storage.instance}</TableCell>\n                  <TableCell>{storage.zone}</TableCell>\n                  <TableCell>\n                    <IconButton size=\"small\">\n                      <EditIcon />\n                    </IconButton>\n                    <IconButton size=\"small\">\n                      <DeleteIcon />\n                    </IconButton>\n                  </TableCell>\n                </TableRow>\n              ))}\n            </TableBody>\n          </Table>\n        </TableContainer>\n      </TabPanel>\n\n      {/* Load Balancers Tab */}\n      <TabPanel value={tabValue} index={3}>\n        <Box display=\"flex\" justifyContent=\"space-between\" alignItems=\"center\" mb={2}>\n          <Typography variant=\"h6\">Load Balancers</Typography>\n          <Button\n            variant=\"contained\"\n            startIcon={<AddIcon />}\n            onClick={() => setCreateDialogOpen(true)}\n          >\n            Create Load Balancer\n          </Button>\n        </Box>\n        \n        <Grid container spacing={2}>\n          {data.resources.loadBalancers.map((lb) => (\n            <Grid item xs={12} md={6} key={lb.id}>\n              <Card>\n                <CardContent>\n                  <Box display=\"flex\" justifyContent=\"space-between\" alignItems=\"center\" mb={2}>\n                    <Typography variant=\"h6\">{lb.name}</Typography>\n                    <Chip \n                      label={lb.status} \n                      color={getStatusColor(lb.status) as any}\n                      size=\"small\"\n                    />\n                  </Box>\n                  <Typography variant=\"body2\" color=\"text.secondary\" gutterBottom>\n                    Type: {lb.type} | Scheme: {lb.scheme}\n                  </Typography>\n                  <Typography variant=\"body2\" color=\"text.secondary\" gutterBottom>\n                    VPC: {lb.vpc}\n                  </Typography>\n                  <Typography variant=\"body2\" color=\"text.secondary\" gutterBottom>\n                    Instances: {lb.instances} | Listeners: {lb.listeners} | Health Checks: {lb.healthChecks}\n                  </Typography>\n                  <Typography variant=\"body2\" color=\"text.secondary\">\n                    Created: {lb.created}\n                  </Typography>\n                  <Box mt={2}>\n                    {lb.tags.map((tag, index) => (\n                      <Chip key={index} label={tag} size=\"small\" sx={{ mr: 1, mb: 1 }} />\n                    ))}\n                  </Box>\n                </CardContent>\n              </Card>\n            </Grid>\n          ))}\n        </Grid>\n      </TabPanel>\n\n      {/* Performance Tab */}\n      <TabPanel value={tabValue} index={4}>\n        <Typography variant=\"h6\" gutterBottom>\n          Performance Metrics\n        </Typography>\n        <ResponsiveContainer width=\"100%\" height={400}>\n          <LineChart data={data.performance}>\n            <CartesianGrid strokeDasharray=\"3 3\" />\n            <XAxis dataKey=\"time\" />\n            <YAxis />\n            <RechartsTooltip />\n            <Line type=\"monotone\" dataKey=\"cpu\" stroke=\"#1976d2\" strokeWidth={2} name=\"CPU %\" />\n            <Line type=\"monotone\" dataKey=\"memory\" stroke=\"#dc004e\" strokeWidth={2} name=\"Memory %\" />\n            <Line type=\"monotone\" dataKey=\"network\" stroke=\"#2e7d32\" strokeWidth={2} name=\"Network %\" />\n            <Line type=\"monotone\" dataKey=\"storage\" stroke=\"#ff9800\" strokeWidth={2} name=\"Storage %\" />\n          </LineChart>\n        </ResponsiveContainer>\n      </TabPanel>\n\n      {/* Events Tab */}\n      <TabPanel value={tabValue} index={5}>\n        <Typography variant=\"h6\" gutterBottom>\n          Recent Events\n        </Typography>\n        <List>\n          {data.recentEvents.map((event, index) => (\n            <React.Fragment key={index}>\n              <ListItem>\n                <ListItemIcon>\n                  {getSeverityIcon(event.severity)}\n                </ListItemIcon>\n                <ListItemText\n                  primary={event.message}\n                  secondary={event.time}\n                />\n              </ListItem>\n              {index < data.recentEvents.length - 1 && <Divider />}\n            </React.Fragment>\n          ))}\n        </List>\n      </TabPanel>\n\n      {/* Create Resource Dialog */}\n      <Dialog open={createDialogOpen} onClose={() => setCreateDialogOpen(false)} maxWidth=\"md\" fullWidth>\n        <DialogTitle>Create Resource</DialogTitle>\n        <DialogContent>\n          <Typography variant=\"body2\" color=\"text.secondary\" gutterBottom>\n            Resource creation dialog would be implemented here with appropriate form fields\n            based on the selected resource type.\n          </Typography>\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={() => setCreateDialogOpen(false)}>Cancel</Button>\n          <Button variant=\"contained\" onClick={() => setCreateDialogOpen(false)}>\n            Create\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </Box>\n  );\n};\n\nexport default CloudPods;","import React, { useState, useEffect } from 'react';\nimport {\n  Box,\n  Grid,\n  Card,\n  CardContent,\n  Typography,\n  Button,\n  Chip,\n  IconButton,\n  Tooltip,\n  Alert,\n  Paper,\n  List,\n  ListItem,\n  ListItemText,\n  ListItemIcon,\n  Divider,\n  Avatar,\n  Badge,\n  CircularProgress,\n  Table,\n  TableBody,\n  TableCell,\n  TableContainer,\n  TableHead,\n  TableRow,\n  TablePagination,\n  Dialog,\n  DialogTitle,\n  DialogContent,\n  DialogActions,\n  TextField,\n  FormControl,\n  InputLabel,\n  Select,\n  MenuItem,\n  Switch,\n  FormControlLabel,\n  Tabs,\n  Tab,\n  Accordion,\n  AccordionSummary,\n  AccordionDetails,\n  LinearProgress,\n  Stepper,\n  Step,\n  StepLabel,\n  StepContent,\n} from '@mui/material';\nimport {\n  Refresh as RefreshIcon,\n  Add as AddIcon,\n  Edit as EditIcon,\n  Delete as DeleteIcon,\n  PlayArrow as PlayIcon,\n  Pause as PauseIcon,\n  Stop as StopIcon,\n  Settings as SettingsIcon,\n  Security as SecurityIcon,\n  Cloud as CloudIcon,\n  NetworkCheck as NetworkCheckIcon,\n  Memory as MemoryIcon,\n  Memory as CpuIcon,\n  Timeline as TimelineIcon,\n  Assessment as AssessmentIcon,\n  Warning as WarningIcon,\n  CheckCircle as CheckCircleIcon,\n  Error as ErrorIcon,\n  Info as InfoIcon,\n  ExpandMore as ExpandMoreIcon,\n  Router as RouterIcon,\n  Storage as StorageIcon,\n  Speed as SpeedIcon,\n  Public as PublicIcon,\n  VpnKey as VpnKeyIcon,\n  AccountTree as AccountTreeIcon,\n  Dashboard as DashboardIcon,\n  Shield as ShieldIcon,\n  Lock as LockIcon,\n  Key as KeyIcon,\n  Visibility as VisibilityIcon,\n  VisibilityOff as VisibilityOffIcon,\n  TrendingUp as TrendingUpIcon,\n  TrendingDown as TrendingDownIcon,\n  CompareArrows as CompareArrowsIcon,\n  Hub as HubIcon,\n  AccountTree as AccountTreeIcon2,\n} from '@mui/icons-material';\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip as RechartsTooltip, ResponsiveContainer, BarChart, Bar, PieChart, Pie, Cell, ScatterChart, Scatter, ZAxis } from 'recharts';\n\n// Import components\nimport MetricCard from '../components/MetricCard';\nimport StatusBadge from '../components/StatusBadge';\nimport LoadingSpinner from '../components/LoadingSpinner';\nimport ErrorMessage from '../components/ErrorMessage';\n\n// Mock data for Aviatrix integration\nconst mockAviatrixData = {\n  connection: {\n    status: 'connected',\n    controllerIp: '203.0.113.100',\n    version: '8.1.0',\n    lastSync: '2024-01-15 14:30:00',\n    uptime: '2d 14h 32m',\n    region: 'us-west-1',\n    accountId: '123456789012',\n  },\n  gateways: {\n    transit: [\n      {\n        id: 'tgw-1234567890abcdef0',\n        name: 'transit-gateway-01',\n        status: 'running',\n        type: 't3.medium',\n        region: 'us-west-1',\n        vpc: 'vpc-12345678',\n        publicIp: '203.0.113.101',\n        privateIp: '10.0.1.101',\n        asn: 65001,\n        haEnabled: true,\n        haStatus: 'active',\n        tunnels: 5,\n        routes: 1250,\n        created: '2024-01-10 09:15:00',\n        tags: ['transit', 'production', 'multi-cloud'],\n      },\n      {\n        id: 'tgw-0987654321fedcba0',\n        name: 'transit-gateway-02',\n        status: 'running',\n        type: 't3.large',\n        region: 'us-east-1',\n        vpc: 'vpc-87654321',\n        publicIp: '203.0.113.102',\n        privateIp: '10.0.2.102',\n        asn: 65002,\n        haEnabled: true,\n        haStatus: 'standby',\n        tunnels: 3,\n        routes: 890,\n        created: '2024-01-10 09:20:00',\n        tags: ['transit', 'production', 'multi-cloud'],\n      },\n    ],\n    spoke: [\n      {\n        id: 'sgw-1234567890abcdef0',\n        name: 'spoke-gateway-01',\n        status: 'running',\n        type: 't3.small',\n        region: 'us-west-1',\n        vpc: 'vpc-12345678',\n        publicIp: '203.0.113.103',\n        privateIp: '10.0.1.103',\n        asn: 65003,\n        haEnabled: false,\n        haStatus: 'n/a',\n        tunnels: 2,\n        routes: 450,\n        created: '2024-01-12 14:30:00',\n        tags: ['spoke', 'production', 'web'],\n      },\n      {\n        id: 'sgw-0987654321fedcba0',\n        name: 'spoke-gateway-02',\n        status: 'stopped',\n        type: 't3.small',\n        region: 'us-west-1',\n        vpc: 'vpc-12345678',\n        publicIp: '203.0.113.104',\n        privateIp: '10.0.1.104',\n        asn: 65004,\n        haEnabled: false,\n        haStatus: 'n/a',\n        tunnels: 0,\n        routes: 0,\n        created: '2024-01-12 15:00:00',\n        tags: ['spoke', 'staging', 'test'],\n      },\n    ],\n  },\n  tunnels: [\n    {\n      id: 'tunnel-1234567890abcdef0',\n      name: 'tunnel-01',\n      status: 'up',\n      source: 'transit-gateway-01',\n      destination: 'spoke-gateway-01',\n      sourceIp: '203.0.113.101',\n      destinationIp: '203.0.113.103',\n      protocol: 'IPSec',\n      encryption: 'AES-256',\n      authentication: 'SHA-256',\n      psk: '********',\n      latency: 15, // ms\n      bandwidth: 1000, // Mbps\n      packetsIn: 1250000,\n      packetsOut: 1200000,\n      bytesIn: 1560000000,\n      bytesOut: 1500000000,\n      created: '2024-01-10 09:30:00',\n      lastUpdate: '2024-01-15 14:30:00',\n    },\n    {\n      id: 'tunnel-0987654321fedcba0',\n      name: 'tunnel-02',\n      status: 'up',\n      source: 'transit-gateway-01',\n      destination: 'transit-gateway-02',\n      sourceIp: '203.0.113.101',\n      destinationIp: '203.0.113.102',\n      protocol: 'IPSec',\n      encryption: 'AES-256',\n      authentication: 'SHA-256',\n      psk: '********',\n      latency: 25, // ms\n      bandwidth: 1000, // Mbps\n      packetsIn: 890000,\n      packetsOut: 850000,\n      bytesIn: 1100000000,\n      bytesOut: 1050000000,\n      created: '2024-01-10 09:35:00',\n      lastUpdate: '2024-01-15 14:30:00',\n    },\n  ],\n  security: {\n    policies: [\n      {\n        id: 'policy-1234567890abcdef0',\n        name: 'web-to-db-policy',\n        status: 'active',\n        source: 'web-gateway',\n        destination: 'db-gateway',\n        protocol: 'TCP',\n        port: 5432,\n        action: 'allow',\n        priority: 100,\n        created: '2024-01-10 10:00:00',\n        lastModified: '2024-01-15 14:30:00',\n      },\n      {\n        id: 'policy-0987654321fedcba0',\n        name: 'deny-all-policy',\n        status: 'active',\n        source: 'any',\n        destination: 'any',\n        protocol: 'any',\n        port: 'any',\n        action: 'deny',\n        priority: 1000,\n        created: '2024-01-10 10:05:00',\n        lastModified: '2024-01-15 14:30:00',\n      },\n    ],\n    rules: [\n      {\n        id: 'rule-1234567890abcdef0',\n        name: 'allow-ssh',\n        status: 'active',\n        source: 'admin-network',\n        destination: 'any',\n        protocol: 'TCP',\n        port: 22,\n        action: 'allow',\n        priority: 10,\n        created: '2024-01-10 10:10:00',\n        lastModified: '2024-01-15 14:30:00',\n      },\n    ],\n  },\n  metrics: {\n    gateways: {\n      total: 4,\n      running: 3,\n      stopped: 1,\n      transit: 2,\n      spoke: 2,\n    },\n    tunnels: {\n      total: 5,\n      up: 4,\n      down: 1,\n      totalBandwidth: 2000, // Mbps\n      averageLatency: 20, // ms\n    },\n    security: {\n      policies: 2,\n      rules: 1,\n      blockedPackets: 1250,\n      allowedPackets: 12500000,\n    },\n  },\n  performance: [\n    { time: '00:00', latency: 15, bandwidth: 800, packets: 1000, errors: 0 },\n    { time: '04:00', latency: 18, bandwidth: 600, packets: 800, errors: 0 },\n    { time: '08:00', latency: 25, bandwidth: 1200, packets: 1500, errors: 2 },\n    { time: '12:00', latency: 30, bandwidth: 1500, packets: 2000, errors: 5 },\n    { time: '16:00', latency: 22, bandwidth: 1000, packets: 1200, errors: 1 },\n    { time: '20:00', latency: 16, bandwidth: 700, packets: 900, errors: 0 },\n  ],\n  recentEvents: [\n    { time: '14:30:15', type: 'info', message: 'Tunnel tunnel-01 established', severity: 'info' },\n    { time: '14:25:32', type: 'warning', message: 'High latency detected on tunnel-02 (45ms)', severity: 'warning' },\n    { time: '14:20:18', type: 'success', message: 'Security policy web-to-db-policy applied', severity: 'success' },\n    { time: '14:15:45', type: 'error', message: 'Tunnel tunnel-03 failed to establish', severity: 'error' },\n    { time: '14:10:22', type: 'info', message: 'Gateway spoke-gateway-01 started', severity: 'info' },\n  ],\n};\n\ninterface TabPanelProps {\n  children?: React.ReactNode;\n  index: number;\n  value: number;\n}\n\nfunction TabPanel(props: TabPanelProps) {\n  const { children, value, index, ...other } = props;\n  return (\n    <div\n      role=\"tabpanel\"\n      hidden={value !== index}\n      id={`aviatrix-tabpanel-${index}`}\n      aria-labelledby={`aviatrix-tab-${index}`}\n      {...other}\n    >\n      {value === index && <Box sx={{ p: 3 }}>{children}</Box>}\n    </div>\n  );\n}\n\nconst Aviatrix: React.FC = () => {\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n  const [data, setData] = useState(mockAviatrixData);\n  const [tabValue, setTabValue] = useState(0);\n  const [page, setPage] = useState(0);\n  const [rowsPerPage, setRowsPerPage] = useState(10);\n  const [createDialogOpen, setCreateDialogOpen] = useState(false);\n  const [selectedResource, setSelectedResource] = useState<string | null>(null);\n\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        setLoading(true);\n        setError(null);\n        \n        // Simulate API calls\n        await new Promise(resolve => setTimeout(resolve, 1000));\n        \n        // In a real implementation, these would be actual API calls\n        // const connection = await fetch('/api/v1/aviatrix/connection').then(r => r.json());\n        // const gateways = await fetch('/api/v1/aviatrix/gateways').then(r => r.json());\n        // etc.\n        \n        setData(mockAviatrixData);\n        setLoading(false);\n      } catch (err) {\n        console.error('Failed to fetch Aviatrix data:', err);\n        setError(err instanceof Error ? err.message : 'Unknown error');\n        setLoading(false);\n      }\n    };\n\n    fetchData();\n    \n    // Set up periodic refresh\n    const interval = setInterval(fetchData, 30000); // Refresh every 30 seconds\n    return () => clearInterval(interval);\n  }, []);\n\n  const handleRefresh = () => {\n    setLoading(true);\n    // Trigger refresh\n    window.location.reload();\n  };\n\n  const handleTabChange = (event: React.SyntheticEvent, newValue: number) => {\n    setTabValue(newValue);\n  };\n\n  const handleChangePage = (event: unknown, newPage: number) => {\n    setPage(newPage);\n  };\n\n  const handleChangeRowsPerPage = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setRowsPerPage(parseInt(event.target.value, 10));\n    setPage(0);\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status.toLowerCase()) {\n      case 'running':\n      case 'up':\n      case 'active':\n      case 'connected':\n        return 'success';\n      case 'stopped':\n      case 'down':\n      case 'inactive':\n      case 'disconnected':\n        return 'error';\n      case 'standby':\n      case 'warning':\n        return 'warning';\n      default:\n        return 'default';\n    }\n  };\n\n  const getSeverityIcon = (severity: string) => {\n    switch (severity) {\n      case 'success':\n        return <CheckCircleIcon color=\"success\" />;\n      case 'warning':\n        return <WarningIcon color=\"warning\" />;\n      case 'error':\n        return <ErrorIcon color=\"error\" />;\n      default:\n        return <InfoIcon color=\"info\" />;\n    }\n  };\n\n  if (loading) {\n    return (\n      <Box display=\"flex\" justifyContent=\"center\" alignItems=\"center\" minHeight=\"400px\">\n        <LoadingSpinner size={60} />\n      </Box>\n    );\n  }\n\n  if (error) {\n    return <ErrorMessage message={error} />;\n  }\n\n  return (\n    <Box>\n      {/* Header */}\n      <Box display=\"flex\" justifyContent=\"space-between\" alignItems=\"center\" mb={3}>\n        <Typography variant=\"h4\" component=\"h1\">\n          Aviatrix Integration\n        </Typography>\n        <Box>\n          <Tooltip title=\"Refresh\">\n            <IconButton onClick={handleRefresh} disabled={loading}>\n              <RefreshIcon />\n            </IconButton>\n          </Tooltip>\n          <Tooltip title=\"Settings\">\n            <IconButton>\n              <SettingsIcon />\n            </IconButton>\n          </Tooltip>\n        </Box>\n      </Box>\n\n      {/* Connection Status */}\n      <Alert \n        severity={data.connection.status === 'connected' ? 'success' : 'error'} \n        sx={{ mb: 3 }}\n        action={\n          <Button color=\"inherit\" size=\"small\">\n            Configure\n          </Button>\n        }\n      >\n        <Typography variant=\"h6\">\n          Aviatrix Controller {data.connection.status === 'connected' ? 'Connected' : 'Disconnected'}\n        </Typography>\n        <Typography variant=\"body2\">\n          Controller IP: {data.connection.controllerIp} | Version: {data.connection.version} | \n          Region: {data.connection.region} | Account ID: {data.connection.accountId}\n        </Typography>\n      </Alert>\n\n      {/* Metrics Overview */}\n      <Grid container spacing={3} mb={3}>\n        <Grid item xs={12} sm={6} md={3}>\n          <MetricCard\n            title=\"Gateways\"\n            value={data.metrics.gateways.total}\n            subtitle={`${data.metrics.gateways.running} running, ${data.metrics.gateways.stopped} stopped`}\n            icon={<RouterIcon />}\n            color=\"primary\"\n          />\n        </Grid>\n        <Grid item xs={12} sm={6} md={3}>\n          <MetricCard\n            title=\"Tunnels\"\n            value={data.metrics.tunnels.total}\n            subtitle={`${data.metrics.tunnels.up} up, ${data.metrics.tunnels.down} down`}\n            icon={<NetworkCheckIcon />}\n            color=\"success\"\n          />\n        </Grid>\n        <Grid item xs={12} sm={6} md={3}>\n          <MetricCard\n            title=\"Bandwidth\"\n            value={data.metrics.tunnels.totalBandwidth}\n            subtitle={`${data.metrics.tunnels.averageLatency}ms avg latency`}\n            icon={<SpeedIcon />}\n            color=\"warning\"\n          />\n        </Grid>\n        <Grid item xs={12} sm={6} md={3}>\n          <MetricCard\n            title=\"Security\"\n            value={data.metrics.security.policies}\n            subtitle={`${data.metrics.security.rules} rules, ${data.metrics.security.blockedPackets} blocked`}\n            icon={<ShieldIcon />}\n            color=\"error\"\n          />\n        </Grid>\n      </Grid>\n\n      {/* Tabs */}\n      <Paper sx={{ mb: 3 }}>\n        <Tabs value={tabValue} onChange={handleTabChange} aria-label=\"Aviatrix tabs\">\n          <Tab label=\"Gateways\" icon={<RouterIcon />} />\n          <Tab label=\"Tunnels\" icon={<NetworkCheckIcon />} />\n          <Tab label=\"Security\" icon={<ShieldIcon />} />\n          <Tab label=\"Performance\" icon={<TimelineIcon />} />\n          <Tab label=\"Events\" icon={<AssessmentIcon />} />\n        </Tabs>\n      </Paper>\n\n      {/* Gateways Tab */}\n      <TabPanel value={tabValue} index={0}>\n        <Box display=\"flex\" justifyContent=\"space-between\" alignItems=\"center\" mb={2}>\n          <Typography variant=\"h6\">Gateways</Typography>\n          <Button\n            variant=\"contained\"\n            startIcon={<AddIcon />}\n            onClick={() => setCreateDialogOpen(true)}\n          >\n            Create Gateway\n          </Button>\n        </Box>\n        \n        {/* Transit Gateways */}\n        <Accordion defaultExpanded>\n          <AccordionSummary expandIcon={<ExpandMoreIcon />}>\n            <Typography variant=\"h6\">Transit Gateways ({data.gateways.transit.length})</Typography>\n          </AccordionSummary>\n          <AccordionDetails>\n            <TableContainer component={Paper}>\n              <Table>\n                <TableHead>\n                  <TableRow>\n                    <TableCell>Name</TableCell>\n                    <TableCell>Status</TableCell>\n                    <TableCell>Type</TableCell>\n                    <TableCell>Region</TableCell>\n                    <TableCell>IP Address</TableCell>\n                    <TableCell>ASN</TableCell>\n                    <TableCell>HA Status</TableCell>\n                    <TableCell>Tunnels</TableCell>\n                    <TableCell>Routes</TableCell>\n                    <TableCell>Actions</TableCell>\n                  </TableRow>\n                </TableHead>\n                <TableBody>\n                  {data.gateways.transit.map((gateway) => (\n                    <TableRow key={gateway.id}>\n                      <TableCell>\n                        <Box display=\"flex\" alignItems=\"center\">\n                          <HubIcon sx={{ mr: 1 }} />\n                          {gateway.name}\n                        </Box>\n                      </TableCell>\n                      <TableCell>\n                        <Chip \n                          label={gateway.status} \n                          color={getStatusColor(gateway.status) as any}\n                          size=\"small\"\n                        />\n                      </TableCell>\n                      <TableCell>{gateway.type}</TableCell>\n                      <TableCell>{gateway.region}</TableCell>\n                      <TableCell>\n                        <Box>\n                          <Typography variant=\"body2\">Public: {gateway.publicIp}</Typography>\n                          <Typography variant=\"body2\">Private: {gateway.privateIp}</Typography>\n                        </Box>\n                      </TableCell>\n                      <TableCell>{gateway.asn}</TableCell>\n                      <TableCell>\n                        <Chip \n                          label={gateway.haStatus} \n                          color={getStatusColor(gateway.haStatus) as any}\n                          size=\"small\"\n                        />\n                      </TableCell>\n                      <TableCell>{gateway.tunnels}</TableCell>\n                      <TableCell>{gateway.routes}</TableCell>\n                      <TableCell>\n                        <IconButton size=\"small\">\n                          <EditIcon />\n                        </IconButton>\n                        <IconButton size=\"small\">\n                          <DeleteIcon />\n                        </IconButton>\n                      </TableCell>\n                    </TableRow>\n                  ))}\n                </TableBody>\n              </Table>\n            </TableContainer>\n          </AccordionDetails>\n        </Accordion>\n\n        {/* Spoke Gateways */}\n        <Accordion>\n          <AccordionSummary expandIcon={<ExpandMoreIcon />}>\n            <Typography variant=\"h6\">Spoke Gateways ({data.gateways.spoke.length})</Typography>\n          </AccordionSummary>\n          <AccordionDetails>\n            <TableContainer component={Paper}>\n              <Table>\n                <TableHead>\n                  <TableRow>\n                    <TableCell>Name</TableCell>\n                    <TableCell>Status</TableCell>\n                    <TableCell>Type</TableCell>\n                    <TableCell>Region</TableCell>\n                    <TableCell>IP Address</TableCell>\n                    <TableCell>ASN</TableCell>\n                    <TableCell>HA Status</TableCell>\n                    <TableCell>Tunnels</TableCell>\n                    <TableCell>Routes</TableCell>\n                    <TableCell>Actions</TableCell>\n                  </TableRow>\n                </TableHead>\n                <TableBody>\n                  {data.gateways.spoke.map((gateway) => (\n                    <TableRow key={gateway.id}>\n                      <TableCell>\n                        <Box display=\"flex\" alignItems=\"center\">\n                          <AccountTreeIcon sx={{ mr: 1 }} />\n                          {gateway.name}\n                        </Box>\n                      </TableCell>\n                      <TableCell>\n                        <Chip \n                          label={gateway.status} \n                          color={getStatusColor(gateway.status) as any}\n                          size=\"small\"\n                        />\n                      </TableCell>\n                      <TableCell>{gateway.type}</TableCell>\n                      <TableCell>{gateway.region}</TableCell>\n                      <TableCell>\n                        <Box>\n                          <Typography variant=\"body2\">Public: {gateway.publicIp}</Typography>\n                          <Typography variant=\"body2\">Private: {gateway.privateIp}</Typography>\n                        </Box>\n                      </TableCell>\n                      <TableCell>{gateway.asn}</TableCell>\n                      <TableCell>\n                        <Chip \n                          label={gateway.haStatus} \n                          color={getStatusColor(gateway.haStatus) as any}\n                          size=\"small\"\n                        />\n                      </TableCell>\n                      <TableCell>{gateway.tunnels}</TableCell>\n                      <TableCell>{gateway.routes}</TableCell>\n                      <TableCell>\n                        <IconButton size=\"small\">\n                          <EditIcon />\n                        </IconButton>\n                        <IconButton size=\"small\">\n                          <DeleteIcon />\n                        </IconButton>\n                      </TableCell>\n                    </TableRow>\n                  ))}\n                </TableBody>\n              </Table>\n            </TableContainer>\n          </AccordionDetails>\n        </Accordion>\n      </TabPanel>\n\n      {/* Tunnels Tab */}\n      <TabPanel value={tabValue} index={1}>\n        <Box display=\"flex\" justifyContent=\"space-between\" alignItems=\"center\" mb={2}>\n          <Typography variant=\"h6\">Tunnels</Typography>\n          <Button\n            variant=\"contained\"\n            startIcon={<AddIcon />}\n            onClick={() => setCreateDialogOpen(true)}\n          >\n            Create Tunnel\n          </Button>\n        </Box>\n        \n        <TableContainer component={Paper}>\n          <Table>\n            <TableHead>\n              <TableRow>\n                <TableCell>Name</TableCell>\n                <TableCell>Status</TableCell>\n                <TableCell>Source</TableCell>\n                <TableCell>Destination</TableCell>\n                <TableCell>Protocol</TableCell>\n                <TableCell>Encryption</TableCell>\n                <TableCell>Latency</TableCell>\n                <TableCell>Bandwidth</TableCell>\n                <TableCell>Packets</TableCell>\n                <TableCell>Actions</TableCell>\n              </TableRow>\n            </TableHead>\n            <TableBody>\n              {data.tunnels.map((tunnel) => (\n                <TableRow key={tunnel.id}>\n                  <TableCell>\n                    <Box display=\"flex\" alignItems=\"center\">\n                      <NetworkCheckIcon sx={{ mr: 1 }} />\n                      {tunnel.name}\n                    </Box>\n                  </TableCell>\n                  <TableCell>\n                    <Chip \n                      label={tunnel.status} \n                      color={getStatusColor(tunnel.status) as any}\n                      size=\"small\"\n                    />\n                  </TableCell>\n                  <TableCell>{tunnel.source}</TableCell>\n                  <TableCell>{tunnel.destination}</TableCell>\n                  <TableCell>{tunnel.protocol}</TableCell>\n                  <TableCell>{tunnel.encryption}</TableCell>\n                  <TableCell>\n                    <Box display=\"flex\" alignItems=\"center\">\n                      <Typography variant=\"body2\">{tunnel.latency}ms</Typography>\n                      {tunnel.latency > 30 && <WarningIcon color=\"warning\" sx={{ ml: 1 }} />}\n                    </Box>\n                  </TableCell>\n                  <TableCell>{tunnel.bandwidth} Mbps</TableCell>\n                  <TableCell>\n                    <Box>\n                      <Typography variant=\"body2\">In: {tunnel.packetsIn.toLocaleString()}</Typography>\n                      <Typography variant=\"body2\">Out: {tunnel.packetsOut.toLocaleString()}</Typography>\n                    </Box>\n                  </TableCell>\n                  <TableCell>\n                    <IconButton size=\"small\">\n                      <EditIcon />\n                    </IconButton>\n                    <IconButton size=\"small\">\n                      <DeleteIcon />\n                    </IconButton>\n                  </TableCell>\n                </TableRow>\n              ))}\n            </TableBody>\n          </Table>\n        </TableContainer>\n      </TabPanel>\n\n      {/* Security Tab */}\n      <TabPanel value={tabValue} index={2}>\n        <Box display=\"flex\" justifyContent=\"space-between\" alignItems=\"center\" mb={2}>\n          <Typography variant=\"h6\">Security Policies & Rules</Typography>\n          <Button\n            variant=\"contained\"\n            startIcon={<AddIcon />}\n            onClick={() => setCreateDialogOpen(true)}\n          >\n            Create Policy\n          </Button>\n        </Box>\n        \n        {/* Security Policies */}\n        <Accordion defaultExpanded>\n          <AccordionSummary expandIcon={<ExpandMoreIcon />}>\n            <Typography variant=\"h6\">Security Policies ({data.security.policies.length})</Typography>\n          </AccordionSummary>\n          <AccordionDetails>\n            <TableContainer component={Paper}>\n              <Table>\n                <TableHead>\n                  <TableRow>\n                    <TableCell>Name</TableCell>\n                    <TableCell>Status</TableCell>\n                    <TableCell>Source</TableCell>\n                    <TableCell>Destination</TableCell>\n                    <TableCell>Protocol</TableCell>\n                    <TableCell>Port</TableCell>\n                    <TableCell>Action</TableCell>\n                    <TableCell>Priority</TableCell>\n                    <TableCell>Actions</TableCell>\n                  </TableRow>\n                </TableHead>\n                <TableBody>\n                  {data.security.policies.map((policy) => (\n                    <TableRow key={policy.id}>\n                      <TableCell>\n                        <Box display=\"flex\" alignItems=\"center\">\n                          <ShieldIcon sx={{ mr: 1 }} />\n                          {policy.name}\n                        </Box>\n                      </TableCell>\n                      <TableCell>\n                        <Chip \n                          label={policy.status} \n                          color={getStatusColor(policy.status) as any}\n                          size=\"small\"\n                        />\n                      </TableCell>\n                      <TableCell>{policy.source}</TableCell>\n                      <TableCell>{policy.destination}</TableCell>\n                      <TableCell>{policy.protocol}</TableCell>\n                      <TableCell>{policy.port}</TableCell>\n                      <TableCell>\n                        <Chip \n                          label={policy.action} \n                          color={policy.action === 'allow' ? 'success' : 'error'}\n                          size=\"small\"\n                        />\n                      </TableCell>\n                      <TableCell>{policy.priority}</TableCell>\n                      <TableCell>\n                        <IconButton size=\"small\">\n                          <EditIcon />\n                        </IconButton>\n                        <IconButton size=\"small\">\n                          <DeleteIcon />\n                        </IconButton>\n                      </TableCell>\n                    </TableRow>\n                  ))}\n                </TableBody>\n              </Table>\n            </TableContainer>\n          </AccordionDetails>\n        </Accordion>\n\n        {/* Security Rules */}\n        <Accordion>\n          <AccordionSummary expandIcon={<ExpandMoreIcon />}>\n            <Typography variant=\"h6\">Security Rules ({data.security.rules.length})</Typography>\n          </AccordionSummary>\n          <AccordionDetails>\n            <TableContainer component={Paper}>\n              <Table>\n                <TableHead>\n                  <TableRow>\n                    <TableCell>Name</TableCell>\n                    <TableCell>Status</TableCell>\n                    <TableCell>Source</TableCell>\n                    <TableCell>Destination</TableCell>\n                    <TableCell>Protocol</TableCell>\n                    <TableCell>Port</TableCell>\n                    <TableCell>Action</TableCell>\n                    <TableCell>Priority</TableCell>\n                    <TableCell>Actions</TableCell>\n                  </TableRow>\n                </TableHead>\n                <TableBody>\n                  {data.security.rules.map((rule) => (\n                    <TableRow key={rule.id}>\n                      <TableCell>\n                        <Box display=\"flex\" alignItems=\"center\">\n                          <KeyIcon sx={{ mr: 1 }} />\n                          {rule.name}\n                        </Box>\n                      </TableCell>\n                      <TableCell>\n                        <Chip \n                          label={rule.status} \n                          color={getStatusColor(rule.status) as any}\n                          size=\"small\"\n                        />\n                      </TableCell>\n                      <TableCell>{rule.source}</TableCell>\n                      <TableCell>{rule.destination}</TableCell>\n                      <TableCell>{rule.protocol}</TableCell>\n                      <TableCell>{rule.port}</TableCell>\n                      <TableCell>\n                        <Chip \n                          label={rule.action} \n                          color={rule.action === 'allow' ? 'success' : 'error'}\n                          size=\"small\"\n                        />\n                      </TableCell>\n                      <TableCell>{rule.priority}</TableCell>\n                      <TableCell>\n                        <IconButton size=\"small\">\n                          <EditIcon />\n                        </IconButton>\n                        <IconButton size=\"small\">\n                          <DeleteIcon />\n                        </IconButton>\n                      </TableCell>\n                    </TableRow>\n                  ))}\n                </TableBody>\n              </Table>\n            </TableContainer>\n          </AccordionDetails>\n        </Accordion>\n      </TabPanel>\n\n      {/* Performance Tab */}\n      <TabPanel value={tabValue} index={3}>\n        <Typography variant=\"h6\" gutterBottom>\n          Performance Metrics\n        </Typography>\n        <Grid container spacing={3}>\n          <Grid item xs={12} md={8}>\n            <ResponsiveContainer width=\"100%\" height={400}>\n              <LineChart data={data.performance}>\n                <CartesianGrid strokeDasharray=\"3 3\" />\n                <XAxis dataKey=\"time\" />\n                <YAxis />\n                <RechartsTooltip />\n                <Line type=\"monotone\" dataKey=\"latency\" stroke=\"#1976d2\" strokeWidth={2} name=\"Latency (ms)\" />\n                <Line type=\"monotone\" dataKey=\"bandwidth\" stroke=\"#dc004e\" strokeWidth={2} name=\"Bandwidth (Mbps)\" />\n                <Line type=\"monotone\" dataKey=\"packets\" stroke=\"#2e7d32\" strokeWidth={2} name=\"Packets/sec\" />\n                <Line type=\"monotone\" dataKey=\"errors\" stroke=\"#ff9800\" strokeWidth={2} name=\"Errors/sec\" />\n              </LineChart>\n            </ResponsiveContainer>\n          </Grid>\n          <Grid item xs={12} md={4}>\n            <Card>\n              <CardContent>\n                <Typography variant=\"h6\" gutterBottom>\n                  Tunnel Statistics\n                </Typography>\n                <Box mb={2}>\n                  <Typography variant=\"body2\" color=\"text.secondary\">\n                    Total Tunnels: {data.metrics.tunnels.total}\n                  </Typography>\n                  <Typography variant=\"body2\" color=\"text.secondary\">\n                    Active Tunnels: {data.metrics.tunnels.up}\n                  </Typography>\n                  <Typography variant=\"body2\" color=\"text.secondary\">\n                    Failed Tunnels: {data.metrics.tunnels.down}\n                  </Typography>\n                </Box>\n                <Box mb={2}>\n                  <Typography variant=\"body2\" color=\"text.secondary\">\n                    Total Bandwidth: {data.metrics.tunnels.totalBandwidth} Mbps\n                  </Typography>\n                  <Typography variant=\"body2\" color=\"text.secondary\">\n                    Average Latency: {data.metrics.tunnels.averageLatency} ms\n                  </Typography>\n                </Box>\n                <Box mb={2}>\n                  <Typography variant=\"body2\" color=\"text.secondary\">\n                    Blocked Packets: {data.metrics.security.blockedPackets.toLocaleString()}\n                  </Typography>\n                  <Typography variant=\"body2\" color=\"text.secondary\">\n                    Allowed Packets: {data.metrics.security.allowedPackets.toLocaleString()}\n                  </Typography>\n                </Box>\n              </CardContent>\n            </Card>\n          </Grid>\n        </Grid>\n      </TabPanel>\n\n      {/* Events Tab */}\n      <TabPanel value={tabValue} index={4}>\n        <Typography variant=\"h6\" gutterBottom>\n          Recent Events\n        </Typography>\n        <List>\n          {data.recentEvents.map((event, index) => (\n            <React.Fragment key={index}>\n              <ListItem>\n                <ListItemIcon>\n                  {getSeverityIcon(event.severity)}\n                </ListItemIcon>\n                <ListItemText\n                  primary={event.message}\n                  secondary={event.time}\n                />\n              </ListItem>\n              {index < data.recentEvents.length - 1 && <Divider />}\n            </React.Fragment>\n          ))}\n        </List>\n      </TabPanel>\n\n      {/* Create Resource Dialog */}\n      <Dialog open={createDialogOpen} onClose={() => setCreateDialogOpen(false)} maxWidth=\"md\" fullWidth>\n        <DialogTitle>Create Resource</DialogTitle>\n        <DialogContent>\n          <Typography variant=\"body2\" color=\"text.secondary\" gutterBottom>\n            Resource creation dialog would be implemented here with appropriate form fields\n            based on the selected resource type (Gateway, Tunnel, Security Policy, etc.).\n          </Typography>\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={() => setCreateDialogOpen(false)}>Cancel</Button>\n          <Button variant=\"contained\" onClick={() => setCreateDialogOpen(false)}>\n            Create\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </Box>\n  );\n};\n\nexport default Aviatrix;\n","import React from 'react';\nimport { Box, Typography } from '@mui/material';\n\nconst Analytics: React.FC = () => {\n  return (\n    <Box>\n      <Typography variant=\"h4\" component=\"h1\">\n        Analytics\n      </Typography>\n      <Typography variant=\"body1\" color=\"text.secondary\">\n        Analytics dashboard with ClickHouse integration.\n      </Typography>\n    </Box>\n  );\n};\n\nexport default Analytics;\n","import React from 'react';\nimport { Box, Typography } from '@mui/material';\n\nconst TrafficShaping: React.FC = () => {\n  return (\n    <Box>\n      <Typography variant=\"h4\" component=\"h1\">\n        Traffic Shaping\n      </Typography>\n      <Typography variant=\"body1\" color=\"text.secondary\">\n        Traffic shaping and QoS management interface.\n      </Typography>\n    </Box>\n  );\n};\n\nexport default TrafficShaping;\n","import React from 'react';\nimport { Box, Typography } from '@mui/material';\n\nconst NetworkImpairments: React.FC = () => {\n  return (\n    <Box>\n      <Typography variant=\"h4\" component=\"h1\">\n        Network Impairments\n      </Typography>\n      <Typography variant=\"body1\" color=\"text.secondary\">\n        Network impairment simulation and testing interface.\n      </Typography>\n    </Box>\n  );\n};\n\nexport default NetworkImpairments;\n","import React from 'react';\nimport { Box, Typography } from '@mui/material';\n\nconst Testing: React.FC = () => {\n  return (\n    <Box>\n      <Typography variant=\"h4\" component=\"h1\">\n        Testing\n      </Typography>\n      <Typography variant=\"body1\" color=\"text.secondary\">\n        Testing framework and validation interface.\n      </Typography>\n    </Box>\n  );\n};\n\nexport default Testing;\n","import React from 'react';\nimport { Box, Typography } from '@mui/material';\n\nconst Settings: React.FC = () => {\n  return (\n    <Box>\n      <Typography variant=\"h4\" component=\"h1\">\n        Settings\n      </Typography>\n      <Typography variant=\"body1\" color=\"text.secondary\">\n        Application settings and configuration interface.\n      </Typography>\n    </Box>\n  );\n};\n\nexport default Settings;\n","import React from 'react';\nimport {\n  Box,\n  Container,\n  Typography,\n  Grid,\n  Card,\n  CardContent,\n  CardMedia,\n  Button,\n  Chip,\n  List,\n  ListItem,\n  ListItemIcon,\n  ListItemText,\n  Divider,\n  Paper,\n  Accordion,\n  AccordionSummary,\n  AccordionDetails,\n  Link,\n  IconButton,\n  Tooltip,\n} from '@mui/material';\nimport {\n  ExpandMore as ExpandMoreIcon,\n  GitHub as GitHubIcon,\n  OpenInNew as OpenInNewIcon,\n  Code as CodeIcon,\n  BugReport as BugReportIcon,\n  Security as SecurityIcon,\n  Speed as SpeedIcon,\n  Cloud as CloudIcon,\n  NetworkCheck as NetworkCheckIcon,\n  Storage as StorageIcon,\n  Timeline as TimelineIcon,\n  Assessment as AssessmentIcon,\n  Router as RouterIcon,\n  Memory as MemoryIcon,\n  Memory as CpuIcon,\n  Public as PublicIcon,\n  VpnKey as VpnKeyIcon,\n  AccountTree as AccountTreeIcon,\n  Dashboard as DashboardIcon,\n  Shield as ShieldIcon,\n  Lock as LockIcon,\n  Key as KeyIcon,\n  Visibility as VisibilityIcon,\n  TrendingUp as TrendingUpIcon,\n  CompareArrows as CompareArrowsIcon,\n  Hub as HubIcon,\n} from '@mui/icons-material';\n\nconst About: React.FC = () => {\n  const features = [\n    {\n      title: 'Multi-Cloud Management',\n      description: 'Unified management of CloudPods and Aviatrix resources with real-time monitoring and control.',\n      icon: <CloudIcon />,\n      color: 'primary',\n      details: [\n        'CloudPods integration for multi-cloud resource management',\n        'Aviatrix integration for advanced networking and security',\n        'Real-time resource monitoring and control',\n        'Automated provisioning and scaling',\n        'Cross-cloud network connectivity',\n      ],\n    },\n    {\n      title: 'FRR Control-Plane Integration',\n      description: 'Full FRR control-plane integration supporting BGP, OSPF, and IS-IS routing protocols.',\n      icon: <NetworkCheckIcon />,\n      color: 'success',\n      details: [\n        'BGP protocol implementation with neighbor management',\n        'OSPF protocol with area support and LSA handling',\n        'IS-IS protocol with level-1 and level-2 support',\n        'Route redistribution and policy management',\n        'Real-time protocol monitoring and statistics',\n      ],\n    },\n    {\n      title: 'Traffic Shaping & QoS',\n      description: 'Advanced token bucket and WFQ algorithms for precise traffic control and QoS management.',\n      icon: <SpeedIcon />,\n      color: 'warning',\n      details: [\n        'Token bucket algorithm implementation',\n        'Weighted Fair Queuing (WFQ) scheduler',\n        'Per-queue rate limiting and burst control',\n        'DSCP-based traffic classification',\n        'Real-time traffic statistics and monitoring',\n      ],\n    },\n    {\n      title: 'Network Impairments',\n      description: 'Realistic network condition simulation using tc/netem for comprehensive testing.',\n      icon: <BugReportIcon />,\n      color: 'error',\n      details: [\n        'Packet delay and jitter simulation',\n        'Packet loss and duplication',\n        'Packet reordering and corruption',\n        'Policy-based impairment application',\n        'Real-time impairment statistics',\n      ],\n    },\n    {\n      title: 'Analytics Engine',\n      description: 'High-performance ClickHouse analytics with C++ and Rust for real-time data processing.',\n      icon: <TimelineIcon />,\n      color: 'info',\n      details: [\n        'ClickHouse integration for time-series data',\n        'Real-time metrics collection and processing',\n        'Advanced querying and aggregation',\n        'Dashboard data generation',\n        'Historical data analysis and reporting',\n      ],\n    },\n    {\n      title: 'Testing Framework',\n      description: 'Comprehensive gtest coverage with PCAP diffing for regression testing and validation.',\n      icon: <AssessmentIcon />,\n      color: 'secondary',\n      details: [\n        'Unit tests with gtest framework',\n        'Integration tests for protocol interactions',\n        'PCAP diffing for packet analysis',\n        'Performance benchmarking',\n        'Automated regression testing',\n      ],\n    },\n  ];\n\n  const techStack = [\n    { name: 'C++17', description: 'Core router functionality with FRR integration', icon: <CodeIcon /> },\n    { name: 'Go 1.21', description: 'Cloud services and API management', icon: <CloudIcon /> },\n    { name: 'Rust 1.70', description: 'High-performance packet processing', icon: <MemoryIcon /> },\n    { name: 'React 18', description: 'Modern reactive web framework', icon: <DashboardIcon /> },\n    { name: 'TypeScript', description: 'Type-safe development', icon: <CodeIcon /> },\n    { name: 'Material-UI', description: 'UI component library', icon: <VisibilityIcon /> },\n    { name: 'ClickHouse', description: 'Analytics database', icon: <StorageIcon /> },\n    { name: 'Docker', description: 'Containerization', icon: <PublicIcon /> },\n  ];\n\n  const architecture = [\n    {\n      layer: 'Presentation Layer',\n      components: ['React Web UI', 'Material-UI Components', 'Real-time Dashboards'],\n      description: 'Modern web interface with real-time monitoring and control capabilities.',\n    },\n    {\n      layer: 'API Layer',\n      components: ['Go Microservices', 'REST APIs', 'WebSocket Connections'],\n      description: 'Cloud-native microservices providing unified API access to all components.',\n    },\n    {\n      layer: 'Processing Layer',\n      components: ['C++ Router Core', 'Rust Packet Engine', 'FRR Integration'],\n      description: 'High-performance packet processing and routing protocol implementation.',\n    },\n    {\n      layer: 'Data Layer',\n      components: ['ClickHouse Analytics', 'Configuration Storage', 'Metrics Collection'],\n      description: 'Time-series data storage and analytics for monitoring and reporting.',\n    },\n    {\n      layer: 'Integration Layer',\n      components: ['CloudPods API', 'Aviatrix API', 'External Systems'],\n      description: 'Integration with external cloud platforms and networking services.',\n    },\n  ];\n\n  return (\n    <Container maxWidth=\"xl\" sx={{ py: 4 }}>\n      {/* Header */}\n      <Box textAlign=\"center\" mb={6}>\n        <Typography variant=\"h2\" component=\"h1\" gutterBottom>\n          Router Simulator\n        </Typography>\n        <Typography variant=\"h5\" color=\"text.secondary\" paragraph>\n          Multi-Cloud Networking Platform\n        </Typography>\n        <Typography variant=\"body1\" color=\"text.secondary\" sx={{ maxWidth: 800, mx: 'auto', mb: 4 }}>\n          A comprehensive router simulation framework with CloudPods and Aviatrix integration, \n          built with C++, Go, Rust, and modern web technologies for advanced networking research and development.\n        </Typography>\n        <Box>\n          <Button\n            variant=\"contained\"\n            size=\"large\"\n            startIcon={<GitHubIcon />}\n            href=\"https://github.com/calelin/router\"\n            target=\"_blank\"\n            sx={{ mr: 2, mb: 2 }}\n          >\n            View on GitHub\n          </Button>\n          <Button\n            variant=\"outlined\"\n            size=\"large\"\n            startIcon={<OpenInNewIcon />}\n            href=\"https://calelin.github.io/router/\"\n            target=\"_blank\"\n            sx={{ mb: 2 }}\n          >\n            Live Demo\n          </Button>\n        </Box>\n      </Box>\n\n      {/* Features */}\n      <Box mb={8}>\n        <Typography variant=\"h4\" component=\"h2\" gutterBottom textAlign=\"center\">\n          Key Features\n        </Typography>\n        <Grid container spacing={4}>\n          {features.map((feature, index) => (\n            <Grid item xs={12} md={6} key={index}>\n              <Card sx={{ height: '100%', display: 'flex', flexDirection: 'column' }}>\n                <CardContent sx={{ flexGrow: 1 }}>\n                  <Box display=\"flex\" alignItems=\"center\" mb={2}>\n                    <Box color={`${feature.color}.main`} mr={2}>\n                      {feature.icon}\n                    </Box>\n                    <Typography variant=\"h6\" component=\"h3\">\n                      {feature.title}\n                    </Typography>\n                  </Box>\n                  <Typography variant=\"body2\" color=\"text.secondary\" paragraph>\n                    {feature.description}\n                  </Typography>\n                  <List dense>\n                    {feature.details.map((detail, detailIndex) => (\n                      <ListItem key={detailIndex} disablePadding>\n                        <ListItemIcon sx={{ minWidth: 32 }}>\n                          <Chip size=\"small\" label=\"✓\" color={feature.color as any} />\n                        </ListItemIcon>\n                        <ListItemText primary={detail} />\n                      </ListItem>\n                    ))}\n                  </List>\n                </CardContent>\n              </Card>\n            </Grid>\n          ))}\n        </Grid>\n      </Box>\n\n      {/* Technology Stack */}\n      <Box mb={8}>\n        <Typography variant=\"h4\" component=\"h2\" gutterBottom textAlign=\"center\">\n          Technology Stack\n        </Typography>\n        <Grid container spacing={3}>\n          {techStack.map((tech, index) => (\n            <Grid item xs={12} sm={6} md={3} key={index}>\n              <Card sx={{ textAlign: 'center', p: 2 }}>\n                <CardContent>\n                  <Box color=\"primary.main\" mb={2}>\n                    {tech.icon}\n                  </Box>\n                  <Typography variant=\"h6\" gutterBottom>\n                    {tech.name}\n                  </Typography>\n                  <Typography variant=\"body2\" color=\"text.secondary\">\n                    {tech.description}\n                  </Typography>\n                </CardContent>\n              </Card>\n            </Grid>\n          ))}\n        </Grid>\n      </Box>\n\n      {/* Architecture */}\n      <Box mb={8}>\n        <Typography variant=\"h4\" component=\"h2\" gutterBottom textAlign=\"center\">\n          System Architecture\n        </Typography>\n        <Grid container spacing={3}>\n          {architecture.map((layer, index) => (\n            <Grid item xs={12} md={6} key={index}>\n              <Accordion>\n                <AccordionSummary expandIcon={<ExpandMoreIcon />}>\n                  <Typography variant=\"h6\">{layer.layer}</Typography>\n                </AccordionSummary>\n                <AccordionDetails>\n                  <Typography variant=\"body2\" color=\"text.secondary\" paragraph>\n                    {layer.description}\n                  </Typography>\n                  <Box>\n                    {layer.components.map((component, compIndex) => (\n                      <Chip\n                        key={compIndex}\n                        label={component}\n                        size=\"small\"\n                        sx={{ mr: 1, mb: 1 }}\n                      />\n                    ))}\n                  </Box>\n                </AccordionDetails>\n              </Accordion>\n            </Grid>\n          ))}\n        </Grid>\n      </Box>\n\n      {/* Getting Started */}\n      <Box mb={8}>\n        <Typography variant=\"h4\" component=\"h2\" gutterBottom textAlign=\"center\">\n          Getting Started\n        </Typography>\n        <Paper sx={{ p: 4 }}>\n          <Typography variant=\"h6\" gutterBottom>\n            Quick Start\n          </Typography>\n          <Box component=\"pre\" sx={{ \n            bgcolor: 'background.paper', \n            p: 2, \n            borderRadius: 1, \n            overflow: 'auto',\n            fontFamily: 'monospace',\n            fontSize: '0.875rem'\n          }}>\n{`# Clone the repository\ngit clone https://github.com/calelin/router.git\ncd router\n\n# Run the complete demo\n./demo.sh\n\n# Or build only\n./demo.sh --build-only`}\n          </Box>\n          \n          <Typography variant=\"h6\" gutterBottom sx={{ mt: 4 }}>\n            Prerequisites\n          </Typography>\n          <List>\n            <ListItem>\n              <ListItemIcon>\n                <Chip size=\"small\" label=\"1\" color=\"primary\" />\n              </ListItemIcon>\n              <ListItemText primary=\"Pixi package manager\" />\n            </ListItem>\n            <ListItem>\n              <ListItemIcon>\n                <Chip size=\"small\" label=\"2\" color=\"primary\" />\n              </ListItemIcon>\n              <ListItemText primary=\"Docker for containerized services\" />\n            </ListItem>\n            <ListItem>\n              <ListItemIcon>\n                <Chip size=\"small\" label=\"3\" color=\"primary\" />\n              </ListItemIcon>\n              <ListItemText primary=\"Node.js 18+ for web development\" />\n            </ListItem>\n            <ListItem>\n              <ListItemIcon>\n                <Chip size=\"small\" label=\"4\" color=\"primary\" />\n              </ListItemIcon>\n              <ListItemText primary=\"Go 1.21+ for backend services\" />\n            </ListItem>\n            <ListItem>\n              <ListItemIcon>\n                <Chip size=\"small\" label=\"5\" color=\"primary\" />\n              </ListItemIcon>\n              <ListItemText primary=\"Rust 1.70+ for packet processing\" />\n            </ListItem>\n            <ListItem>\n              <ListItemIcon>\n                <Chip size=\"small\" label=\"6\" color=\"primary\" />\n              </ListItemIcon>\n              <ListItemText primary=\"CMake 3.20+ for C++ builds\" />\n            </ListItem>\n          </List>\n        </Paper>\n      </Box>\n\n      {/* Documentation Links */}\n      <Box mb={8}>\n        <Typography variant=\"h4\" component=\"h2\" gutterBottom textAlign=\"center\">\n          Documentation\n        </Typography>\n        <Grid container spacing={3}>\n          <Grid item xs={12} sm={6} md={3}>\n            <Card sx={{ textAlign: 'center', p: 2 }}>\n              <CardContent>\n                <CodeIcon color=\"primary\" sx={{ fontSize: 40, mb: 2 }} />\n                <Typography variant=\"h6\" gutterBottom>\n                  API Reference\n                </Typography>\n                <Typography variant=\"body2\" color=\"text.secondary\" paragraph>\n                  Complete API documentation with examples\n                </Typography>\n                <Button variant=\"outlined\" size=\"small\">\n                  View Docs\n                </Button>\n              </CardContent>\n            </Card>\n          </Grid>\n          <Grid item xs={12} sm={6} md={3}>\n            <Card sx={{ textAlign: 'center', p: 2 }}>\n              <CardContent>\n                <MemoryIcon color=\"primary\" sx={{ fontSize: 40, mb: 2 }} />\n                <Typography variant=\"h6\" gutterBottom>\n                  Configuration\n                </Typography>\n                <Typography variant=\"body2\" color=\"text.secondary\" paragraph>\n                  Configuration guide and examples\n                </Typography>\n                <Button variant=\"outlined\" size=\"small\">\n                  View Guide\n                </Button>\n              </CardContent>\n            </Card>\n          </Grid>\n          <Grid item xs={12} sm={6} md={3}>\n            <Card sx={{ textAlign: 'center', p: 2 }}>\n              <CardContent>\n                <BugReportIcon color=\"primary\" sx={{ fontSize: 40, mb: 2 }} />\n                <Typography variant=\"h6\" gutterBottom>\n                  Testing\n                </Typography>\n                <Typography variant=\"body2\" color=\"text.secondary\" paragraph>\n                  Testing framework and examples\n                </Typography>\n                <Button variant=\"outlined\" size=\"small\">\n                  View Tests\n                </Button>\n              </CardContent>\n            </Card>\n          </Grid>\n          <Grid item xs={12} sm={6} md={3}>\n            <Card sx={{ textAlign: 'center', p: 2 }}>\n              <CardContent>\n                <AssessmentIcon color=\"primary\" sx={{ fontSize: 40, mb: 2 }} />\n                <Typography variant=\"h6\" gutterBottom>\n                  Troubleshooting\n                </Typography>\n                <Typography variant=\"body2\" color=\"text.secondary\" paragraph>\n                  Common issues and solutions\n                </Typography>\n                <Button variant=\"outlined\" size=\"small\">\n                  View Guide\n                </Button>\n              </CardContent>\n            </Card>\n          </Grid>\n        </Grid>\n      </Box>\n\n      {/* Contributing */}\n      <Box mb={8}>\n        <Typography variant=\"h4\" component=\"h2\" gutterBottom textAlign=\"center\">\n          Contributing\n        </Typography>\n        <Paper sx={{ p: 4 }}>\n          <Typography variant=\"body1\" paragraph>\n            We welcome contributions! Please see our Contributing Guide for details on how to get started.\n          </Typography>\n          <Box>\n            <Button\n              variant=\"contained\"\n              startIcon={<GitHubIcon />}\n              href=\"https://github.com/calelin/router/blob/main/CONTRIBUTING.md\"\n              target=\"_blank\"\n              sx={{ mr: 2 }}\n            >\n              Contributing Guide\n            </Button>\n            <Button\n              variant=\"outlined\"\n              startIcon={<BugReportIcon />}\n              href=\"https://github.com/calelin/router/issues\"\n              target=\"_blank\"\n            >\n              Report Issues\n            </Button>\n          </Box>\n        </Paper>\n      </Box>\n\n      {/* License */}\n      <Box textAlign=\"center\">\n        <Typography variant=\"h6\" gutterBottom>\n          License\n        </Typography>\n        <Typography variant=\"body2\" color=\"text.secondary\" paragraph>\n          This project is licensed under the MIT License - see the LICENSE file for details.\n        </Typography>\n        <Typography variant=\"body2\" color=\"text.secondary\">\n          Built with ❤️ by the Router Simulator Team\n        </Typography>\n      </Box>\n    </Container>\n  );\n};\n\nexport default About;\n","import React from 'react';\nimport { Box, Typography, Button } from '@mui/material';\nimport { useNavigate } from 'react-router-dom';\n\nconst NotFound: React.FC = () => {\n  const navigate = useNavigate();\n\n  return (\n    <Box textAlign=\"center\" py={8}>\n      <Typography variant=\"h1\" component=\"h1\" gutterBottom>\n        404\n      </Typography>\n      <Typography variant=\"h5\" gutterBottom>\n        Page Not Found\n      </Typography>\n      <Typography variant=\"body1\" color=\"text.secondary\" paragraph>\n        The page you are looking for does not exist.\n      </Typography>\n      <Button\n        variant=\"contained\"\n        onClick={() => navigate('/')}\n        size=\"large\"\n      >\n        Go Home\n      </Button>\n    </Box>\n  );\n};\n\nexport default NotFound;\n","import React, { Component, ErrorInfo, ReactNode } from 'react';\nimport { Box, Typography, Button, Paper } from '@mui/material';\nimport { Error as ErrorIcon, Refresh as RefreshIcon } from '@mui/icons-material';\n\ninterface Props {\n  children: ReactNode;\n  fallback?: ReactNode;\n}\n\ninterface State {\n  hasError: boolean;\n  error?: Error;\n  errorInfo?: ErrorInfo;\n}\n\nclass ErrorBoundary extends Component<Props, State> {\n  constructor(props: Props) {\n    super(props);\n    this.state = { hasError: false };\n  }\n\n  static getDerivedStateFromError(error: Error): State {\n    return { hasError: true, error };\n  }\n\n  componentDidCatch(error: Error, errorInfo: ErrorInfo) {\n    console.error('ErrorBoundary caught an error:', error, errorInfo);\n    this.setState({ error, errorInfo });\n  }\n\n  handleRetry = () => {\n    this.setState({ hasError: false, error: undefined, errorInfo: undefined });\n  };\n\n  render() {\n    if (this.state.hasError) {\n      if (this.props.fallback) {\n        return this.props.fallback;\n      }\n\n      return (\n        <Box\n          display=\"flex\"\n          justifyContent=\"center\"\n          alignItems=\"center\"\n          minHeight=\"100vh\"\n          bgcolor=\"background.default\"\n          p={3}\n        >\n          <Paper\n            elevation={3}\n            sx={{\n              p: 4,\n              maxWidth: 600,\n              textAlign: 'center',\n            }}\n          >\n            <ErrorIcon color=\"error\" sx={{ fontSize: 64, mb: 2 }} />\n            <Typography variant=\"h4\" gutterBottom>\n              Something went wrong\n            </Typography>\n            <Typography variant=\"body1\" color=\"text.secondary\" paragraph>\n              An unexpected error occurred. Please try refreshing the page.\n            </Typography>\n            \n            {process.env.NODE_ENV === 'development' && this.state.error && (\n              <Box\n                sx={{\n                  mt: 3,\n                  p: 2,\n                  bgcolor: 'background.paper',\n                  border: '1px solid',\n                  borderColor: 'error.main',\n                  borderRadius: 1,\n                  textAlign: 'left',\n                }}\n              >\n                <Typography variant=\"h6\" color=\"error\" gutterBottom>\n                  Error Details (Development Only)\n                </Typography>\n                <Typography variant=\"body2\" component=\"pre\" sx={{ whiteSpace: 'pre-wrap' }}>\n                  {this.state.error.toString()}\n                </Typography>\n                {this.state.errorInfo && (\n                  <Typography variant=\"body2\" component=\"pre\" sx={{ whiteSpace: 'pre-wrap', mt: 1 }}>\n                    {this.state.errorInfo.componentStack}\n                  </Typography>\n                )}\n              </Box>\n            )}\n            \n            <Box mt={3}>\n              <Button\n                variant=\"contained\"\n                startIcon={<RefreshIcon />}\n                onClick={this.handleRetry}\n                sx={{ mr: 2 }}\n              >\n                Try Again\n              </Button>\n              <Button\n                variant=\"outlined\"\n                onClick={() => window.location.reload()}\n              >\n                Refresh Page\n              </Button>\n            </Box>\n          </Paper>\n        </Box>\n      );\n    }\n\n    return this.props.children;\n  }\n}\n\nexport default ErrorBoundary;\n","import React, { useState, useEffect } from 'react';\nimport { BrowserRouter as Router, Routes, Route, Navigate } from 'react-router-dom';\nimport { ThemeProvider, createTheme } from '@mui/material/styles';\nimport CssBaseline from '@mui/material/CssBaseline';\nimport { Box, Container, AppBar, Toolbar, Typography, Button, IconButton, Drawer, List, ListItem, ListItemIcon, ListItemText, Divider, Badge, Alert, Snackbar } from '@mui/material';\nimport { \n  Dashboard as DashboardIcon, \n  Router as RouterIcon, \n  Cloud as CloudIcon, \n  Security as SecurityIcon, \n  Analytics as AnalyticsIcon, \n  Settings as SettingsIcon,\n  Menu as MenuIcon,\n  Notifications as NotificationsIcon,\n  AccountCircle as AccountCircleIcon,\n  NetworkCheck as NetworkCheckIcon,\n  Speed as SpeedIcon,\n  BugReport as BugReportIcon,\n  Storage as StorageIcon\n} from '@mui/icons-material';\n\n// Import pages\nimport Dashboard from './pages/Dashboard';\nimport NetworkTopology from './pages/NetworkTopology';\nimport CloudPods from './pages/CloudPods';\nimport Aviatrix from './pages/Aviatrix';\nimport Analytics from './pages/Analytics';\nimport TrafficShaping from './pages/TrafficShaping';\nimport NetworkImpairments from './pages/NetworkImpairments';\nimport Testing from './pages/Testing';\nimport Settings from './pages/Settings';\nimport About from './pages/About';\nimport NotFound from './pages/NotFound';\n\n// Import components\nimport Layout from './components/Layout';\nimport LoadingSpinner from './components/LoadingSpinner';\nimport ErrorBoundary from './components/ErrorBoundary';\n\n// Create theme\nconst theme = createTheme({\n  palette: {\n    mode: 'dark',\n    primary: {\n      main: '#1976d2',\n      light: '#42a5f5',\n      dark: '#1565c0',\n    },\n    secondary: {\n      main: '#dc004e',\n      light: '#ff5983',\n      dark: '#9a0036',\n    },\n    background: {\n      default: '#0a0a0a',\n      paper: '#1a1a1a',\n    },\n    text: {\n      primary: '#ffffff',\n      secondary: '#b0b0b0',\n    },\n  },\n  typography: {\n    fontFamily: '\"Roboto\", \"Helvetica\", \"Arial\", sans-serif',\n    h1: {\n      fontSize: '2.5rem',\n      fontWeight: 600,\n    },\n    h2: {\n      fontSize: '2rem',\n      fontWeight: 500,\n    },\n    h3: {\n      fontSize: '1.75rem',\n      fontWeight: 500,\n    },\n    h4: {\n      fontSize: '1.5rem',\n      fontWeight: 500,\n    },\n    h5: {\n      fontSize: '1.25rem',\n      fontWeight: 500,\n    },\n    h6: {\n      fontSize: '1rem',\n      fontWeight: 500,\n    },\n  },\n  components: {\n    MuiCard: {\n      styleOverrides: {\n        root: {\n          backgroundColor: '#1a1a1a',\n          border: '1px solid #333',\n          borderRadius: '8px',\n        },\n      },\n    },\n    MuiButton: {\n      styleOverrides: {\n        root: {\n          borderRadius: '6px',\n          textTransform: 'none',\n          fontWeight: 500,\n        },\n      },\n    },\n    MuiChip: {\n      styleOverrides: {\n        root: {\n          borderRadius: '16px',\n        },\n      },\n    },\n  },\n});\n\n// Navigation items\nconst navigationItems = [\n  { id: 'dashboard', label: 'Dashboard', icon: <DashboardIcon />, path: '/' },\n  { id: 'topology', label: 'Network Topology', icon: <NetworkCheckIcon />, path: '/topology' },\n  { id: 'cloudpods', label: 'CloudPods', icon: <CloudIcon />, path: '/cloudpods' },\n  { id: 'aviatrix', label: 'Aviatrix', icon: <SecurityIcon />, path: '/aviatrix' },\n  { id: 'traffic', label: 'Traffic Shaping', icon: <SpeedIcon />, path: '/traffic' },\n  { id: 'impairments', label: 'Network Impairments', icon: <BugReportIcon />, path: '/impairments' },\n  { id: 'analytics', label: 'Analytics', icon: <AnalyticsIcon />, path: '/analytics' },\n  { id: 'testing', label: 'Testing', icon: <BugReportIcon />, path: '/testing' },\n  { id: 'settings', label: 'Settings', icon: <SettingsIcon />, path: '/settings' },\n];\n\ninterface AppState {\n  loading: boolean;\n  error: string | null;\n  notifications: Array<{\n    id: string;\n    message: string;\n    severity: 'success' | 'info' | 'warning' | 'error';\n    timestamp: Date;\n  }>;\n  drawerOpen: boolean;\n  currentPage: string;\n}\n\nconst App: React.FC = () => {\n  const [state, setState] = useState<AppState>({\n    loading: true,\n    error: null,\n    notifications: [],\n    drawerOpen: false,\n    currentPage: 'dashboard',\n  });\n\n  // Initialize application\n  useEffect(() => {\n    const initializeApp = async () => {\n      try {\n        setState(prev => ({ ...prev, loading: true }));\n        \n        // Simulate initialization\n        await new Promise(resolve => setTimeout(resolve, 1000));\n        \n        // Check if backend is available\n        const response = await fetch('/api/v1/status');\n        if (!response.ok) {\n          throw new Error('Backend service unavailable');\n        }\n        \n        setState(prev => ({ \n          ...prev, \n          loading: false, \n          error: null \n        }));\n        \n        // Add welcome notification\n        addNotification('Router Simulator initialized successfully', 'success');\n        \n      } catch (error) {\n        console.error('Failed to initialize app:', error);\n        setState(prev => ({ \n          ...prev, \n          loading: false, \n          error: error instanceof Error ? error.message : 'Unknown error' \n        }));\n        addNotification('Failed to initialize application', 'error');\n      }\n    };\n\n    initializeApp();\n  }, []);\n\n  const addNotification = (message: string, severity: 'success' | 'info' | 'warning' | 'error') => {\n    const notification = {\n      id: Date.now().toString(),\n      message,\n      severity,\n      timestamp: new Date(),\n    };\n    \n    setState(prev => ({\n      ...prev,\n      notifications: [...prev.notifications, notification],\n    }));\n  };\n\n  const removeNotification = (id: string) => {\n    setState(prev => ({\n      ...prev,\n      notifications: prev.notifications.filter(n => n.id !== id),\n    }));\n  };\n\n  const toggleDrawer = () => {\n    setState(prev => ({ ...prev, drawerOpen: !prev.drawerOpen }));\n  };\n\n  const handlePageChange = (pageId: string) => {\n    setState(prev => ({ ...prev, currentPage: pageId }));\n  };\n\n  if (state.loading) {\n    return (\n      <ThemeProvider theme={theme}>\n        <CssBaseline />\n        <Box\n          display=\"flex\"\n          justifyContent=\"center\"\n          alignItems=\"center\"\n          minHeight=\"100vh\"\n          bgcolor=\"background.default\"\n        >\n          <LoadingSpinner size={60} />\n        </Box>\n      </ThemeProvider>\n    );\n  }\n\n  if (state.error) {\n    return (\n      <ThemeProvider theme={theme}>\n        <CssBaseline />\n        <Box\n          display=\"flex\"\n          justifyContent=\"center\"\n          alignItems=\"center\"\n          minHeight=\"100vh\"\n          bgcolor=\"background.default\"\n          flexDirection=\"column\"\n          gap={2}\n        >\n          <Typography variant=\"h4\" color=\"error\" gutterBottom>\n            Application Error\n          </Typography>\n          <Typography variant=\"body1\" color=\"text.secondary\" textAlign=\"center\">\n            {state.error}\n          </Typography>\n          <Button \n            variant=\"contained\" \n            color=\"primary\" \n            onClick={() => window.location.reload()}\n            sx={{ mt: 2 }}\n          >\n            Retry\n          </Button>\n        </Box>\n      </ThemeProvider>\n    );\n  }\n\n  return (\n    <ThemeProvider theme={theme}>\n      <CssBaseline />\n      <ErrorBoundary>\n        <Router>\n          <Box sx={{ display: 'flex', minHeight: '100vh' }}>\n            {/* App Bar */}\n            <AppBar position=\"fixed\" sx={{ zIndex: theme.zIndex.drawer + 1 }}>\n              <Toolbar>\n                <IconButton\n                  color=\"inherit\"\n                  aria-label=\"open drawer\"\n                  onClick={toggleDrawer}\n                  edge=\"start\"\n                  sx={{ mr: 2 }}\n                >\n                  <MenuIcon />\n                </IconButton>\n                <RouterIcon sx={{ mr: 2 }} />\n                <Typography variant=\"h6\" component=\"div\" sx={{ flexGrow: 1 }}>\n                  Router Simulator\n                </Typography>\n                <Badge badgeContent={state.notifications.length} color=\"secondary\">\n                  <IconButton color=\"inherit\">\n                    <NotificationsIcon />\n                  </IconButton>\n                </Badge>\n                <IconButton color=\"inherit\">\n                  <AccountCircleIcon />\n                </IconButton>\n              </Toolbar>\n            </AppBar>\n\n            {/* Navigation Drawer */}\n            <Drawer\n              variant=\"temporary\"\n              open={state.drawerOpen}\n              onClose={toggleDrawer}\n              sx={{\n                width: 280,\n                flexShrink: 0,\n                '& .MuiDrawer-paper': {\n                  width: 280,\n                  boxSizing: 'border-box',\n                  backgroundColor: 'background.paper',\n                  borderRight: '1px solid #333',\n                },\n              }}\n            >\n              <Toolbar />\n              <Box sx={{ overflow: 'auto', pt: 2 }}>\n                <List>\n                  {navigationItems.map((item) => (\n                    <ListItem\n                      key={item.id}\n                      button\n                      onClick={() => {\n                        handlePageChange(item.id);\n                        toggleDrawer();\n                      }}\n                      selected={state.currentPage === item.id}\n                      sx={{\n                        '&.Mui-selected': {\n                          backgroundColor: 'primary.main',\n                          '&:hover': {\n                            backgroundColor: 'primary.dark',\n                          },\n                        },\n                      }}\n                    >\n                      <ListItemIcon sx={{ color: 'inherit' }}>\n                        {item.icon}\n                      </ListItemIcon>\n                      <ListItemText primary={item.label} />\n                    </ListItem>\n                  ))}\n                </List>\n                <Divider sx={{ my: 2 }} />\n                <List>\n                  <ListItem button onClick={() => handlePageChange('about')}>\n                    <ListItemIcon>\n                      <StorageIcon />\n                    </ListItemIcon>\n                    <ListItemText primary=\"About\" />\n                  </ListItem>\n                </List>\n              </Box>\n            </Drawer>\n\n            {/* Main Content */}\n            <Box\n              component=\"main\"\n              sx={{\n                flexGrow: 1,\n                p: 3,\n                width: { sm: `calc(100% - 280px)` },\n                ml: { sm: 0 },\n                mt: 8, // Account for AppBar height\n              }}\n            >\n              <Container maxWidth=\"xl\">\n                <Routes>\n                  <Route path=\"/\" element={<Dashboard />} />\n                  <Route path=\"/topology\" element={<NetworkTopology />} />\n                  <Route path=\"/cloudpods\" element={<CloudPods />} />\n                  <Route path=\"/aviatrix\" element={<Aviatrix />} />\n                  <Route path=\"/traffic\" element={<TrafficShaping />} />\n                  <Route path=\"/impairments\" element={<NetworkImpairments />} />\n                  <Route path=\"/analytics\" element={<Analytics />} />\n                  <Route path=\"/testing\" element={<Testing />} />\n                  <Route path=\"/settings\" element={<Settings />} />\n                  <Route path=\"/about\" element={<About />} />\n                  <Route path=\"*\" element={<NotFound />} />\n                </Routes>\n              </Container>\n            </Box>\n          </Box>\n\n          {/* Notifications */}\n          <Snackbar\n            open={state.notifications.length > 0}\n            autoHideDuration={6000}\n            onClose={() => removeNotification(state.notifications[0]?.id || '')}\n            anchorOrigin={{ vertical: 'bottom', horizontal: 'right' }}\n          >\n            <Alert\n              onClose={() => removeNotification(state.notifications[0]?.id || '')}\n              severity={state.notifications[0]?.severity || 'info'}\n              sx={{ width: '100%' }}\n            >\n              {state.notifications[0]?.message}\n            </Alert>\n          </Snackbar>\n        </Router>\n      </ErrorBoundary>\n    </ThemeProvider>\n  );\n};\n\nexport default App;\n","import React from 'react'\nimport ReactDOM from 'react-dom/client'\nimport App from './App'\nimport './index.css'\n\nReactDOM.createRoot(document.getElementById('root')!).render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n)\n"],"names":["m","require$$0","client","StatusBadge","status","label","size","getStatusColor","jsx","Chip","LoadingSpinner","message","fullScreen","content","jsxs","Box","CircularProgress","Typography","ErrorMessage","title","onRetry","severity","Alert","Button","RefreshIcon","AlertTitle","mockData","Dashboard","loading","setLoading","useState","error","setError","data","setData","page","setPage","rowsPerPage","setRowsPerPage","useEffect","fetchData","resolve","err","interval","handleRefresh","handleChangePage","event","newPage","handleChangeRowsPerPage","getSeverityIcon","CheckCircleIcon","WarningIcon","ErrorIcon","InfoIcon","Tooltip","IconButton","SettingsIcon","Grid","Card","CardContent","RouterIcon","CloudIcon","SecurityIcon","SpeedIcon","ResponsiveContainer","LineChart","CartesianGrid","XAxis","YAxis","RechartsTooltip","Line","LinearProgress","List","protocol","index","React","ListItem","ListItemIcon","NetworkCheckIcon","ListItemText","Divider","iface","WifiIcon","TableContainer","Table","TableHead","TableRow","TableCell","TableBody","route","TablePagination","NetworkTopology","MetricCard","value","subtitle","icon","color","trend","trendValue","onClick","tooltip","getTrendIcon","TrendingUpIcon","TrendingDownIcon","getTrendColor","cardContent","mockCloudPodsData","TabPanel","props","children","other","CloudPods","tabValue","setTabValue","createDialogOpen","setCreateDialogOpen","selectedResource","setSelectedResource","handleTabChange","newValue","ComputerIcon","StorageIcon","Paper","Tabs","Tab","TimelineIcon","AssessmentIcon","AddIcon","instance","EditIcon","DeleteIcon","network","tag","storage","lb","Dialog","DialogTitle","DialogContent","DialogActions","mockAviatrixData","Aviatrix","ShieldIcon","Accordion","AccordionSummary","ExpandMoreIcon","AccordionDetails","gateway","HubIcon","AccountTreeIcon","tunnel","policy","rule","KeyIcon","Analytics","TrafficShaping","NetworkImpairments","Testing","Settings","About","features","BugReportIcon","techStack","CodeIcon","MemoryIcon","DashboardIcon","VisibilityIcon","PublicIcon","architecture","Container","GitHubIcon","OpenInNewIcon","feature","detail","detailIndex","tech","layer","component","compIndex","NotFound","navigate","useNavigate","ErrorBoundary","Component","__publicField","errorInfo","theme","createTheme","navigationItems","AnalyticsIcon","App","state","setState","prev","addNotification","notification","removeNotification","id","n","toggleDrawer","handlePageChange","pageId","ThemeProvider","CssBaseline","Router","AppBar","Toolbar","MenuIcon","Badge","NotificationsIcon","AccountCircleIcon","Drawer","item","Routes","Route","Snackbar","_a","_b","ReactDOM"],"mappings":"quDAEIA,GAAIC,GAENC,GAAA,WAAqBF,GAAE,WACvBE,GAAA,YAAsBF,GAAE,YCI1B,MAAMG,GAA0C,CAAC,CAC/C,OAAAC,EACA,MAAAC,EACA,KAAAC,EAAO,OACT,IAAM,CACJ,MAAMC,EAAkBH,GAAmG,CACzH,OAAQA,EAAO,cAAY,CACzB,IAAK,UACL,IAAK,KACL,IAAK,SACL,IAAK,UACL,IAAK,YACL,IAAK,UACH,MAAO,UACT,IAAK,UACL,IAAK,OACL,IAAK,WACL,IAAK,eACL,IAAK,QACL,IAAK,SACH,MAAO,QACT,IAAK,UACL,IAAK,UACL,IAAK,UACH,MAAO,UACT,IAAK,OACL,IAAK,cACH,MAAO,OACT,QACE,MAAO,SAAA,CAEb,EAEA,OACEI,EAAAA,IAACC,EAAA,CACC,MAAOJ,GAASD,EAChB,MAAOG,EAAeH,CAAM,EAC5B,KAAAE,EACA,QAAQ,QAAA,CAAA,CAGd,ECzCMI,GAAgD,CAAC,CACrD,KAAAJ,EAAO,GACP,QAAAK,EAAU,aACV,WAAAC,EAAa,EACf,IAAM,CACJ,MAAMC,EACJC,EAAAA,KAACC,EAAA,CAAI,QAAQ,OAAO,cAAc,SAAS,WAAW,SAAS,IAAK,EAClE,SAAA,CAAAP,MAACQ,IAAiB,KAAAV,EAAY,EAC7BK,GACCH,EAAAA,IAACS,EAAA,CAAW,QAAQ,QAAQ,MAAM,iBAC/B,SAAAN,CAAA,CACH,CAAA,EAEJ,EAGF,OAAIC,EAEAJ,EAAAA,IAACO,EAAA,CACC,QAAQ,OACR,eAAe,SACf,WAAW,SACX,UAAU,QACV,QAAQ,qBAEP,SAAAF,CAAA,CAAA,EAKAA,CACT,EC7BMK,GAA4C,CAAC,CACjD,QAAAP,EACA,MAAAQ,EAAQ,QACR,QAAAC,EACA,SAAAC,EAAW,OACb,IAEIb,EAAAA,IAACO,GAAI,QAAQ,OAAO,eAAe,SAAS,WAAW,SAAS,UAAU,QACxE,SAAAD,EAAAA,KAACQ,GAAA,CACC,SAAAD,EACA,OACED,GACEZ,EAAAA,IAACe,EAAA,CACC,MAAM,UACN,KAAK,QACL,QAASH,EACT,gBAAYI,GAAA,EAAY,EACzB,SAAA,OAAA,CAAA,EAKL,GAAI,CAAE,SAAU,GAAA,EAEhB,SAAA,CAAAhB,EAAAA,IAACiB,IAAY,SAAAN,CAAA,CAAM,EAClBR,CAAA,CAAA,CAAA,EAEL,EC2BEe,GAAW,CACf,aAAc,CACZ,QAAS,UACT,OAAQ,aACR,QAAS,QACT,WAAY,qBAAA,EAEd,UAAW,CACT,CAAE,KAAM,MAAO,OAAQ,UAAW,UAAW,EAAG,OAAQ,KAAM,OAAQ,QAAA,EACtE,CAAE,KAAM,OAAQ,OAAQ,UAAW,UAAW,EAAG,OAAQ,IAAK,OAAQ,QAAA,EACtE,CAAE,KAAM,OAAQ,OAAQ,UAAW,UAAW,EAAG,OAAQ,EAAG,OAAQ,IAAA,CAAK,EAE3E,WAAY,CACV,CAAE,KAAM,OAAQ,OAAQ,KAAM,MAAO,QAAS,GAAI,MAAS,GAAI,KAAQ,OAAQ,CAAA,EAC/E,CAAE,KAAM,OAAQ,OAAQ,KAAM,MAAO,QAAS,GAAI,KAAQ,GAAI,KAAS,OAAQ,CAAA,EAC/E,CAAE,KAAM,OAAQ,OAAQ,OAAQ,MAAO,SAAU,GAAI,EAAG,GAAI,EAAG,OAAQ,CAAA,CAAE,EAE3E,eAAgB,CACd,UAAW,CACT,UAAW,GACX,SAAU,EACV,SAAU,GACV,cAAe,EACf,OAAQ,WAAA,EAEV,SAAU,CACR,SAAU,EACV,gBAAiB,EACjB,cAAe,EACf,OAAQ,WAAA,CACV,EAEF,aAAc,CACZ,aAAc,MACd,WAAY,MACZ,iBAAkB,KAClB,eAAgB,MAChB,eAAgB,IAChB,aAAc,KAAA,EAEhB,mBAAoB,CAClB,CAAE,KAAM,QAAS,IAAK,GAAI,OAAQ,GAAI,QAAS,EAAA,EAC/C,CAAE,KAAM,QAAS,IAAK,GAAI,OAAQ,GAAI,QAAS,EAAA,EAC/C,CAAE,KAAM,QAAS,IAAK,GAAI,OAAQ,GAAI,QAAS,EAAA,EAC/C,CAAE,KAAM,QAAS,IAAK,GAAI,OAAQ,GAAI,QAAS,EAAA,EAC/C,CAAE,KAAM,QAAS,IAAK,GAAI,OAAQ,GAAI,QAAS,EAAA,EAC/C,CAAE,KAAM,QAAS,IAAK,GAAI,OAAQ,GAAI,QAAS,EAAA,CAAG,EAEpD,aAAc,CACZ,CAAE,KAAM,WAAY,KAAM,OAAQ,QAAS,uCAAwC,SAAU,MAAA,EAC7F,CAAE,KAAM,WAAY,KAAM,UAAW,QAAS,gCAAiC,SAAU,SAAA,EACzF,CAAE,KAAM,WAAY,KAAM,UAAW,QAAS,6BAA8B,SAAU,SAAA,EACtF,CAAE,KAAM,WAAY,KAAM,QAAS,QAAS,2BAA4B,SAAU,OAAA,EAClF,CAAE,KAAM,WAAY,KAAM,OAAQ,QAAS,oCAAqC,SAAU,MAAA,CAAO,EAEnG,UAAW,CACT,CAAE,YAAa,iBAAkB,QAAS,cAAe,SAAU,MAAO,OAAQ,EAAG,IAAK,QAAA,EAC1F,CAAE,YAAa,aAAc,QAAS,WAAY,SAAU,OAAQ,OAAQ,GAAI,IAAK,QAAA,EACrF,CAAE,YAAa,gBAAiB,QAAS,aAAc,SAAU,MAAO,OAAQ,EAAG,IAAK,QAAA,EACxF,CAAE,YAAa,YAAa,QAAS,cAAe,SAAU,MAAO,OAAQ,EAAG,IAAK,QAAA,CAAS,CAElG,EAEMC,GAAsB,IAAM,CAChC,KAAM,CAACC,EAASC,CAAU,EAAIC,EAAAA,SAAS,EAAI,EACrC,CAACC,EAAOC,CAAQ,EAAIF,EAAAA,SAAwB,IAAI,EAChD,CAACG,EAAMC,CAAO,EAAIJ,EAAAA,SAASJ,EAAQ,EACnC,CAACS,EAAMC,CAAO,EAAIN,EAAAA,SAAS,CAAC,EAC5B,CAACO,EAAaC,CAAc,EAAIR,EAAAA,SAAS,CAAC,EAEhDS,EAAAA,UAAU,IAAM,CACd,MAAMC,EAAY,SAAY,CAC5B,GAAI,CACFX,EAAW,EAAI,EACfG,EAAS,IAAI,EAGb,MAAM,IAAI,QAAQS,GAAW,WAAWA,EAAS,GAAI,CAAC,EAOtDP,EAAQR,EAAQ,EAChBG,EAAW,EAAK,CAClB,OAASa,EAAK,CACZ,QAAQ,MAAM,kCAAmCA,CAAG,EACpDV,EAASU,aAAe,MAAQA,EAAI,QAAU,eAAe,EAC7Db,EAAW,EAAK,CAClB,CACF,EAEAW,EAAA,EAGA,MAAMG,EAAW,YAAYH,EAAW,GAAK,EAC7C,MAAO,IAAM,cAAcG,CAAQ,CACrC,EAAG,CAAA,CAAE,EAEL,MAAMC,EAAgB,IAAM,CAC1Bf,EAAW,EAAI,EAEf,OAAO,SAAS,OAAA,CAClB,EAEMgB,EAAmB,CAACC,EAAgBC,IAAoB,CAC5DX,EAAQW,CAAO,CACjB,EAEMC,GAA2BF,GAA+C,CAC9ER,EAAe,SAASQ,EAAM,OAAO,MAAO,EAAE,CAAC,EAC/CV,EAAQ,CAAC,CACX,EAEM7B,EAAkBH,GAAmB,CACzC,OAAQA,EAAO,cAAY,CACzB,IAAK,UACL,IAAK,KACL,IAAK,UACL,IAAK,YACH,MAAO,UACT,IAAK,UACL,IAAK,OACL,IAAK,eACH,MAAO,QACT,IAAK,UACH,MAAO,UACT,QACE,MAAO,SAAA,CAEb,EAEM6C,GAAmB5B,GAAqB,CAC5C,OAAQA,EAAA,CACN,IAAK,UACH,OAAOb,EAAAA,IAAC0C,GAAA,CAAgB,MAAM,SAAA,CAAU,EAC1C,IAAK,UACH,OAAO1C,EAAAA,IAAC2C,GAAA,CAAY,MAAM,SAAA,CAAU,EACtC,IAAK,QACH,OAAO3C,EAAAA,IAAC4C,GAAA,CAAU,MAAM,OAAA,CAAQ,EAClC,QACE,OAAO5C,EAAAA,IAAC6C,GAAA,CAAS,MAAM,MAAA,CAAO,CAAA,CAEpC,EAEA,OAAIzB,EAEApB,EAAAA,IAACO,EAAA,CAAI,QAAQ,OAAO,eAAe,SAAS,WAAW,SAAS,UAAU,QACxE,SAAAP,MAACE,GAAA,CAAe,KAAM,GAAI,EAC5B,EAIAqB,EACKvB,EAAAA,IAACU,GAAA,CAAa,QAASa,CAAA,CAAO,SAIpChB,EAAA,CAEC,SAAA,CAAAD,EAAAA,KAACC,EAAA,CAAI,QAAQ,OAAO,eAAe,gBAAgB,WAAW,SAAS,GAAI,EACzE,SAAA,CAAAP,MAACS,EAAA,CAAW,QAAQ,KAAK,UAAU,KAAK,SAAA,YAExC,SACCF,EAAA,CACC,SAAA,CAAAP,EAAAA,IAAC8C,EAAA,CAAQ,MAAM,UACb,SAAA9C,EAAAA,IAAC+C,EAAA,CAAW,QAASX,EAAe,SAAUhB,EAC5C,SAAApB,EAAAA,IAACgB,GAAA,CAAA,CAAY,CAAA,CACf,EACF,EACAhB,EAAAA,IAAC8C,GAAQ,MAAM,WACb,eAACC,EAAA,CACC,SAAA/C,EAAAA,IAACgD,GAAA,CAAA,CAAa,CAAA,CAChB,CAAA,CACF,CAAA,CAAA,CACF,CAAA,EACF,SAGCC,EAAA,CAAK,UAAS,GAAC,QAAS,EAAG,GAAI,EAC9B,SAAA,CAAAjD,EAAAA,IAACiD,EAAA,CAAK,KAAI,GAAC,GAAI,GAAI,GAAI,EACrB,SAAAjD,EAAAA,IAACkD,EAAA,CACC,SAAA5C,EAAAA,KAAC6C,EAAA,CACC,SAAA,CAAA7C,OAACC,GAAI,QAAQ,OAAO,WAAW,SAAS,GAAI,EAC1C,SAAA,CAAAP,MAACoD,IAAW,MAAM,UAAU,GAAI,CAAE,GAAI,GAAK,EAC3CpD,EAAAA,IAACS,EAAA,CAAW,QAAQ,KAAK,SAAA,eAAA,CAAa,CAAA,EACxC,EACAT,EAAAA,IAACL,GAAA,CACC,OAAQ8B,EAAK,aAAa,QAC1B,MAAOA,EAAK,aAAa,QAAQ,YAAA,CAAY,CAAA,EAE/CnB,EAAAA,KAACG,EAAA,CAAW,QAAQ,QAAQ,MAAM,iBAAiB,GAAI,CAAE,GAAI,CAAA,EAAK,SAAA,CAAA,WACvDgB,EAAK,aAAa,MAAA,EAC7B,EACAnB,EAAAA,KAACG,EAAA,CAAW,QAAQ,QAAQ,MAAM,iBAAiB,SAAA,CAAA,YACvCgB,EAAK,aAAa,OAAA,CAAA,CAC9B,CAAA,CAAA,CACF,EACF,EACF,EAEAzB,EAAAA,IAACiD,EAAA,CAAK,KAAI,GAAC,GAAI,GAAI,GAAI,EACrB,SAAAjD,EAAAA,IAACkD,EAAA,CACC,SAAA5C,EAAAA,KAAC6C,EAAA,CACC,SAAA,CAAA7C,OAACC,GAAI,QAAQ,OAAO,WAAW,SAAS,GAAI,EAC1C,SAAA,CAAAP,MAACqD,IAAU,MAAM,UAAU,GAAI,CAAE,GAAI,GAAK,EAC1CrD,EAAAA,IAACS,EAAA,CAAW,QAAQ,KAAK,SAAA,WAAA,CAAS,CAAA,EACpC,EACAT,EAAAA,IAACL,GAAA,CACC,OAAQ8B,EAAK,eAAe,UAAU,OACtC,MAAOA,EAAK,eAAe,UAAU,OAAO,YAAA,CAAY,CAAA,EAE1DnB,EAAAA,KAACG,EAAA,CAAW,QAAQ,QAAQ,MAAM,iBAAiB,GAAI,CAAE,GAAI,CAAA,EAAK,SAAA,CAAA,cACpDgB,EAAK,eAAe,UAAU,SAAA,EAC5C,EACAnB,EAAAA,KAACG,EAAA,CAAW,QAAQ,QAAQ,MAAM,iBAAiB,SAAA,CAAA,aACtCgB,EAAK,eAAe,UAAU,QAAA,CAAA,CAC3C,CAAA,CAAA,CACF,EACF,EACF,EAEAzB,EAAAA,IAACiD,EAAA,CAAK,KAAI,GAAC,GAAI,GAAI,GAAI,EACrB,SAAAjD,EAAAA,IAACkD,EAAA,CACC,SAAA5C,EAAAA,KAAC6C,EAAA,CACC,SAAA,CAAA7C,OAACC,GAAI,QAAQ,OAAO,WAAW,SAAS,GAAI,EAC1C,SAAA,CAAAP,MAACsD,IAAa,MAAM,UAAU,GAAI,CAAE,GAAI,GAAK,EAC7CtD,EAAAA,IAACS,EAAA,CAAW,QAAQ,KAAK,SAAA,UAAA,CAAQ,CAAA,EACnC,EACAT,EAAAA,IAACL,GAAA,CACC,OAAQ8B,EAAK,eAAe,SAAS,OACrC,MAAOA,EAAK,eAAe,SAAS,OAAO,YAAA,CAAY,CAAA,EAEzDnB,EAAAA,KAACG,EAAA,CAAW,QAAQ,QAAQ,MAAM,iBAAiB,GAAI,CAAE,GAAI,CAAA,EAAK,SAAA,CAAA,aACrDgB,EAAK,eAAe,SAAS,QAAA,EAC1C,EACAnB,EAAAA,KAACG,EAAA,CAAW,QAAQ,QAAQ,MAAM,iBAAiB,SAAA,CAAA,YACvCgB,EAAK,eAAe,SAAS,eAAA,CAAA,CACzC,CAAA,CAAA,CACF,EACF,EACF,EAEAzB,EAAAA,IAACiD,EAAA,CAAK,KAAI,GAAC,GAAI,GAAI,GAAI,EACrB,SAAAjD,EAAAA,IAACkD,EAAA,CACC,SAAA5C,EAAAA,KAAC6C,EAAA,CACC,SAAA,CAAA7C,OAACC,GAAI,QAAQ,OAAO,WAAW,SAAS,GAAI,EAC1C,SAAA,CAAAP,MAACuD,IAAU,MAAM,UAAU,GAAI,CAAE,GAAI,GAAK,EAC1CvD,EAAAA,IAACS,EAAA,CAAW,QAAQ,KAAK,SAAA,SAAA,CAAO,CAAA,EAClC,EACAT,EAAAA,IAACS,EAAA,CAAW,QAAQ,KAAK,MAAM,UAC5B,SAAAgB,EAAK,aAAa,iBAAiB,eAAA,CAAe,CACrD,QACChB,EAAA,CAAW,QAAQ,QAAQ,MAAM,iBAAiB,SAAA,cAEnD,EACAH,EAAAA,KAACG,EAAA,CAAW,QAAQ,QAAQ,MAAM,iBAC/B,SAAA,CAAAgB,EAAK,aAAa,eAAe,eAAA,EAAiB,YAAA,CAAA,CACrD,CAAA,CAAA,CACF,EACF,CAAA,CACF,CAAA,EACF,SAGCwB,EAAA,CAAK,UAAS,GAAC,QAAS,EAAG,GAAI,EAC9B,SAAA,CAAAjD,EAAAA,IAACiD,EAAA,CAAK,KAAI,GAAC,GAAI,GAAI,GAAI,EACrB,SAAAjD,EAAAA,IAACkD,EAAA,CACC,SAAA5C,EAAAA,KAAC6C,EAAA,CACC,SAAA,CAAAnD,MAACS,EAAA,CAAW,QAAQ,KAAK,aAAY,GAAC,SAAA,sBAEtC,EACAT,EAAAA,IAACwD,GAAA,CAAoB,MAAM,OAAO,OAAQ,IACxC,SAAAlD,EAAAA,KAACmD,GAAA,CAAU,KAAMhC,EAAK,mBACpB,SAAA,CAAAzB,EAAAA,IAAC0D,GAAA,CAAc,gBAAgB,KAAA,CAAM,EACrC1D,EAAAA,IAAC2D,GAAA,CAAM,QAAQ,MAAA,CAAO,QACrBC,GAAA,EAAM,QACNC,GAAA,EAAgB,EACjB7D,EAAAA,IAAC8D,GAAK,KAAK,WAAW,QAAQ,MAAM,OAAO,UAAU,YAAa,CAAA,CAAG,EACrE9D,EAAAA,IAAC8D,GAAK,KAAK,WAAW,QAAQ,SAAS,OAAO,UAAU,YAAa,CAAA,CAAG,EACxE9D,EAAAA,IAAC8D,GAAK,KAAK,WAAW,QAAQ,UAAU,OAAO,UAAU,YAAa,CAAA,CAAG,CAAA,CAAA,CAC3E,CAAA,CACF,CAAA,CAAA,CACF,EACF,EACF,EAEA9D,EAAAA,IAACiD,EAAA,CAAK,KAAI,GAAC,GAAI,GAAI,GAAI,EACrB,SAAAjD,EAAAA,IAACkD,EAAA,CACC,SAAA5C,EAAAA,KAAC6C,EAAA,CACC,SAAA,CAAAnD,MAACS,EAAA,CAAW,QAAQ,KAAK,aAAY,GAAC,SAAA,iBAEtC,EACAH,EAAAA,KAACC,EAAA,CAAI,GAAI,EACP,SAAA,CAAAD,OAACC,GAAI,QAAQ,OAAO,eAAe,gBAAgB,GAAI,EACrD,SAAA,CAAAP,EAAAA,IAACS,EAAA,CAAW,QAAQ,QAAQ,SAAA,MAAG,EAC/BT,EAAAA,IAACS,EAAA,CAAW,QAAQ,QAAQ,SAAA,KAAA,CAAG,CAAA,EACjC,EACAT,EAAAA,IAAC+D,GAAA,CAAe,QAAQ,cAAc,MAAO,EAAA,CAAI,CAAA,EACnD,EACAzD,EAAAA,KAACC,EAAA,CAAI,GAAI,EACP,SAAA,CAAAD,OAACC,GAAI,QAAQ,OAAO,eAAe,gBAAgB,GAAI,EACrD,SAAA,CAAAP,EAAAA,IAACS,EAAA,CAAW,QAAQ,QAAQ,SAAA,SAAM,EAClCT,EAAAA,IAACS,EAAA,CAAW,QAAQ,QAAQ,SAAA,KAAA,CAAG,CAAA,EACjC,EACAT,EAAAA,IAAC+D,GAAA,CAAe,QAAQ,cAAc,MAAO,EAAA,CAAI,CAAA,EACnD,EACAzD,EAAAA,KAACC,EAAA,CAAI,GAAI,EACP,SAAA,CAAAD,OAACC,GAAI,QAAQ,OAAO,eAAe,gBAAgB,GAAI,EACrD,SAAA,CAAAP,EAAAA,IAACS,EAAA,CAAW,QAAQ,QAAQ,SAAA,UAAO,EACnCT,EAAAA,IAACS,EAAA,CAAW,QAAQ,QAAQ,SAAA,KAAA,CAAG,CAAA,EACjC,EACAT,EAAAA,IAAC+D,GAAA,CAAe,QAAQ,cAAc,MAAO,EAAA,CAAI,CAAA,EACnD,EACAzD,EAAAA,KAACC,EAAA,CAAI,GAAI,EACP,SAAA,CAAAD,OAACC,GAAI,QAAQ,OAAO,eAAe,gBAAgB,GAAI,EACrD,SAAA,CAAAP,EAAAA,IAACS,EAAA,CAAW,QAAQ,QAAQ,SAAA,UAAO,EACnCT,EAAAA,IAACS,EAAA,CAAW,QAAQ,QAAQ,SAAA,KAAA,CAAG,CAAA,EACjC,EACAT,EAAAA,IAAC+D,GAAA,CAAe,QAAQ,cAAc,MAAO,EAAA,CAAI,CAAA,CAAA,CACnD,CAAA,CAAA,CACF,EACF,CAAA,CACF,CAAA,EACF,SAGCd,EAAA,CAAK,UAAS,GAAC,QAAS,EAAG,GAAI,EAC9B,SAAA,CAAAjD,EAAAA,IAACiD,EAAA,CAAK,KAAI,GAAC,GAAI,GAAI,GAAI,EACrB,SAAAjD,EAAAA,IAACkD,EAAA,CACC,SAAA5C,EAAAA,KAAC6C,EAAA,CACC,SAAA,CAAAnD,MAACS,EAAA,CAAW,QAAQ,KAAK,aAAY,GAAC,SAAA,oBAEtC,EACAT,EAAAA,IAACgE,EAAA,CACE,SAAAvC,EAAK,UAAU,IAAI,CAACwC,EAAUC,IAC7B5D,EAAAA,KAAC6D,GAAM,SAAN,CACC,SAAA,CAAA7D,OAAC8D,EAAA,CACC,SAAA,CAAApE,EAAAA,IAACqE,EAAA,CACC,eAACC,EAAA,CAAiB,MAAOvE,EAAekE,EAAS,MAAM,EAAU,CAAA,CACnE,EACAjE,EAAAA,IAACuE,EAAA,CACC,QAASN,EAAS,KAClB,iBACG1D,EAAA,CACC,SAAA,CAAAD,EAAAA,KAACG,EAAA,CAAW,QAAQ,QAAQ,MAAM,iBAAiB,SAAA,CAAA,WACxCwD,EAAS,OAAO,iBAAeA,EAAS,UAAU,cAAYA,EAAS,MAAA,EAClF,EACA3D,EAAAA,KAACG,EAAA,CAAW,QAAQ,QAAQ,MAAM,iBAAiB,SAAA,CAAA,WACxCwD,EAAS,MAAA,CAAA,CACpB,CAAA,CAAA,CACF,CAAA,CAAA,EAGJjE,EAAAA,IAACC,EAAA,CACC,MAAOgE,EAAS,OAChB,MAAOlE,EAAekE,EAAS,MAAM,EACrC,KAAK,OAAA,CAAA,CACP,EACF,EACCC,EAAQzC,EAAK,UAAU,OAAS,SAAM+C,EAAA,CAAA,CAAQ,CAAA,CAAA,EAxB5BN,CAyBrB,CACD,CAAA,CACH,CAAA,CAAA,CACF,EACF,EACF,EAEAlE,EAAAA,IAACiD,EAAA,CAAK,KAAI,GAAC,GAAI,GAAI,GAAI,EACrB,SAAAjD,EAAAA,IAACkD,EAAA,CACC,SAAA5C,EAAAA,KAAC6C,EAAA,CACC,SAAA,CAAAnD,MAACS,EAAA,CAAW,QAAQ,KAAK,aAAY,GAAC,SAAA,qBAEtC,EACAT,EAAAA,IAACgE,EAAA,CACE,SAAAvC,EAAK,WAAW,IAAI,CAACgD,EAAOP,IAC3B5D,EAAAA,KAAC6D,GAAM,SAAN,CACC,SAAA,CAAA7D,OAAC8D,EAAA,CACC,SAAA,CAAApE,EAAAA,IAACqE,EAAA,CACC,eAACK,GAAA,CAAS,MAAO3E,EAAe0E,EAAM,MAAM,EAAU,CAAA,CACxD,EACAzE,EAAAA,IAACuE,EAAA,CACC,QAASE,EAAM,KACf,iBACGlE,EAAA,CACC,SAAA,CAAAD,EAAAA,KAACG,EAAA,CAAW,QAAQ,QAAQ,MAAM,iBAAiB,SAAA,CAAA,UACzCgE,EAAM,MAAM,UAAQA,EAAM,GAAG,eAAA,EAAiB,UAAQA,EAAM,GAAG,eAAA,CAAe,EACxF,EACAnE,EAAAA,KAACG,EAAA,CAAW,QAAQ,QAAQ,MAAM,iBAAiB,SAAA,CAAA,WACxCgE,EAAM,MAAA,CAAA,CACjB,CAAA,CAAA,CACF,CAAA,CAAA,EAGJzE,EAAAA,IAACC,EAAA,CACC,MAAOwE,EAAM,OACb,MAAO1E,EAAe0E,EAAM,MAAM,EAClC,KAAK,OAAA,CAAA,CACP,EACF,EACCP,EAAQzC,EAAK,WAAW,OAAS,SAAM+C,EAAA,CAAA,CAAQ,CAAA,CAAA,EAxB7BN,CAyBrB,CACD,CAAA,CACH,CAAA,CAAA,CACF,EACF,CAAA,CACF,CAAA,EACF,EAGA5D,EAAAA,KAAC2C,EAAA,CAAK,UAAS,GAAC,QAAS,EACvB,SAAA,CAAAjD,EAAAA,IAACiD,EAAA,CAAK,KAAI,GAAC,GAAI,GAAI,GAAI,EACrB,SAAAjD,EAAAA,IAACkD,EAAA,CACC,SAAA5C,EAAAA,KAAC6C,EAAA,CACC,SAAA,CAAAnD,MAACS,EAAA,CAAW,QAAQ,KAAK,aAAY,GAAC,SAAA,gBAEtC,EACAT,EAAAA,IAACgE,EAAA,CACE,SAAAvC,EAAK,aAAa,IAAI,CAACa,EAAO4B,IAC7B5D,EAAAA,KAAC6D,GAAM,SAAN,CACC,SAAA,CAAA7D,OAAC8D,EAAA,CACC,SAAA,CAAApE,EAAAA,IAACqE,EAAA,CACE,SAAA5B,GAAgBH,EAAM,QAAQ,EACjC,EACAtC,EAAAA,IAACuE,EAAA,CACC,QAASjC,EAAM,QACf,UAAWA,EAAM,IAAA,CAAA,CACnB,EACF,EACC4B,EAAQzC,EAAK,aAAa,OAAS,SAAM+C,EAAA,CAAA,CAAQ,CAAA,CAAA,EAV/BN,CAWrB,CACD,CAAA,CACH,CAAA,CAAA,CACF,EACF,EACF,EAEAlE,EAAAA,IAACiD,EAAA,CAAK,KAAI,GAAC,GAAI,GAAI,GAAI,EACrB,SAAAjD,EAAAA,IAACkD,EAAA,CACC,SAAA5C,EAAAA,KAAC6C,EAAA,CACC,SAAA,CAAAnD,MAACS,EAAA,CAAW,QAAQ,KAAK,aAAY,GAAC,SAAA,aAEtC,EACAT,MAAC2E,EAAA,CACC,SAAArE,EAAAA,KAACsE,EAAA,CAAM,KAAK,QACV,SAAA,CAAA5E,EAAAA,IAAC6E,EAAA,CACC,gBAACC,EAAA,CACC,SAAA,CAAA9E,EAAAA,IAAC+E,GAAU,SAAA,aAAA,CAAW,EACtB/E,EAAAA,IAAC+E,GAAU,SAAA,UAAA,CAAQ,EACnB/E,EAAAA,IAAC+E,GAAU,SAAA,UAAA,CAAQ,EACnB/E,EAAAA,IAAC+E,GAAU,SAAA,QAAA,CAAM,CAAA,CAAA,CACnB,CAAA,CACF,QACCC,EAAA,CACE,SAAAvD,EAAK,UACH,MAAME,EAAOE,EAAaF,EAAOE,EAAcA,CAAW,EAC1D,IAAI,CAACoD,EAAOf,WACVY,EAAA,CACC,SAAA,CAAA9E,EAAAA,IAAC+E,EAAA,CAAW,WAAM,WAAA,CAAY,EAC9B/E,EAAAA,IAAC+E,EAAA,CAAW,SAAAE,EAAM,OAAA,CAAQ,QACzBF,EAAA,CACC,SAAA/E,EAAAA,IAACC,EAAA,CACC,MAAOgF,EAAM,SACb,KAAK,QACL,MAAM,SAAA,CAAA,EAEV,EACAjF,EAAAA,IAAC+E,EAAA,CAAW,SAAAE,EAAM,MAAA,CAAO,CAAA,CAAA,EAVZf,CAWf,CACD,CAAA,CACL,CAAA,CAAA,CACF,CAAA,CACF,EACAlE,EAAAA,IAACkF,GAAA,CACC,mBAAoB,CAAC,EAAG,GAAI,EAAE,EAC9B,UAAU,MACV,MAAOzD,EAAK,UAAU,OACtB,YAAAI,EACA,KAAAF,EACA,aAAcU,EACd,oBAAqBG,EAAA,CAAA,CACvB,CAAA,CACF,EACF,CAAA,CACF,CAAA,CAAA,CACF,CAAA,EACF,CAEJ,ECviBM2C,GAA4B,WAE7B5E,EAAA,CACC,SAAA,CAAAP,MAACS,EAAA,CAAW,QAAQ,KAAK,UAAU,KAAK,SAAA,mBAExC,QACCA,EAAA,CAAW,QAAQ,QAAQ,MAAM,iBAAiB,SAAA,0DAAA,CAEnD,CAAA,EACF,ECIE2E,EAAwC,CAAC,CAC7C,MAAAzE,EACA,MAAA0E,EACA,SAAAC,EACA,KAAAC,EACA,MAAAC,EAAQ,UACR,MAAAC,EACA,WAAAC,EACA,QAAAC,EACA,QAAAC,CACF,IAAM,CACJ,MAAMC,EAAe,IAAM,CACzB,OAAQJ,EAAA,CACN,IAAK,KACH,OAAOzF,EAAAA,IAAC8F,GAAA,CAAe,MAAM,SAAA,CAAU,EACzC,IAAK,OACH,OAAO9F,EAAAA,IAAC+F,GAAA,CAAiB,MAAM,OAAA,CAAQ,EACzC,QACE,OAAO,IAAA,CAEb,EAEMC,EAAgB,IAAM,CAC1B,OAAQP,EAAA,CACN,IAAK,KACH,MAAO,eACT,IAAK,OACH,MAAO,aACT,QACE,MAAO,gBAAA,CAEb,EAEMQ,EACJjG,EAAAA,IAACkD,EAAA,CACC,GAAI,CACF,OAAQ,OACR,OAAQyC,EAAU,UAAY,UAC9B,WAAY,0DACZ,UAAWA,EAAU,CACnB,UAAW,mBACX,UAAW,CAAA,EACT,CAAA,CAAC,EAEP,QAAAA,EAEA,gBAACxC,EAAA,CACC,SAAA,CAAA7C,EAAAA,KAACC,EAAA,CAAI,QAAQ,OAAO,eAAe,gBAAgB,WAAW,aAAa,GAAI,EAC7E,SAAA,CAAAD,OAACC,EAAA,CACC,SAAA,CAAAP,EAAAA,IAACS,GAAW,QAAQ,KAAK,MAAM,iBAAiB,aAAY,GACzD,SAAAE,CAAA,CACH,EACAX,EAAAA,IAACS,EAAA,CACC,QAAQ,KACR,MAAO,GAAG+E,CAAK,QACf,WAAW,OAEV,SAAA,OAAOH,GAAU,SAAWA,EAAM,iBAAmBA,CAAA,CAAA,CACxD,EACF,EACCE,GACCvF,EAAAA,IAACO,EAAA,CAAI,MAAO,GAAGiF,CAAK,QACjB,SAAAD,CAAA,CACH,CAAA,EAEJ,EAECD,SACE7E,EAAA,CAAW,QAAQ,QAAQ,MAAM,iBAAiB,aAAY,GAC5D,SAAA6E,CAAA,CACH,EAGDG,GAASC,GACRpF,OAACC,EAAA,CAAI,QAAQ,OAAO,WAAW,SAAS,IAAK,GAC1C,SAAA,CAAAsF,EAAA,EACD7F,EAAAA,IAACS,EAAA,CACC,QAAQ,QACR,MAAOuF,EAAA,EACP,WAAW,SAEV,SAAAN,CAAA,CAAA,CACH,CAAA,CACF,CAAA,CAAA,CAEJ,CAAA,CAAA,EAIJ,OAAIE,QAEC9C,EAAA,CAAQ,MAAO8C,EAAS,MAAK,GAC3B,SAAAK,EACH,EAIGA,CACT,EC5BMC,GAAoB,CACxB,WAAY,CACV,OAAQ,YACR,SAAU,gCACV,QAAS,SACT,SAAU,sBACV,OAAQ,YAAA,EAEV,UAAW,CACT,UAAW,CACT,CACE,GAAI,sBACJ,KAAM,gBACN,OAAQ,UACR,KAAM,YACN,KAAM,aACN,KAAM,EACN,OAAQ,EACR,QAAS,GACT,QAAS,eACT,SAAU,eACV,UAAW,YACX,GAAI,eACJ,QAAS,sBACT,KAAM,CAAC,MAAO,aAAc,OAAO,CAAA,EAErC,CACE,GAAI,sBACJ,KAAM,eACN,OAAQ,UACR,KAAM,WACN,KAAM,aACN,KAAM,EACN,OAAQ,GACR,QAAS,IACT,QAAS,eACT,SAAU,eACV,UAAW,YACX,GAAI,eACJ,QAAS,sBACT,KAAM,CAAC,WAAY,aAAc,YAAY,CAAA,EAE/C,CACE,GAAI,qBACJ,KAAM,kBACN,OAAQ,UACR,KAAM,WACN,KAAM,aACN,KAAM,EACN,OAAQ,EACR,QAAS,GACT,QAAS,eACT,SAAU,eACV,UAAW,YACX,GAAI,eACJ,QAAS,sBACT,KAAM,CAAC,QAAS,UAAW,OAAO,CAAA,CACpC,EAEF,SAAU,CACR,CACE,GAAI,eACJ,KAAM,iBACN,KAAM,cACN,OAAQ,YACR,QAAS,EACT,UAAW,GACX,OAAQ,YACR,QAAS,sBACT,KAAM,CAAC,aAAc,KAAK,CAAA,EAE5B,CACE,GAAI,eACJ,KAAM,cACN,KAAM,gBACN,OAAQ,YACR,QAAS,EACT,UAAW,EACX,OAAQ,YACR,QAAS,sBACT,KAAM,CAAC,UAAW,MAAM,CAAA,CAC1B,EAEF,SAAU,CACR,CACE,GAAI,wBACJ,KAAM,cACN,KAAM,IACN,KAAM,MACN,OAAQ,SACR,SAAU,sBACV,KAAM,aACN,QAAS,sBACT,KAAM,CAAC,MAAO,MAAM,CAAA,EAEtB,CACE,GAAI,wBACJ,KAAM,aACN,KAAM,IACN,KAAM,MACN,OAAQ,SACR,SAAU,sBACV,KAAM,aACN,QAAS,sBACT,KAAM,CAAC,WAAY,MAAM,CAAA,CAC3B,EAEF,cAAe,CACb,CACE,GAAI,uBACJ,KAAM,YACN,OAAQ,SACR,KAAM,cACN,OAAQ,kBACR,IAAK,eACL,UAAW,EACX,UAAW,EACX,aAAc,EACd,QAAS,sBACT,KAAM,CAAC,MAAO,YAAY,CAAA,CAC5B,CACF,EAEF,QAAS,CACP,UAAW,CACT,MAAO,GACP,QAAS,GACT,QAAS,EACT,QAAS,CAAA,EAEX,SAAU,CACR,MAAO,EACP,UAAW,EACX,QAAS,CAAA,EAEX,QAAS,CACP,MAAO,GACP,MAAO,GACP,UAAW,EACX,UAAW,IAAA,EAEb,cAAe,CACb,MAAO,EACP,OAAQ,EACR,SAAU,CAAA,CACZ,EAEF,YAAa,CACX,CAAE,KAAM,QAAS,IAAK,GAAI,OAAQ,GAAI,QAAS,GAAI,QAAS,EAAA,EAC5D,CAAE,KAAM,QAAS,IAAK,GAAI,OAAQ,GAAI,QAAS,GAAI,QAAS,EAAA,EAC5D,CAAE,KAAM,QAAS,IAAK,GAAI,OAAQ,GAAI,QAAS,GAAI,QAAS,EAAA,EAC5D,CAAE,KAAM,QAAS,IAAK,GAAI,OAAQ,GAAI,QAAS,GAAI,QAAS,EAAA,EAC5D,CAAE,KAAM,QAAS,IAAK,GAAI,OAAQ,GAAI,QAAS,GAAI,QAAS,EAAA,EAC5D,CAAE,KAAM,QAAS,IAAK,GAAI,OAAQ,GAAI,QAAS,GAAI,QAAS,EAAA,CAAG,EAEjE,aAAc,CACZ,CAAE,KAAM,WAAY,KAAM,OAAQ,QAAS,uCAAwC,SAAU,MAAA,EAC7F,CAAE,KAAM,WAAY,KAAM,UAAW,QAAS,iDAAkD,SAAU,SAAA,EAC1G,CAAE,KAAM,WAAY,KAAM,UAAW,QAAS,yDAA0D,SAAU,SAAA,EAClH,CAAE,KAAM,WAAY,KAAM,QAAS,QAAS,mDAAoD,SAAU,OAAA,EAC1G,CAAE,KAAM,WAAY,KAAM,OAAQ,QAAS,gDAAiD,SAAU,MAAA,CAAO,CAEjH,EAQA,SAASC,EAASC,EAAsB,CACtC,KAAM,CAAE,SAAAC,EAAU,MAAAhB,EAAO,MAAAnB,EAAO,GAAGoC,GAAUF,EAC7C,OACEpG,EAAAA,IAAC,MAAA,CACC,KAAK,WACL,OAAQqF,IAAUnB,EAClB,GAAI,sBAAsBA,CAAK,GAC/B,kBAAiB,iBAAiBA,CAAK,GACtC,GAAGoC,EAEH,SAAAjB,IAAUnB,GAASlE,EAAAA,IAACO,EAAA,CAAI,GAAI,CAAE,EAAG,CAAA,EAAM,SAAA8F,CAAA,CAAS,CAAA,CAAA,CAGvD,CAEA,MAAME,GAAsB,IAAM,CAChC,KAAM,CAACnF,EAASC,CAAU,EAAIC,EAAAA,SAAS,EAAI,EACrC,CAACC,EAAOC,CAAQ,EAAIF,EAAAA,SAAwB,IAAI,EAChD,CAACG,EAAMC,CAAO,EAAIJ,EAAAA,SAAS4E,EAAiB,EAC5C,CAACM,EAAUC,CAAW,EAAInF,EAAAA,SAAS,CAAC,EACpC,CAACK,EAAMC,CAAO,EAAIN,EAAAA,SAAS,CAAC,EAC5B,CAACO,EAAaC,CAAc,EAAIR,EAAAA,SAAS,EAAE,EAC3C,CAACoF,GAAkBC,CAAmB,EAAIrF,EAAAA,SAAS,EAAK,EACxD,CAACsF,GAAkBC,CAAmB,EAAIvF,EAAAA,SAAwB,IAAI,EAE5ES,EAAAA,UAAU,IAAM,CACd,MAAMC,EAAY,SAAY,CAC5B,GAAI,CACFX,EAAW,EAAI,EACfG,EAAS,IAAI,EAGb,MAAM,IAAI,QAAQS,GAAW,WAAWA,EAAS,GAAI,CAAC,EAOtDP,EAAQwE,EAAiB,EACzB7E,EAAW,EAAK,CAClB,OAASa,EAAK,CACZ,QAAQ,MAAM,kCAAmCA,CAAG,EACpDV,EAASU,aAAe,MAAQA,EAAI,QAAU,eAAe,EAC7Db,EAAW,EAAK,CAClB,CACF,EAEAW,EAAA,EAGA,MAAMG,EAAW,YAAYH,EAAW,GAAK,EAC7C,MAAO,IAAM,cAAcG,CAAQ,CACrC,EAAG,CAAA,CAAE,EAEL,MAAMC,EAAgB,IAAM,CAC1Bf,EAAW,EAAI,EAEf,OAAO,SAAS,OAAA,CAClB,EAEMyF,EAAkB,CAACxE,EAA6ByE,IAAqB,CACzEN,EAAYM,CAAQ,CACtB,EAEM1E,EAAmB,CAACC,EAAgBC,IAAoB,CAC5DX,EAAQW,CAAO,CACjB,EAEMC,GAA2BF,GAA+C,CAC9ER,EAAe,SAASQ,EAAM,OAAO,MAAO,EAAE,CAAC,EAC/CV,EAAQ,CAAC,CACX,EAEM7B,EAAkBH,GAAmB,CACzC,OAAQA,EAAO,cAAY,CACzB,IAAK,UACL,IAAK,SACL,IAAK,YACL,IAAK,SACL,IAAK,YACH,MAAO,UACT,IAAK,UACL,IAAK,WACL,IAAK,eACH,MAAO,QACT,IAAK,UACL,IAAK,UACH,MAAO,UACT,QACE,MAAO,SAAA,CAEb,EAEM6C,EAAmB5B,GAAqB,CAC5C,OAAQA,EAAA,CACN,IAAK,UACH,OAAOb,EAAAA,IAAC0C,GAAA,CAAgB,MAAM,SAAA,CAAU,EAC1C,IAAK,UACH,OAAO1C,EAAAA,IAAC2C,GAAA,CAAY,MAAM,SAAA,CAAU,EACtC,IAAK,QACH,OAAO3C,EAAAA,IAAC4C,GAAA,CAAU,MAAM,OAAA,CAAQ,EAClC,QACE,OAAO5C,EAAAA,IAAC6C,GAAA,CAAS,MAAM,MAAA,CAAO,CAAA,CAEpC,EAEA,OAAIzB,EAEApB,EAAAA,IAACO,EAAA,CAAI,QAAQ,OAAO,eAAe,SAAS,WAAW,SAAS,UAAU,QACxE,SAAAP,MAACE,GAAA,CAAe,KAAM,GAAI,EAC5B,EAIAqB,EACKvB,EAAAA,IAACU,GAAA,CAAa,QAASa,CAAA,CAAO,SAIpChB,EAAA,CAEC,SAAA,CAAAD,EAAAA,KAACC,EAAA,CAAI,QAAQ,OAAO,eAAe,gBAAgB,WAAW,SAAS,GAAI,EACzE,SAAA,CAAAP,MAACS,EAAA,CAAW,QAAQ,KAAK,UAAU,KAAK,SAAA,wBAExC,SACCF,EAAA,CACC,SAAA,CAAAP,EAAAA,IAAC8C,EAAA,CAAQ,MAAM,UACb,SAAA9C,EAAAA,IAAC+C,EAAA,CAAW,QAASX,EAAe,SAAUhB,EAC5C,SAAApB,EAAAA,IAACgB,GAAA,CAAA,CAAY,CAAA,CACf,EACF,EACAhB,EAAAA,IAAC8C,GAAQ,MAAM,WACb,eAACC,EAAA,CACC,SAAA/C,EAAAA,IAACgD,GAAA,CAAA,CAAa,CAAA,CAChB,CAAA,CACF,CAAA,CAAA,CACF,CAAA,EACF,EAGA1C,EAAAA,KAACQ,GAAA,CACC,SAAUW,EAAK,WAAW,SAAW,YAAc,UAAY,QAC/D,GAAI,CAAE,GAAI,CAAA,EACV,OACEzB,EAAAA,IAACe,EAAA,CAAO,MAAM,UAAU,KAAK,QAAQ,SAAA,YAErC,EAGF,SAAA,CAAAT,EAAAA,KAACG,EAAA,CAAW,QAAQ,KAAK,SAAA,CAAA,aACZgB,EAAK,WAAW,SAAW,YAAc,YAAc,cAAA,EACpE,EACAnB,EAAAA,KAACG,EAAA,CAAW,QAAQ,QAAQ,SAAA,CAAA,aACfgB,EAAK,WAAW,SAAS,eAAaA,EAAK,WAAW,QAAQ,iBAC7DA,EAAK,WAAW,QAAA,CAAA,CAC9B,CAAA,CAAA,CAAA,SAIDwB,EAAA,CAAK,UAAS,GAAC,QAAS,EAAG,GAAI,EAC9B,SAAA,CAAAjD,EAAAA,IAACiD,EAAA,CAAK,KAAI,GAAC,GAAI,GAAI,GAAI,EAAG,GAAI,EAC5B,SAAAjD,EAAAA,IAACoF,EAAA,CACC,MAAM,YACN,MAAO3D,EAAK,QAAQ,UAAU,MAC9B,SAAU,GAAGA,EAAK,QAAQ,UAAU,OAAO,aAAaA,EAAK,QAAQ,UAAU,OAAO,WACtF,WAAOuF,GAAA,EAAa,EACpB,MAAM,SAAA,CAAA,EAEV,EACAhH,EAAAA,IAACiD,GAAK,KAAI,GAAC,GAAI,GAAI,GAAI,EAAG,GAAI,EAC5B,SAAAjD,EAAAA,IAACoF,EAAA,CACC,MAAM,WACN,MAAO3D,EAAK,QAAQ,SAAS,MAC7B,SAAU,GAAGA,EAAK,QAAQ,SAAS,SAAS,eAAeA,EAAK,QAAQ,SAAS,OAAO,WACxF,WAAO6C,EAAA,EAAiB,EACxB,MAAM,SAAA,CAAA,EAEV,EACAtE,EAAAA,IAACiD,GAAK,KAAI,GAAC,GAAI,GAAI,GAAI,EAAG,GAAI,EAC5B,SAAAjD,EAAAA,IAACoF,EAAA,CACC,MAAM,UACN,MAAO3D,EAAK,QAAQ,QAAQ,MAC5B,SAAU,GAAGA,EAAK,QAAQ,QAAQ,SAAS,cAAcA,EAAK,QAAQ,QAAQ,KAAK,UACnF,WAAOwF,GAAA,EAAY,EACnB,MAAM,SAAA,CAAA,EAEV,EACAjH,EAAAA,IAACiD,GAAK,KAAI,GAAC,GAAI,GAAI,GAAI,EAAG,GAAI,EAC5B,SAAAjD,EAAAA,IAACoF,EAAA,CACC,MAAM,iBACN,MAAO3D,EAAK,QAAQ,cAAc,MAClC,SAAU,GAAGA,EAAK,QAAQ,cAAc,MAAM,YAAYA,EAAK,QAAQ,cAAc,QAAQ,YAC7F,WAAO8B,GAAA,EAAU,EACjB,MAAM,MAAA,CAAA,CACR,CACF,CAAA,EACF,EAGAvD,EAAAA,IAACkH,EAAA,CAAM,GAAI,CAAE,GAAI,CAAA,EACf,SAAA5G,EAAAA,KAAC6G,GAAA,CAAK,MAAOX,EAAU,SAAUM,EAAiB,aAAW,iBAC3D,SAAA,CAAA9G,MAACoH,GAAI,MAAM,YAAY,KAAMpH,MAACgH,KAAa,EAAI,QAC9CI,EAAA,CAAI,MAAM,WAAW,KAAMpH,MAACsE,IAAiB,EAAI,QACjD8C,EAAA,CAAI,MAAM,UAAU,KAAMpH,MAACiH,KAAY,EAAI,QAC3CG,EAAA,CAAI,MAAM,iBAAiB,KAAMpH,MAACuD,KAAU,EAAI,QAChD6D,EAAA,CAAI,MAAM,cAAc,KAAMpH,MAACqH,KAAa,EAAI,QAChDD,EAAA,CAAI,MAAM,SAAS,KAAMpH,EAAAA,IAACsH,KAAe,CAAA,CAAI,CAAA,CAAA,CAChD,CAAA,CACF,EAGAhH,EAAAA,KAAC6F,EAAA,CAAS,MAAOK,EAAU,MAAO,EAChC,SAAA,CAAAlG,EAAAA,KAACC,EAAA,CAAI,QAAQ,OAAO,eAAe,gBAAgB,WAAW,SAAS,GAAI,EACzE,SAAA,CAAAP,EAAAA,IAACS,EAAA,CAAW,QAAQ,KAAK,SAAA,YAAS,EAClCT,EAAAA,IAACe,EAAA,CACC,QAAQ,YACR,gBAAYwG,EAAA,EAAQ,EACpB,QAAS,IAAMZ,EAAoB,EAAI,EACxC,SAAA,iBAAA,CAAA,CAED,EACF,EAEA3G,MAAC2E,EAAA,CAAe,UAAWuC,EACzB,gBAACtC,EAAA,CACC,SAAA,CAAA5E,EAAAA,IAAC6E,EAAA,CACC,gBAACC,EAAA,CACC,SAAA,CAAA9E,EAAAA,IAAC+E,GAAU,SAAA,MAAA,CAAI,EACf/E,EAAAA,IAAC+E,GAAU,SAAA,QAAA,CAAM,EACjB/E,EAAAA,IAAC+E,GAAU,SAAA,MAAA,CAAI,EACf/E,EAAAA,IAAC+E,GAAU,SAAA,MAAA,CAAI,EACf/E,EAAAA,IAAC+E,GAAU,SAAA,YAAA,CAAU,EACrB/E,EAAAA,IAAC+E,GAAU,SAAA,IAAA,CAAE,EACb/E,EAAAA,IAAC+E,GAAU,SAAA,SAAA,CAAO,CAAA,CAAA,CACpB,CAAA,CACF,QACCC,EAAA,CACE,SAAAvD,EAAK,UAAU,UACb,MAAME,EAAOE,EAAaF,EAAOE,EAAcA,CAAW,EAC1D,IAAK2F,UACH1C,EAAA,CACC,SAAA,CAAA9E,EAAAA,IAAC+E,GACC,SAAAzE,OAACC,EAAA,CAAI,QAAQ,OAAO,WAAW,SAC7B,SAAA,CAAAP,EAAAA,IAACgH,GAAA,CAAa,GAAI,CAAE,GAAI,GAAK,EAC5BQ,EAAS,IAAA,CAAA,CACZ,CAAA,CACF,QACCzC,EAAA,CACC,SAAA/E,EAAAA,IAACC,EAAA,CACC,MAAOuH,EAAS,OAChB,MAAOzH,EAAeyH,EAAS,MAAM,EACrC,KAAK,OAAA,CAAA,EAET,EACAxH,EAAAA,IAAC+E,EAAA,CAAW,SAAAyC,EAAS,IAAA,CAAK,EAC1BxH,EAAAA,IAAC+E,EAAA,CAAW,SAAAyC,EAAS,IAAA,CAAK,EAC1BxH,EAAAA,IAAC+E,EAAA,CACC,SAAAzE,EAAAA,KAACC,EAAA,CACC,SAAA,CAAAD,EAAAA,KAACG,EAAA,CAAW,QAAQ,QAAQ,SAAA,CAAA,WAAS+G,EAAS,QAAA,EAAS,EACvDlH,EAAAA,KAACG,EAAA,CAAW,QAAQ,QAAQ,SAAA,CAAA,YAAU+G,EAAS,SAAA,CAAA,CAAU,CAAA,CAAA,CAC3D,CAAA,CACF,EACAxH,EAAAA,IAAC+E,EAAA,CAAW,SAAAyC,EAAS,EAAA,CAAG,SACvBzC,EAAA,CACC,SAAA,CAAA/E,MAAC+C,EAAA,CAAW,KAAK,QACf,SAAA/C,MAACyH,IAAS,EACZ,QACC1E,EAAA,CAAW,KAAK,QACf,SAAA/C,EAAAA,IAAC0H,IAAW,CAAA,CACd,CAAA,CAAA,CACF,CAAA,GA9BaF,EAAS,EA+BxB,CACD,CAAA,CACL,CAAA,CAAA,CACF,CAAA,CACF,EAEAxH,EAAAA,IAACkF,GAAA,CACC,mBAAoB,CAAC,EAAG,GAAI,EAAE,EAC9B,UAAU,MACV,MAAOzD,EAAK,UAAU,UAAU,OAChC,YAAAI,EACA,KAAAF,EACA,aAAcU,EACd,oBAAqBG,EAAA,CAAA,CACvB,EACF,EAGAlC,EAAAA,KAAC6F,EAAA,CAAS,MAAOK,EAAU,MAAO,EAChC,SAAA,CAAAlG,EAAAA,KAACC,EAAA,CAAI,QAAQ,OAAO,eAAe,gBAAgB,WAAW,SAAS,GAAI,EACzE,SAAA,CAAAP,EAAAA,IAACS,EAAA,CAAW,QAAQ,KAAK,SAAA,WAAQ,EACjCT,EAAAA,IAACe,EAAA,CACC,QAAQ,YACR,gBAAYwG,EAAA,EAAQ,EACpB,QAAS,IAAMZ,EAAoB,EAAI,EACxC,SAAA,gBAAA,CAAA,CAED,EACF,EAEA3G,EAAAA,IAACiD,GAAK,UAAS,GAAC,QAAS,EACtB,SAAAxB,EAAK,UAAU,SAAS,IAAKkG,GAC5B3H,EAAAA,IAACiD,EAAA,CAAK,KAAI,GAAC,GAAI,GAAI,GAAI,EACrB,SAAAjD,EAAAA,IAACkD,EAAA,CACC,SAAA5C,EAAAA,KAAC6C,EAAA,CACC,SAAA,CAAA7C,EAAAA,KAACC,EAAA,CAAI,QAAQ,OAAO,eAAe,gBAAgB,WAAW,SAAS,GAAI,EACzE,SAAA,CAAAP,EAAAA,IAACS,EAAA,CAAW,QAAQ,KAAM,SAAAkH,EAAQ,KAAK,EACvC3H,EAAAA,IAACC,EAAA,CACC,MAAO0H,EAAQ,OACf,MAAO5H,EAAe4H,EAAQ,MAAM,EACpC,KAAK,OAAA,CAAA,CACP,EACF,SACClH,EAAA,CAAW,QAAQ,QAAQ,MAAM,iBAAiB,aAAY,GAAC,SAAA,CAAA,SACvDkH,EAAQ,IAAA,EACjB,SACClH,EAAA,CAAW,QAAQ,QAAQ,MAAM,iBAAiB,aAAY,GAAC,SAAA,CAAA,WACrDkH,EAAQ,MAAA,EACnB,SACClH,EAAA,CAAW,QAAQ,QAAQ,MAAM,iBAAiB,aAAY,GAAC,SAAA,CAAA,YACpDkH,EAAQ,QAAQ,iBAAeA,EAAQ,SAAA,EACnD,EACArH,EAAAA,KAACG,EAAA,CAAW,QAAQ,QAAQ,MAAM,iBAAiB,SAAA,CAAA,YACvCkH,EAAQ,OAAA,EACpB,EACA3H,EAAAA,IAACO,EAAA,CAAI,GAAI,EACN,SAAAoH,EAAQ,KAAK,IAAI,CAACC,EAAK1D,IACtBlE,EAAAA,IAACC,EAAA,CAAiB,MAAO2H,EAAK,KAAK,QAAQ,GAAI,CAAE,GAAI,EAAG,GAAI,CAAA,GAAjD1D,CAAsD,CAClE,CAAA,CACH,CAAA,CAAA,CACF,CAAA,CACF,CAAA,EA7B6ByD,EAAQ,EA8BvC,CACD,CAAA,CACH,CAAA,EACF,EAGArH,EAAAA,KAAC6F,EAAA,CAAS,MAAOK,EAAU,MAAO,EAChC,SAAA,CAAAlG,EAAAA,KAACC,EAAA,CAAI,QAAQ,OAAO,eAAe,gBAAgB,WAAW,SAAS,GAAI,EACzE,SAAA,CAAAP,EAAAA,IAACS,EAAA,CAAW,QAAQ,KAAK,SAAA,UAAO,EAChCT,EAAAA,IAACe,EAAA,CACC,QAAQ,YACR,gBAAYwG,EAAA,EAAQ,EACpB,QAAS,IAAMZ,EAAoB,EAAI,EACxC,SAAA,eAAA,CAAA,CAED,EACF,EAEA3G,MAAC2E,EAAA,CAAe,UAAWuC,EACzB,gBAACtC,EAAA,CACC,SAAA,CAAA5E,EAAAA,IAAC6E,EAAA,CACC,gBAACC,EAAA,CACC,SAAA,CAAA9E,EAAAA,IAAC+E,GAAU,SAAA,MAAA,CAAI,EACf/E,EAAAA,IAAC+E,GAAU,SAAA,QAAA,CAAM,EACjB/E,EAAAA,IAAC+E,GAAU,SAAA,WAAA,CAAS,EACpB/E,EAAAA,IAAC+E,GAAU,SAAA,MAAA,CAAI,EACf/E,EAAAA,IAAC+E,GAAU,SAAA,UAAA,CAAQ,EACnB/E,EAAAA,IAAC+E,GAAU,SAAA,MAAA,CAAI,EACf/E,EAAAA,IAAC+E,GAAU,SAAA,SAAA,CAAO,CAAA,CAAA,CACpB,CAAA,CACF,EACA/E,EAAAA,IAACgF,GACE,SAAAvD,EAAK,UAAU,SAAS,IAAKoG,GAC5BvH,EAAAA,KAACwE,EAAA,CACC,SAAA,CAAA9E,EAAAA,IAAC+E,GACC,SAAAzE,OAACC,EAAA,CAAI,QAAQ,OAAO,WAAW,SAC7B,SAAA,CAAAP,EAAAA,IAACiH,GAAA,CAAY,GAAI,CAAE,GAAI,GAAK,EAC3BY,EAAQ,IAAA,CAAA,CACX,CAAA,CACF,QACC9C,EAAA,CACC,SAAA/E,EAAAA,IAACC,EAAA,CACC,MAAO4H,EAAQ,OACf,MAAO9H,EAAe8H,EAAQ,MAAM,EACpC,KAAK,OAAA,CAAA,EAET,EACA7H,EAAAA,IAAC+E,EAAA,CAAW,SAAA8C,EAAQ,IAAA,CAAK,EACzB7H,EAAAA,IAAC+E,EAAA,CAAW,SAAA8C,EAAQ,IAAA,CAAK,EACzB7H,EAAAA,IAAC+E,EAAA,CAAW,SAAA8C,EAAQ,QAAA,CAAS,EAC7B7H,EAAAA,IAAC+E,EAAA,CAAW,SAAA8C,EAAQ,IAAA,CAAK,SACxB9C,EAAA,CACC,SAAA,CAAA/E,MAAC+C,EAAA,CAAW,KAAK,QACf,SAAA/C,MAACyH,IAAS,EACZ,QACC1E,EAAA,CAAW,KAAK,QACf,SAAA/C,EAAAA,IAAC0H,IAAW,CAAA,CACd,CAAA,CAAA,CACF,CAAA,GAzBaG,EAAQ,EA0BvB,CACD,CAAA,CACH,CAAA,CAAA,CACF,CAAA,CACF,CAAA,EACF,EAGAvH,EAAAA,KAAC6F,EAAA,CAAS,MAAOK,EAAU,MAAO,EAChC,SAAA,CAAAlG,EAAAA,KAACC,EAAA,CAAI,QAAQ,OAAO,eAAe,gBAAgB,WAAW,SAAS,GAAI,EACzE,SAAA,CAAAP,EAAAA,IAACS,EAAA,CAAW,QAAQ,KAAK,SAAA,iBAAc,EACvCT,EAAAA,IAACe,EAAA,CACC,QAAQ,YACR,gBAAYwG,EAAA,EAAQ,EACpB,QAAS,IAAMZ,EAAoB,EAAI,EACxC,SAAA,sBAAA,CAAA,CAED,EACF,EAEA3G,EAAAA,IAACiD,GAAK,UAAS,GAAC,QAAS,EACtB,SAAAxB,EAAK,UAAU,cAAc,IAAKqG,GACjC9H,EAAAA,IAACiD,EAAA,CAAK,KAAI,GAAC,GAAI,GAAI,GAAI,EACrB,SAAAjD,EAAAA,IAACkD,EAAA,CACC,SAAA5C,EAAAA,KAAC6C,EAAA,CACC,SAAA,CAAA7C,EAAAA,KAACC,EAAA,CAAI,QAAQ,OAAO,eAAe,gBAAgB,WAAW,SAAS,GAAI,EACzE,SAAA,CAAAP,EAAAA,IAACS,EAAA,CAAW,QAAQ,KAAM,SAAAqH,EAAG,KAAK,EAClC9H,EAAAA,IAACC,EAAA,CACC,MAAO6H,EAAG,OACV,MAAO/H,EAAe+H,EAAG,MAAM,EAC/B,KAAK,OAAA,CAAA,CACP,EACF,SACCrH,EAAA,CAAW,QAAQ,QAAQ,MAAM,iBAAiB,aAAY,GAAC,SAAA,CAAA,SACvDqH,EAAG,KAAK,cAAYA,EAAG,MAAA,EAChC,SACCrH,EAAA,CAAW,QAAQ,QAAQ,MAAM,iBAAiB,aAAY,GAAC,SAAA,CAAA,QACxDqH,EAAG,GAAA,EACX,SACCrH,EAAA,CAAW,QAAQ,QAAQ,MAAM,iBAAiB,aAAY,GAAC,SAAA,CAAA,cAClDqH,EAAG,UAAU,iBAAeA,EAAG,UAAU,qBAAmBA,EAAG,YAAA,EAC7E,EACAxH,EAAAA,KAACG,EAAA,CAAW,QAAQ,QAAQ,MAAM,iBAAiB,SAAA,CAAA,YACvCqH,EAAG,OAAA,EACf,EACA9H,EAAAA,IAACO,EAAA,CAAI,GAAI,EACN,SAAAuH,EAAG,KAAK,IAAI,CAACF,EAAK1D,IACjBlE,EAAAA,IAACC,EAAA,CAAiB,MAAO2H,EAAK,KAAK,QAAQ,GAAI,CAAE,GAAI,EAAG,GAAI,CAAA,GAAjD1D,CAAsD,CAClE,CAAA,CACH,CAAA,CAAA,CACF,CAAA,CACF,CAAA,EA7B6B4D,EAAG,EA8BlC,CACD,CAAA,CACH,CAAA,EACF,EAGAxH,EAAAA,KAAC6F,EAAA,CAAS,MAAOK,EAAU,MAAO,EAChC,SAAA,CAAAxG,MAACS,EAAA,CAAW,QAAQ,KAAK,aAAY,GAAC,SAAA,sBAEtC,EACAT,EAAAA,IAACwD,GAAA,CAAoB,MAAM,OAAO,OAAQ,IACxC,SAAAlD,EAAAA,KAACmD,GAAA,CAAU,KAAMhC,EAAK,YACpB,SAAA,CAAAzB,EAAAA,IAAC0D,GAAA,CAAc,gBAAgB,KAAA,CAAM,EACrC1D,EAAAA,IAAC2D,GAAA,CAAM,QAAQ,MAAA,CAAO,QACrBC,GAAA,EAAM,QACNC,GAAA,EAAgB,EACjB7D,EAAAA,IAAC8D,EAAA,CAAK,KAAK,WAAW,QAAQ,MAAM,OAAO,UAAU,YAAa,EAAG,KAAK,OAAA,CAAQ,EAClF9D,EAAAA,IAAC8D,EAAA,CAAK,KAAK,WAAW,QAAQ,SAAS,OAAO,UAAU,YAAa,EAAG,KAAK,UAAA,CAAW,EACxF9D,EAAAA,IAAC8D,EAAA,CAAK,KAAK,WAAW,QAAQ,UAAU,OAAO,UAAU,YAAa,EAAG,KAAK,WAAA,CAAY,EAC1F9D,EAAAA,IAAC8D,EAAA,CAAK,KAAK,WAAW,QAAQ,UAAU,OAAO,UAAU,YAAa,EAAG,KAAK,WAAA,CAAY,CAAA,CAAA,CAC5F,CAAA,CACF,CAAA,EACF,EAGAxD,EAAAA,KAAC6F,EAAA,CAAS,MAAOK,EAAU,MAAO,EAChC,SAAA,CAAAxG,MAACS,EAAA,CAAW,QAAQ,KAAK,aAAY,GAAC,SAAA,gBAEtC,EACAT,EAAAA,IAACgE,EAAA,CACE,SAAAvC,EAAK,aAAa,IAAI,CAACa,EAAO4B,IAC7B5D,EAAAA,KAAC6D,GAAM,SAAN,CACC,SAAA,CAAA7D,OAAC8D,EAAA,CACC,SAAA,CAAApE,EAAAA,IAACqE,EAAA,CACE,SAAA5B,EAAgBH,EAAM,QAAQ,EACjC,EACAtC,EAAAA,IAACuE,EAAA,CACC,QAASjC,EAAM,QACf,UAAWA,EAAM,IAAA,CAAA,CACnB,EACF,EACC4B,EAAQzC,EAAK,aAAa,OAAS,SAAM+C,EAAA,CAAA,CAAQ,CAAA,CAAA,EAV/BN,CAWrB,CACD,CAAA,CACH,CAAA,EACF,EAGA5D,EAAAA,KAACyH,GAAA,CAAO,KAAMrB,GAAkB,QAAS,IAAMC,EAAoB,EAAK,EAAG,SAAS,KAAK,UAAS,GAChG,SAAA,CAAA3G,EAAAA,IAACgI,IAAY,SAAA,iBAAA,CAAe,EAC5BhI,EAAAA,IAACiI,GAAA,CACC,SAAAjI,EAAAA,IAACS,EAAA,CAAW,QAAQ,QAAQ,MAAM,iBAAiB,aAAY,GAAC,SAAA,sHAAA,CAGhE,EACF,SACCyH,GAAA,CACC,SAAA,CAAAlI,MAACe,GAAO,QAAS,IAAM4F,EAAoB,EAAK,EAAG,SAAA,SAAM,EACzD3G,EAAAA,IAACe,GAAO,QAAQ,YAAY,QAAS,IAAM4F,EAAoB,EAAK,EAAG,SAAA,QAAA,CAEvE,CAAA,CAAA,CACF,CAAA,CAAA,CACF,CAAA,EACF,CAEJ,EC5pBMwB,GAAmB,CACvB,WAAY,CACV,OAAQ,YACR,aAAc,gBACd,QAAS,QACT,SAAU,sBACV,OAAQ,aACR,OAAQ,YACR,UAAW,cAAA,EAEb,SAAU,CACR,QAAS,CACP,CACE,GAAI,wBACJ,KAAM,qBACN,OAAQ,UACR,KAAM,YACN,OAAQ,YACR,IAAK,eACL,SAAU,gBACV,UAAW,aACX,IAAK,MACL,UAAW,GACX,SAAU,SACV,QAAS,EACT,OAAQ,KACR,QAAS,sBACT,KAAM,CAAC,UAAW,aAAc,aAAa,CAAA,EAE/C,CACE,GAAI,wBACJ,KAAM,qBACN,OAAQ,UACR,KAAM,WACN,OAAQ,YACR,IAAK,eACL,SAAU,gBACV,UAAW,aACX,IAAK,MACL,UAAW,GACX,SAAU,UACV,QAAS,EACT,OAAQ,IACR,QAAS,sBACT,KAAM,CAAC,UAAW,aAAc,aAAa,CAAA,CAC/C,EAEF,MAAO,CACL,CACE,GAAI,wBACJ,KAAM,mBACN,OAAQ,UACR,KAAM,WACN,OAAQ,YACR,IAAK,eACL,SAAU,gBACV,UAAW,aACX,IAAK,MACL,UAAW,GACX,SAAU,MACV,QAAS,EACT,OAAQ,IACR,QAAS,sBACT,KAAM,CAAC,QAAS,aAAc,KAAK,CAAA,EAErC,CACE,GAAI,wBACJ,KAAM,mBACN,OAAQ,UACR,KAAM,WACN,OAAQ,YACR,IAAK,eACL,SAAU,gBACV,UAAW,aACX,IAAK,MACL,UAAW,GACX,SAAU,MACV,QAAS,EACT,OAAQ,EACR,QAAS,sBACT,KAAM,CAAC,QAAS,UAAW,MAAM,CAAA,CACnC,CACF,EAEF,QAAS,CACP,CACE,GAAI,2BACJ,KAAM,YACN,OAAQ,KACR,OAAQ,qBACR,YAAa,mBACb,SAAU,gBACV,cAAe,gBACf,SAAU,QACV,WAAY,UACZ,eAAgB,UAChB,IAAK,WACL,QAAS,GACT,UAAW,IACX,UAAW,MACX,WAAY,KACZ,QAAS,MACT,SAAU,KACV,QAAS,sBACT,WAAY,qBAAA,EAEd,CACE,GAAI,2BACJ,KAAM,YACN,OAAQ,KACR,OAAQ,qBACR,YAAa,qBACb,SAAU,gBACV,cAAe,gBACf,SAAU,QACV,WAAY,UACZ,eAAgB,UAChB,IAAK,WACL,QAAS,GACT,UAAW,IACX,UAAW,KACX,WAAY,KACZ,QAAS,KACT,SAAU,MACV,QAAS,sBACT,WAAY,qBAAA,CACd,EAEF,SAAU,CACR,SAAU,CACR,CACE,GAAI,2BACJ,KAAM,mBACN,OAAQ,SACR,OAAQ,cACR,YAAa,aACb,SAAU,MACV,KAAM,KACN,OAAQ,QACR,SAAU,IACV,QAAS,sBACT,aAAc,qBAAA,EAEhB,CACE,GAAI,2BACJ,KAAM,kBACN,OAAQ,SACR,OAAQ,MACR,YAAa,MACb,SAAU,MACV,KAAM,MACN,OAAQ,OACR,SAAU,IACV,QAAS,sBACT,aAAc,qBAAA,CAChB,EAEF,MAAO,CACL,CACE,GAAI,yBACJ,KAAM,YACN,OAAQ,SACR,OAAQ,gBACR,YAAa,MACb,SAAU,MACV,KAAM,GACN,OAAQ,QACR,SAAU,GACV,QAAS,sBACT,aAAc,qBAAA,CAChB,CACF,EAEF,QAAS,CACP,SAAU,CACR,MAAO,EACP,QAAS,EACT,QAAS,EACT,QAAS,EACT,MAAO,CAAA,EAET,QAAS,CACP,MAAO,EACP,GAAI,EACJ,KAAM,EACN,eAAgB,IAChB,eAAgB,EAAA,EAElB,SAAU,CACR,SAAU,EACV,MAAO,EACP,eAAgB,KAChB,eAAgB,KAAA,CAClB,EAEF,YAAa,CACX,CAAE,KAAM,QAAS,QAAS,GAAI,UAAW,IAAK,QAAS,IAAM,OAAQ,CAAA,EACrE,CAAE,KAAM,QAAS,QAAS,GAAI,UAAW,IAAK,QAAS,IAAK,OAAQ,CAAA,EACpE,CAAE,KAAM,QAAS,QAAS,GAAI,UAAW,KAAM,QAAS,KAAM,OAAQ,CAAA,EACtE,CAAE,KAAM,QAAS,QAAS,GAAI,UAAW,KAAM,QAAS,IAAM,OAAQ,CAAA,EACtE,CAAE,KAAM,QAAS,QAAS,GAAI,UAAW,IAAM,QAAS,KAAM,OAAQ,CAAA,EACtE,CAAE,KAAM,QAAS,QAAS,GAAI,UAAW,IAAK,QAAS,IAAK,OAAQ,CAAA,CAAE,EAExE,aAAc,CACZ,CAAE,KAAM,WAAY,KAAM,OAAQ,QAAS,+BAAgC,SAAU,MAAA,EACrF,CAAE,KAAM,WAAY,KAAM,UAAW,QAAS,4CAA6C,SAAU,SAAA,EACrG,CAAE,KAAM,WAAY,KAAM,UAAW,QAAS,2CAA4C,SAAU,SAAA,EACpG,CAAE,KAAM,WAAY,KAAM,QAAS,QAAS,uCAAwC,SAAU,OAAA,EAC9F,CAAE,KAAM,WAAY,KAAM,OAAQ,QAAS,mCAAoC,SAAU,MAAA,CAAO,CAEpG,EAQA,SAAShC,GAASC,EAAsB,CACtC,KAAM,CAAE,SAAAC,EAAU,MAAAhB,EAAO,MAAAnB,EAAO,GAAGoC,GAAUF,EAC7C,OACEpG,EAAAA,IAAC,MAAA,CACC,KAAK,WACL,OAAQqF,IAAUnB,EAClB,GAAI,qBAAqBA,CAAK,GAC9B,kBAAiB,gBAAgBA,CAAK,GACrC,GAAGoC,EAEH,SAAAjB,IAAUnB,GAASlE,EAAAA,IAACO,EAAA,CAAI,GAAI,CAAE,EAAG,CAAA,EAAM,SAAA8F,CAAA,CAAS,CAAA,CAAA,CAGvD,CAEA,MAAM+B,GAAqB,IAAM,CAC/B,KAAM,CAAChH,EAASC,CAAU,EAAIC,EAAAA,SAAS,EAAI,EACrC,CAACC,EAAOC,CAAQ,EAAIF,EAAAA,SAAwB,IAAI,EAChD,CAACG,EAAMC,CAAO,EAAIJ,EAAAA,SAAS6G,EAAgB,EAC3C,CAAC3B,EAAUC,CAAW,EAAInF,EAAAA,SAAS,CAAC,EACpC,CAACK,EAAMC,CAAO,EAAIN,EAAAA,SAAS,CAAC,EAC5B,CAACO,EAAaC,CAAc,EAAIR,EAAAA,SAAS,EAAE,EAC3C,CAACoF,GAAkBC,CAAmB,EAAIrF,EAAAA,SAAS,EAAK,EACxD,CAACsF,GAAkBC,CAAmB,EAAIvF,EAAAA,SAAwB,IAAI,EAE5ES,EAAAA,UAAU,IAAM,CACd,MAAMC,EAAY,SAAY,CAC5B,GAAI,CACFX,EAAW,EAAI,EACfG,EAAS,IAAI,EAGb,MAAM,IAAI,QAAQS,GAAW,WAAWA,EAAS,GAAI,CAAC,EAOtDP,EAAQyG,EAAgB,EACxB9G,EAAW,EAAK,CAClB,OAASa,EAAK,CACZ,QAAQ,MAAM,iCAAkCA,CAAG,EACnDV,EAASU,aAAe,MAAQA,EAAI,QAAU,eAAe,EAC7Db,EAAW,EAAK,CAClB,CACF,EAEAW,EAAA,EAGA,MAAMG,EAAW,YAAYH,EAAW,GAAK,EAC7C,MAAO,IAAM,cAAcG,CAAQ,CACrC,EAAG,CAAA,CAAE,EAEL,MAAMC,EAAgB,IAAM,CAC1Bf,EAAW,EAAI,EAEf,OAAO,SAAS,OAAA,CAClB,EAEMyF,EAAkB,CAACxE,EAA6ByE,IAAqB,CACzEN,EAAYM,CAAQ,CACtB,EAWMhH,EAAkBH,GAAmB,CACzC,OAAQA,EAAO,cAAY,CACzB,IAAK,UACL,IAAK,KACL,IAAK,SACL,IAAK,YACH,MAAO,UACT,IAAK,UACL,IAAK,OACL,IAAK,WACL,IAAK,eACH,MAAO,QACT,IAAK,UACL,IAAK,UACH,MAAO,UACT,QACE,MAAO,SAAA,CAEb,EAEM6C,GAAmB5B,GAAqB,CAC5C,OAAQA,EAAA,CACN,IAAK,UACH,OAAOb,EAAAA,IAAC0C,GAAA,CAAgB,MAAM,SAAA,CAAU,EAC1C,IAAK,UACH,OAAO1C,EAAAA,IAAC2C,GAAA,CAAY,MAAM,SAAA,CAAU,EACtC,IAAK,QACH,OAAO3C,EAAAA,IAAC4C,GAAA,CAAU,MAAM,OAAA,CAAQ,EAClC,QACE,OAAO5C,EAAAA,IAAC6C,GAAA,CAAS,MAAM,MAAA,CAAO,CAAA,CAEpC,EAEA,OAAIzB,EAEApB,EAAAA,IAACO,EAAA,CAAI,QAAQ,OAAO,eAAe,SAAS,WAAW,SAAS,UAAU,QACxE,SAAAP,MAACE,GAAA,CAAe,KAAM,GAAI,EAC5B,EAIAqB,EACKvB,EAAAA,IAACU,GAAA,CAAa,QAASa,CAAA,CAAO,SAIpChB,EAAA,CAEC,SAAA,CAAAD,EAAAA,KAACC,EAAA,CAAI,QAAQ,OAAO,eAAe,gBAAgB,WAAW,SAAS,GAAI,EACzE,SAAA,CAAAP,MAACS,EAAA,CAAW,QAAQ,KAAK,UAAU,KAAK,SAAA,uBAExC,SACCF,EAAA,CACC,SAAA,CAAAP,EAAAA,IAAC8C,EAAA,CAAQ,MAAM,UACb,SAAA9C,EAAAA,IAAC+C,EAAA,CAAW,QAASX,EAAe,SAAUhB,EAC5C,SAAApB,EAAAA,IAACgB,GAAA,CAAA,CAAY,CAAA,CACf,EACF,EACAhB,EAAAA,IAAC8C,GAAQ,MAAM,WACb,eAACC,EAAA,CACC,SAAA/C,EAAAA,IAACgD,GAAA,CAAA,CAAa,CAAA,CAChB,CAAA,CACF,CAAA,CAAA,CACF,CAAA,EACF,EAGA1C,EAAAA,KAACQ,GAAA,CACC,SAAUW,EAAK,WAAW,SAAW,YAAc,UAAY,QAC/D,GAAI,CAAE,GAAI,CAAA,EACV,OACEzB,EAAAA,IAACe,EAAA,CAAO,MAAM,UAAU,KAAK,QAAQ,SAAA,YAErC,EAGF,SAAA,CAAAT,EAAAA,KAACG,EAAA,CAAW,QAAQ,KAAK,SAAA,CAAA,uBACFgB,EAAK,WAAW,SAAW,YAAc,YAAc,cAAA,EAC9E,EACAnB,EAAAA,KAACG,EAAA,CAAW,QAAQ,QAAQ,SAAA,CAAA,kBACVgB,EAAK,WAAW,aAAa,eAAaA,EAAK,WAAW,QAAQ,cACzEA,EAAK,WAAW,OAAO,kBAAgBA,EAAK,WAAW,SAAA,CAAA,CAClE,CAAA,CAAA,CAAA,SAIDwB,EAAA,CAAK,UAAS,GAAC,QAAS,EAAG,GAAI,EAC9B,SAAA,CAAAjD,EAAAA,IAACiD,EAAA,CAAK,KAAI,GAAC,GAAI,GAAI,GAAI,EAAG,GAAI,EAC5B,SAAAjD,EAAAA,IAACoF,EAAA,CACC,MAAM,WACN,MAAO3D,EAAK,QAAQ,SAAS,MAC7B,SAAU,GAAGA,EAAK,QAAQ,SAAS,OAAO,aAAaA,EAAK,QAAQ,SAAS,OAAO,WACpF,WAAO2B,GAAA,EAAW,EAClB,MAAM,SAAA,CAAA,EAEV,EACApD,EAAAA,IAACiD,GAAK,KAAI,GAAC,GAAI,GAAI,GAAI,EAAG,GAAI,EAC5B,SAAAjD,EAAAA,IAACoF,EAAA,CACC,MAAM,UACN,MAAO3D,EAAK,QAAQ,QAAQ,MAC5B,SAAU,GAAGA,EAAK,QAAQ,QAAQ,EAAE,QAAQA,EAAK,QAAQ,QAAQ,IAAI,QACrE,WAAO6C,EAAA,EAAiB,EACxB,MAAM,SAAA,CAAA,EAEV,EACAtE,EAAAA,IAACiD,GAAK,KAAI,GAAC,GAAI,GAAI,GAAI,EAAG,GAAI,EAC5B,SAAAjD,EAAAA,IAACoF,EAAA,CACC,MAAM,YACN,MAAO3D,EAAK,QAAQ,QAAQ,eAC5B,SAAU,GAAGA,EAAK,QAAQ,QAAQ,cAAc,iBAChD,WAAO8B,GAAA,EAAU,EACjB,MAAM,SAAA,CAAA,EAEV,EACAvD,EAAAA,IAACiD,GAAK,KAAI,GAAC,GAAI,GAAI,GAAI,EAAG,GAAI,EAC5B,SAAAjD,EAAAA,IAACoF,EAAA,CACC,MAAM,WACN,MAAO3D,EAAK,QAAQ,SAAS,SAC7B,SAAU,GAAGA,EAAK,QAAQ,SAAS,KAAK,WAAWA,EAAK,QAAQ,SAAS,cAAc,WACvF,WAAO4G,GAAA,EAAW,EAClB,MAAM,OAAA,CAAA,CACR,CACF,CAAA,EACF,EAGArI,EAAAA,IAACkH,EAAA,CAAM,GAAI,CAAE,GAAI,CAAA,EACf,SAAA5G,EAAAA,KAAC6G,GAAA,CAAK,MAAOX,EAAU,SAAUM,EAAiB,aAAW,gBAC3D,SAAA,CAAA9G,MAACoH,GAAI,MAAM,WAAW,KAAMpH,MAACoD,KAAW,EAAI,QAC3CgE,EAAA,CAAI,MAAM,UAAU,KAAMpH,MAACsE,IAAiB,EAAI,QAChD8C,EAAA,CAAI,MAAM,WAAW,KAAMpH,MAACqI,KAAW,EAAI,QAC3CjB,EAAA,CAAI,MAAM,cAAc,KAAMpH,MAACqH,KAAa,EAAI,QAChDD,EAAA,CAAI,MAAM,SAAS,KAAMpH,EAAAA,IAACsH,KAAe,CAAA,CAAI,CAAA,CAAA,CAChD,CAAA,CACF,EAGAhH,EAAAA,KAAC6F,GAAA,CAAS,MAAOK,EAAU,MAAO,EAChC,SAAA,CAAAlG,EAAAA,KAACC,EAAA,CAAI,QAAQ,OAAO,eAAe,gBAAgB,WAAW,SAAS,GAAI,EACzE,SAAA,CAAAP,EAAAA,IAACS,EAAA,CAAW,QAAQ,KAAK,SAAA,WAAQ,EACjCT,EAAAA,IAACe,EAAA,CACC,QAAQ,YACR,gBAAYwG,EAAA,EAAQ,EACpB,QAAS,IAAMZ,EAAoB,EAAI,EACxC,SAAA,gBAAA,CAAA,CAED,EACF,EAGArG,EAAAA,KAACgI,GAAA,CAAU,gBAAe,GACxB,SAAA,CAAAtI,EAAAA,IAACuI,GAAA,CAAiB,WAAYvI,EAAAA,IAACwI,GAAA,CAAA,CAAe,EAC5C,SAAAlI,EAAAA,KAACG,EAAA,CAAW,QAAQ,KAAK,SAAA,CAAA,qBAAmBgB,EAAK,SAAS,QAAQ,OAAO,GAAA,CAAA,CAAC,CAAA,CAC5E,QACCgH,GAAA,CACC,SAAAzI,EAAAA,IAAC2E,GAAe,UAAWuC,EACzB,gBAACtC,EAAA,CACC,SAAA,CAAA5E,EAAAA,IAAC6E,EAAA,CACC,gBAACC,EAAA,CACC,SAAA,CAAA9E,EAAAA,IAAC+E,GAAU,SAAA,MAAA,CAAI,EACf/E,EAAAA,IAAC+E,GAAU,SAAA,QAAA,CAAM,EACjB/E,EAAAA,IAAC+E,GAAU,SAAA,MAAA,CAAI,EACf/E,EAAAA,IAAC+E,GAAU,SAAA,QAAA,CAAM,EACjB/E,EAAAA,IAAC+E,GAAU,SAAA,YAAA,CAAU,EACrB/E,EAAAA,IAAC+E,GAAU,SAAA,KAAA,CAAG,EACd/E,EAAAA,IAAC+E,GAAU,SAAA,WAAA,CAAS,EACpB/E,EAAAA,IAAC+E,GAAU,SAAA,SAAA,CAAO,EAClB/E,EAAAA,IAAC+E,GAAU,SAAA,QAAA,CAAM,EACjB/E,EAAAA,IAAC+E,GAAU,SAAA,SAAA,CAAO,CAAA,CAAA,CACpB,CAAA,CACF,EACA/E,EAAAA,IAACgF,GACE,SAAAvD,EAAK,SAAS,QAAQ,IAAKiH,GAC1BpI,EAAAA,KAACwE,EAAA,CACC,SAAA,CAAA9E,EAAAA,IAAC+E,GACC,SAAAzE,OAACC,EAAA,CAAI,QAAQ,OAAO,WAAW,SAC7B,SAAA,CAAAP,EAAAA,IAAC2I,GAAA,CAAQ,GAAI,CAAE,GAAI,GAAK,EACvBD,EAAQ,IAAA,CAAA,CACX,CAAA,CACF,QACC3D,EAAA,CACC,SAAA/E,EAAAA,IAACC,EAAA,CACC,MAAOyI,EAAQ,OACf,MAAO3I,EAAe2I,EAAQ,MAAM,EACpC,KAAK,OAAA,CAAA,EAET,EACA1I,EAAAA,IAAC+E,EAAA,CAAW,SAAA2D,EAAQ,IAAA,CAAK,EACzB1I,EAAAA,IAAC+E,EAAA,CAAW,SAAA2D,EAAQ,MAAA,CAAO,EAC3B1I,EAAAA,IAAC+E,EAAA,CACC,SAAAzE,EAAAA,KAACC,EAAA,CACC,SAAA,CAAAD,EAAAA,KAACG,EAAA,CAAW,QAAQ,QAAQ,SAAA,CAAA,WAASiI,EAAQ,QAAA,EAAS,EACtDpI,EAAAA,KAACG,EAAA,CAAW,QAAQ,QAAQ,SAAA,CAAA,YAAUiI,EAAQ,SAAA,CAAA,CAAU,CAAA,CAAA,CAC1D,CAAA,CACF,EACA1I,EAAAA,IAAC+E,EAAA,CAAW,SAAA2D,EAAQ,GAAA,CAAI,QACvB3D,EAAA,CACC,SAAA/E,EAAAA,IAACC,EAAA,CACC,MAAOyI,EAAQ,SACf,MAAO3I,EAAe2I,EAAQ,QAAQ,EACtC,KAAK,OAAA,CAAA,EAET,EACA1I,EAAAA,IAAC+E,EAAA,CAAW,SAAA2D,EAAQ,OAAA,CAAQ,EAC5B1I,EAAAA,IAAC+E,EAAA,CAAW,SAAA2D,EAAQ,MAAA,CAAO,SAC1B3D,EAAA,CACC,SAAA,CAAA/E,MAAC+C,EAAA,CAAW,KAAK,QACf,SAAA/C,MAACyH,IAAS,EACZ,QACC1E,EAAA,CAAW,KAAK,QACf,SAAA/C,EAAAA,IAAC0H,IAAW,CAAA,CACd,CAAA,CAAA,CACF,CAAA,GAvCagB,EAAQ,EAwCvB,CACD,CAAA,CACH,CAAA,CAAA,CACF,EACF,CAAA,CACF,CAAA,EACF,SAGCJ,GAAA,CACC,SAAA,CAAAtI,EAAAA,IAACuI,GAAA,CAAiB,WAAYvI,EAAAA,IAACwI,GAAA,CAAA,CAAe,EAC5C,SAAAlI,EAAAA,KAACG,EAAA,CAAW,QAAQ,KAAK,SAAA,CAAA,mBAAiBgB,EAAK,SAAS,MAAM,OAAO,GAAA,CAAA,CAAC,CAAA,CACxE,QACCgH,GAAA,CACC,SAAAzI,EAAAA,IAAC2E,GAAe,UAAWuC,EACzB,gBAACtC,EAAA,CACC,SAAA,CAAA5E,EAAAA,IAAC6E,EAAA,CACC,gBAACC,EAAA,CACC,SAAA,CAAA9E,EAAAA,IAAC+E,GAAU,SAAA,MAAA,CAAI,EACf/E,EAAAA,IAAC+E,GAAU,SAAA,QAAA,CAAM,EACjB/E,EAAAA,IAAC+E,GAAU,SAAA,MAAA,CAAI,EACf/E,EAAAA,IAAC+E,GAAU,SAAA,QAAA,CAAM,EACjB/E,EAAAA,IAAC+E,GAAU,SAAA,YAAA,CAAU,EACrB/E,EAAAA,IAAC+E,GAAU,SAAA,KAAA,CAAG,EACd/E,EAAAA,IAAC+E,GAAU,SAAA,WAAA,CAAS,EACpB/E,EAAAA,IAAC+E,GAAU,SAAA,SAAA,CAAO,EAClB/E,EAAAA,IAAC+E,GAAU,SAAA,QAAA,CAAM,EACjB/E,EAAAA,IAAC+E,GAAU,SAAA,SAAA,CAAO,CAAA,CAAA,CACpB,CAAA,CACF,EACA/E,EAAAA,IAACgF,GACE,SAAAvD,EAAK,SAAS,MAAM,IAAKiH,GACxBpI,EAAAA,KAACwE,EAAA,CACC,SAAA,CAAA9E,EAAAA,IAAC+E,GACC,SAAAzE,OAACC,EAAA,CAAI,QAAQ,OAAO,WAAW,SAC7B,SAAA,CAAAP,EAAAA,IAAC4I,GAAA,CAAgB,GAAI,CAAE,GAAI,GAAK,EAC/BF,EAAQ,IAAA,CAAA,CACX,CAAA,CACF,QACC3D,EAAA,CACC,SAAA/E,EAAAA,IAACC,EAAA,CACC,MAAOyI,EAAQ,OACf,MAAO3I,EAAe2I,EAAQ,MAAM,EACpC,KAAK,OAAA,CAAA,EAET,EACA1I,EAAAA,IAAC+E,EAAA,CAAW,SAAA2D,EAAQ,IAAA,CAAK,EACzB1I,EAAAA,IAAC+E,EAAA,CAAW,SAAA2D,EAAQ,MAAA,CAAO,EAC3B1I,EAAAA,IAAC+E,EAAA,CACC,SAAAzE,EAAAA,KAACC,EAAA,CACC,SAAA,CAAAD,EAAAA,KAACG,EAAA,CAAW,QAAQ,QAAQ,SAAA,CAAA,WAASiI,EAAQ,QAAA,EAAS,EACtDpI,EAAAA,KAACG,EAAA,CAAW,QAAQ,QAAQ,SAAA,CAAA,YAAUiI,EAAQ,SAAA,CAAA,CAAU,CAAA,CAAA,CAC1D,CAAA,CACF,EACA1I,EAAAA,IAAC+E,EAAA,CAAW,SAAA2D,EAAQ,GAAA,CAAI,QACvB3D,EAAA,CACC,SAAA/E,EAAAA,IAACC,EAAA,CACC,MAAOyI,EAAQ,SACf,MAAO3I,EAAe2I,EAAQ,QAAQ,EACtC,KAAK,OAAA,CAAA,EAET,EACA1I,EAAAA,IAAC+E,EAAA,CAAW,SAAA2D,EAAQ,OAAA,CAAQ,EAC5B1I,EAAAA,IAAC+E,EAAA,CAAW,SAAA2D,EAAQ,MAAA,CAAO,SAC1B3D,EAAA,CACC,SAAA,CAAA/E,MAAC+C,EAAA,CAAW,KAAK,QACf,SAAA/C,MAACyH,IAAS,EACZ,QACC1E,EAAA,CAAW,KAAK,QACf,SAAA/C,EAAAA,IAAC0H,IAAW,CAAA,CACd,CAAA,CAAA,CACF,CAAA,GAvCagB,EAAQ,EAwCvB,CACD,CAAA,CACH,CAAA,CAAA,CACF,EACF,CAAA,CACF,CAAA,CAAA,CACF,CAAA,EACF,EAGApI,EAAAA,KAAC6F,GAAA,CAAS,MAAOK,EAAU,MAAO,EAChC,SAAA,CAAAlG,EAAAA,KAACC,EAAA,CAAI,QAAQ,OAAO,eAAe,gBAAgB,WAAW,SAAS,GAAI,EACzE,SAAA,CAAAP,EAAAA,IAACS,EAAA,CAAW,QAAQ,KAAK,SAAA,UAAO,EAChCT,EAAAA,IAACe,EAAA,CACC,QAAQ,YACR,gBAAYwG,EAAA,EAAQ,EACpB,QAAS,IAAMZ,EAAoB,EAAI,EACxC,SAAA,eAAA,CAAA,CAED,EACF,EAEA3G,MAAC2E,EAAA,CAAe,UAAWuC,EACzB,gBAACtC,EAAA,CACC,SAAA,CAAA5E,EAAAA,IAAC6E,EAAA,CACC,gBAACC,EAAA,CACC,SAAA,CAAA9E,EAAAA,IAAC+E,GAAU,SAAA,MAAA,CAAI,EACf/E,EAAAA,IAAC+E,GAAU,SAAA,QAAA,CAAM,EACjB/E,EAAAA,IAAC+E,GAAU,SAAA,QAAA,CAAM,EACjB/E,EAAAA,IAAC+E,GAAU,SAAA,aAAA,CAAW,EACtB/E,EAAAA,IAAC+E,GAAU,SAAA,UAAA,CAAQ,EACnB/E,EAAAA,IAAC+E,GAAU,SAAA,YAAA,CAAU,EACrB/E,EAAAA,IAAC+E,GAAU,SAAA,SAAA,CAAO,EAClB/E,EAAAA,IAAC+E,GAAU,SAAA,WAAA,CAAS,EACpB/E,EAAAA,IAAC+E,GAAU,SAAA,SAAA,CAAO,EAClB/E,EAAAA,IAAC+E,GAAU,SAAA,SAAA,CAAO,CAAA,CAAA,CACpB,CAAA,CACF,EACA/E,EAAAA,IAACgF,GACE,SAAAvD,EAAK,QAAQ,IAAKoH,UAChB/D,EAAA,CACC,SAAA,CAAA9E,EAAAA,IAAC+E,GACC,SAAAzE,OAACC,EAAA,CAAI,QAAQ,OAAO,WAAW,SAC7B,SAAA,CAAAP,EAAAA,IAACsE,EAAA,CAAiB,GAAI,CAAE,GAAI,GAAK,EAChCuE,EAAO,IAAA,CAAA,CACV,CAAA,CACF,QACC9D,EAAA,CACC,SAAA/E,EAAAA,IAACC,EAAA,CACC,MAAO4I,EAAO,OACd,MAAO9I,EAAe8I,EAAO,MAAM,EACnC,KAAK,OAAA,CAAA,EAET,EACA7I,EAAAA,IAAC+E,EAAA,CAAW,SAAA8D,EAAO,MAAA,CAAO,EAC1B7I,EAAAA,IAAC+E,EAAA,CAAW,SAAA8D,EAAO,WAAA,CAAY,EAC/B7I,EAAAA,IAAC+E,EAAA,CAAW,SAAA8D,EAAO,QAAA,CAAS,EAC5B7I,EAAAA,IAAC+E,EAAA,CAAW,SAAA8D,EAAO,UAAA,CAAW,QAC7B9D,EAAA,CACC,SAAAzE,OAACC,GAAI,QAAQ,OAAO,WAAW,SAC7B,SAAA,CAAAD,EAAAA,KAACG,EAAA,CAAW,QAAQ,QAAS,SAAA,CAAAoI,EAAO,QAAQ,IAAA,EAAE,EAC7CA,EAAO,QAAU,IAAM7I,EAAAA,IAAC2C,GAAA,CAAY,MAAM,UAAU,GAAI,CAAE,GAAI,CAAA,CAAE,CAAG,CAAA,CAAA,CACtE,CAAA,CACF,SACCoC,EAAA,CAAW,SAAA,CAAA8D,EAAO,UAAU,OAAA,EAAK,EAClC7I,EAAAA,IAAC+E,EAAA,CACC,SAAAzE,EAAAA,KAACC,EAAA,CACC,SAAA,CAAAD,EAAAA,KAACG,EAAA,CAAW,QAAQ,QAAQ,SAAA,CAAA,OAAKoI,EAAO,UAAU,eAAA,CAAe,EAAE,EACnEvI,EAAAA,KAACG,EAAA,CAAW,QAAQ,QAAQ,SAAA,CAAA,QAAMoI,EAAO,WAAW,eAAA,CAAe,CAAA,CAAE,CAAA,CAAA,CACvE,CAAA,CACF,SACC9D,EAAA,CACC,SAAA,CAAA/E,MAAC+C,EAAA,CAAW,KAAK,QACf,SAAA/C,MAACyH,IAAS,EACZ,QACC1E,EAAA,CAAW,KAAK,QACf,SAAA/C,EAAAA,IAAC0H,IAAW,CAAA,CACd,CAAA,CAAA,CACF,CAAA,GAtCamB,EAAO,EAuCtB,CACD,CAAA,CACH,CAAA,CAAA,CACF,CAAA,CACF,CAAA,EACF,EAGAvI,EAAAA,KAAC6F,GAAA,CAAS,MAAOK,EAAU,MAAO,EAChC,SAAA,CAAAlG,EAAAA,KAACC,EAAA,CAAI,QAAQ,OAAO,eAAe,gBAAgB,WAAW,SAAS,GAAI,EACzE,SAAA,CAAAP,EAAAA,IAACS,EAAA,CAAW,QAAQ,KAAK,SAAA,4BAAyB,EAClDT,EAAAA,IAACe,EAAA,CACC,QAAQ,YACR,gBAAYwG,EAAA,EAAQ,EACpB,QAAS,IAAMZ,EAAoB,EAAI,EACxC,SAAA,eAAA,CAAA,CAED,EACF,EAGArG,EAAAA,KAACgI,GAAA,CAAU,gBAAe,GACxB,SAAA,CAAAtI,EAAAA,IAACuI,GAAA,CAAiB,WAAYvI,EAAAA,IAACwI,GAAA,CAAA,CAAe,EAC5C,SAAAlI,EAAAA,KAACG,EAAA,CAAW,QAAQ,KAAK,SAAA,CAAA,sBAAoBgB,EAAK,SAAS,SAAS,OAAO,GAAA,CAAA,CAAC,CAAA,CAC9E,QACCgH,GAAA,CACC,SAAAzI,EAAAA,IAAC2E,GAAe,UAAWuC,EACzB,gBAACtC,EAAA,CACC,SAAA,CAAA5E,EAAAA,IAAC6E,EAAA,CACC,gBAACC,EAAA,CACC,SAAA,CAAA9E,EAAAA,IAAC+E,GAAU,SAAA,MAAA,CAAI,EACf/E,EAAAA,IAAC+E,GAAU,SAAA,QAAA,CAAM,EACjB/E,EAAAA,IAAC+E,GAAU,SAAA,QAAA,CAAM,EACjB/E,EAAAA,IAAC+E,GAAU,SAAA,aAAA,CAAW,EACtB/E,EAAAA,IAAC+E,GAAU,SAAA,UAAA,CAAQ,EACnB/E,EAAAA,IAAC+E,GAAU,SAAA,MAAA,CAAI,EACf/E,EAAAA,IAAC+E,GAAU,SAAA,QAAA,CAAM,EACjB/E,EAAAA,IAAC+E,GAAU,SAAA,UAAA,CAAQ,EACnB/E,EAAAA,IAAC+E,GAAU,SAAA,SAAA,CAAO,CAAA,CAAA,CACpB,CAAA,CACF,EACA/E,EAAAA,IAACgF,GACE,SAAAvD,EAAK,SAAS,SAAS,IAAKqH,GAC3BxI,EAAAA,KAACwE,EAAA,CACC,SAAA,CAAA9E,EAAAA,IAAC+E,GACC,SAAAzE,OAACC,EAAA,CAAI,QAAQ,OAAO,WAAW,SAC7B,SAAA,CAAAP,EAAAA,IAACqI,GAAA,CAAW,GAAI,CAAE,GAAI,GAAK,EAC1BS,EAAO,IAAA,CAAA,CACV,CAAA,CACF,QACC/D,EAAA,CACC,SAAA/E,EAAAA,IAACC,EAAA,CACC,MAAO6I,EAAO,OACd,MAAO/I,EAAe+I,EAAO,MAAM,EACnC,KAAK,OAAA,CAAA,EAET,EACA9I,EAAAA,IAAC+E,EAAA,CAAW,SAAA+D,EAAO,MAAA,CAAO,EAC1B9I,EAAAA,IAAC+E,EAAA,CAAW,SAAA+D,EAAO,WAAA,CAAY,EAC/B9I,EAAAA,IAAC+E,EAAA,CAAW,SAAA+D,EAAO,QAAA,CAAS,EAC5B9I,EAAAA,IAAC+E,EAAA,CAAW,SAAA+D,EAAO,IAAA,CAAK,QACvB/D,EAAA,CACC,SAAA/E,EAAAA,IAACC,EAAA,CACC,MAAO6I,EAAO,OACd,MAAOA,EAAO,SAAW,QAAU,UAAY,QAC/C,KAAK,OAAA,CAAA,EAET,EACA9I,EAAAA,IAAC+E,EAAA,CAAW,SAAA+D,EAAO,QAAA,CAAS,SAC3B/D,EAAA,CACC,SAAA,CAAA/E,MAAC+C,EAAA,CAAW,KAAK,QACf,SAAA/C,MAACyH,IAAS,EACZ,QACC1E,EAAA,CAAW,KAAK,QACf,SAAA/C,EAAAA,IAAC0H,IAAW,CAAA,CACd,CAAA,CAAA,CACF,CAAA,GAjCaoB,EAAO,EAkCtB,CACD,CAAA,CACH,CAAA,CAAA,CACF,EACF,CAAA,CACF,CAAA,EACF,SAGCR,GAAA,CACC,SAAA,CAAAtI,EAAAA,IAACuI,GAAA,CAAiB,WAAYvI,EAAAA,IAACwI,GAAA,CAAA,CAAe,EAC5C,SAAAlI,EAAAA,KAACG,EAAA,CAAW,QAAQ,KAAK,SAAA,CAAA,mBAAiBgB,EAAK,SAAS,MAAM,OAAO,GAAA,CAAA,CAAC,CAAA,CACxE,QACCgH,GAAA,CACC,SAAAzI,EAAAA,IAAC2E,GAAe,UAAWuC,EACzB,gBAACtC,EAAA,CACC,SAAA,CAAA5E,EAAAA,IAAC6E,EAAA,CACC,gBAACC,EAAA,CACC,SAAA,CAAA9E,EAAAA,IAAC+E,GAAU,SAAA,MAAA,CAAI,EACf/E,EAAAA,IAAC+E,GAAU,SAAA,QAAA,CAAM,EACjB/E,EAAAA,IAAC+E,GAAU,SAAA,QAAA,CAAM,EACjB/E,EAAAA,IAAC+E,GAAU,SAAA,aAAA,CAAW,EACtB/E,EAAAA,IAAC+E,GAAU,SAAA,UAAA,CAAQ,EACnB/E,EAAAA,IAAC+E,GAAU,SAAA,MAAA,CAAI,EACf/E,EAAAA,IAAC+E,GAAU,SAAA,QAAA,CAAM,EACjB/E,EAAAA,IAAC+E,GAAU,SAAA,UAAA,CAAQ,EACnB/E,EAAAA,IAAC+E,GAAU,SAAA,SAAA,CAAO,CAAA,CAAA,CACpB,CAAA,CACF,EACA/E,EAAAA,IAACgF,GACE,SAAAvD,EAAK,SAAS,MAAM,IAAKsH,GACxBzI,EAAAA,KAACwE,EAAA,CACC,SAAA,CAAA9E,EAAAA,IAAC+E,GACC,SAAAzE,OAACC,EAAA,CAAI,QAAQ,OAAO,WAAW,SAC7B,SAAA,CAAAP,EAAAA,IAACgJ,GAAA,CAAQ,GAAI,CAAE,GAAI,GAAK,EACvBD,EAAK,IAAA,CAAA,CACR,CAAA,CACF,QACChE,EAAA,CACC,SAAA/E,EAAAA,IAACC,EAAA,CACC,MAAO8I,EAAK,OACZ,MAAOhJ,EAAegJ,EAAK,MAAM,EACjC,KAAK,OAAA,CAAA,EAET,EACA/I,EAAAA,IAAC+E,EAAA,CAAW,SAAAgE,EAAK,MAAA,CAAO,EACxB/I,EAAAA,IAAC+E,EAAA,CAAW,SAAAgE,EAAK,WAAA,CAAY,EAC7B/I,EAAAA,IAAC+E,EAAA,CAAW,SAAAgE,EAAK,QAAA,CAAS,EAC1B/I,EAAAA,IAAC+E,EAAA,CAAW,SAAAgE,EAAK,IAAA,CAAK,QACrBhE,EAAA,CACC,SAAA/E,EAAAA,IAACC,EAAA,CACC,MAAO8I,EAAK,OACZ,MAAOA,EAAK,SAAW,QAAU,UAAY,QAC7C,KAAK,OAAA,CAAA,EAET,EACA/I,EAAAA,IAAC+E,EAAA,CAAW,SAAAgE,EAAK,QAAA,CAAS,SACzBhE,EAAA,CACC,SAAA,CAAA/E,MAAC+C,EAAA,CAAW,KAAK,QACf,SAAA/C,MAACyH,IAAS,EACZ,QACC1E,EAAA,CAAW,KAAK,QACf,SAAA/C,EAAAA,IAAC0H,IAAW,CAAA,CACd,CAAA,CAAA,CACF,CAAA,GAjCaqB,EAAK,EAkCpB,CACD,CAAA,CACH,CAAA,CAAA,CACF,EACF,CAAA,CACF,CAAA,CAAA,CACF,CAAA,EACF,EAGAzI,EAAAA,KAAC6F,GAAA,CAAS,MAAOK,EAAU,MAAO,EAChC,SAAA,CAAAxG,MAACS,EAAA,CAAW,QAAQ,KAAK,aAAY,GAAC,SAAA,sBAEtC,EACAH,EAAAA,KAAC2C,EAAA,CAAK,UAAS,GAAC,QAAS,EACvB,SAAA,CAAAjD,EAAAA,IAACiD,GAAK,KAAI,GAAC,GAAI,GAAI,GAAI,EACrB,SAAAjD,EAAAA,IAACwD,GAAA,CAAoB,MAAM,OAAO,OAAQ,IACxC,gBAACC,GAAA,CAAU,KAAMhC,EAAK,YACpB,SAAA,CAAAzB,EAAAA,IAAC0D,GAAA,CAAc,gBAAgB,KAAA,CAAM,EACrC1D,EAAAA,IAAC2D,GAAA,CAAM,QAAQ,MAAA,CAAO,QACrBC,GAAA,EAAM,QACNC,GAAA,EAAgB,EACjB7D,EAAAA,IAAC8D,EAAA,CAAK,KAAK,WAAW,QAAQ,UAAU,OAAO,UAAU,YAAa,EAAG,KAAK,cAAA,CAAe,EAC7F9D,EAAAA,IAAC8D,EAAA,CAAK,KAAK,WAAW,QAAQ,YAAY,OAAO,UAAU,YAAa,EAAG,KAAK,kBAAA,CAAmB,EACnG9D,EAAAA,IAAC8D,EAAA,CAAK,KAAK,WAAW,QAAQ,UAAU,OAAO,UAAU,YAAa,EAAG,KAAK,aAAA,CAAc,EAC5F9D,EAAAA,IAAC8D,EAAA,CAAK,KAAK,WAAW,QAAQ,SAAS,OAAO,UAAU,YAAa,EAAG,KAAK,YAAA,CAAa,CAAA,CAAA,CAC5F,EACF,EACF,EACA9D,EAAAA,IAACiD,EAAA,CAAK,KAAI,GAAC,GAAI,GAAI,GAAI,EACrB,SAAAjD,EAAAA,IAACkD,EAAA,CACC,SAAA5C,EAAAA,KAAC6C,EAAA,CACC,SAAA,CAAAnD,MAACS,EAAA,CAAW,QAAQ,KAAK,aAAY,GAAC,SAAA,oBAEtC,EACAH,EAAAA,KAACC,EAAA,CAAI,GAAI,EACP,SAAA,CAAAD,EAAAA,KAACG,EAAA,CAAW,QAAQ,QAAQ,MAAM,iBAAiB,SAAA,CAAA,kBACjCgB,EAAK,QAAQ,QAAQ,KAAA,EACvC,EACAnB,EAAAA,KAACG,EAAA,CAAW,QAAQ,QAAQ,MAAM,iBAAiB,SAAA,CAAA,mBAChCgB,EAAK,QAAQ,QAAQ,EAAA,EACxC,EACAnB,EAAAA,KAACG,EAAA,CAAW,QAAQ,QAAQ,MAAM,iBAAiB,SAAA,CAAA,mBAChCgB,EAAK,QAAQ,QAAQ,IAAA,CAAA,CACxC,CAAA,EACF,EACAnB,EAAAA,KAACC,EAAA,CAAI,GAAI,EACP,SAAA,CAAAD,EAAAA,KAACG,EAAA,CAAW,QAAQ,QAAQ,MAAM,iBAAiB,SAAA,CAAA,oBAC/BgB,EAAK,QAAQ,QAAQ,eAAe,OAAA,EACxD,EACAnB,EAAAA,KAACG,EAAA,CAAW,QAAQ,QAAQ,MAAM,iBAAiB,SAAA,CAAA,oBAC/BgB,EAAK,QAAQ,QAAQ,eAAe,KAAA,CAAA,CACxD,CAAA,EACF,EACAnB,EAAAA,KAACC,EAAA,CAAI,GAAI,EACP,SAAA,CAAAD,EAAAA,KAACG,EAAA,CAAW,QAAQ,QAAQ,MAAM,iBAAiB,SAAA,CAAA,oBAC/BgB,EAAK,QAAQ,SAAS,eAAe,eAAA,CAAe,EACxE,EACAnB,EAAAA,KAACG,EAAA,CAAW,QAAQ,QAAQ,MAAM,iBAAiB,SAAA,CAAA,oBAC/BgB,EAAK,QAAQ,SAAS,eAAe,eAAA,CAAe,CAAA,CACxE,CAAA,CAAA,CACF,CAAA,CAAA,CACF,EACF,CAAA,CACF,CAAA,CAAA,CACF,CAAA,EACF,EAGAnB,EAAAA,KAAC6F,GAAA,CAAS,MAAOK,EAAU,MAAO,EAChC,SAAA,CAAAxG,MAACS,EAAA,CAAW,QAAQ,KAAK,aAAY,GAAC,SAAA,gBAEtC,EACAT,EAAAA,IAACgE,EAAA,CACE,SAAAvC,EAAK,aAAa,IAAI,CAACa,EAAO4B,IAC7B5D,EAAAA,KAAC6D,GAAM,SAAN,CACC,SAAA,CAAA7D,OAAC8D,EAAA,CACC,SAAA,CAAApE,EAAAA,IAACqE,EAAA,CACE,SAAA5B,GAAgBH,EAAM,QAAQ,EACjC,EACAtC,EAAAA,IAACuE,EAAA,CACC,QAASjC,EAAM,QACf,UAAWA,EAAM,IAAA,CAAA,CACnB,EACF,EACC4B,EAAQzC,EAAK,aAAa,OAAS,SAAM+C,EAAA,CAAA,CAAQ,CAAA,CAAA,EAV/BN,CAWrB,CACD,CAAA,CACH,CAAA,EACF,EAGA5D,EAAAA,KAACyH,GAAA,CAAO,KAAMrB,GAAkB,QAAS,IAAMC,EAAoB,EAAK,EAAG,SAAS,KAAK,UAAS,GAChG,SAAA,CAAA3G,EAAAA,IAACgI,IAAY,SAAA,iBAAA,CAAe,EAC5BhI,EAAAA,IAACiI,GAAA,CACC,SAAAjI,EAAAA,IAACS,EAAA,CAAW,QAAQ,QAAQ,MAAM,iBAAiB,aAAY,GAAC,SAAA,+JAAA,CAGhE,EACF,SACCyH,GAAA,CACC,SAAA,CAAAlI,MAACe,GAAO,QAAS,IAAM4F,EAAoB,EAAK,EAAG,SAAA,SAAM,EACzD3G,EAAAA,IAACe,GAAO,QAAQ,YAAY,QAAS,IAAM4F,EAAoB,EAAK,EAAG,SAAA,QAAA,CAEvE,CAAA,CAAA,CACF,CAAA,CAAA,CACF,CAAA,EACF,CAEJ,EC1+BMsC,GAAsB,WAEvB1I,EAAA,CACC,SAAA,CAAAP,MAACS,EAAA,CAAW,QAAQ,KAAK,UAAU,KAAK,SAAA,YAExC,QACCA,EAAA,CAAW,QAAQ,QAAQ,MAAM,iBAAiB,SAAA,kDAAA,CAEnD,CAAA,EACF,ECTEyI,GAA2B,WAE5B3I,EAAA,CACC,SAAA,CAAAP,MAACS,EAAA,CAAW,QAAQ,KAAK,UAAU,KAAK,SAAA,kBAExC,QACCA,EAAA,CAAW,QAAQ,QAAQ,MAAM,iBAAiB,SAAA,+CAAA,CAEnD,CAAA,EACF,ECTE0I,GAA+B,WAEhC5I,EAAA,CACC,SAAA,CAAAP,MAACS,EAAA,CAAW,QAAQ,KAAK,UAAU,KAAK,SAAA,sBAExC,QACCA,EAAA,CAAW,QAAQ,QAAQ,MAAM,iBAAiB,SAAA,sDAAA,CAEnD,CAAA,EACF,ECTE2I,GAAoB,WAErB7I,EAAA,CACC,SAAA,CAAAP,MAACS,EAAA,CAAW,QAAQ,KAAK,UAAU,KAAK,SAAA,UAExC,QACCA,EAAA,CAAW,QAAQ,QAAQ,MAAM,iBAAiB,SAAA,6CAAA,CAEnD,CAAA,EACF,ECTE4I,GAAqB,WAEtB9I,EAAA,CACC,SAAA,CAAAP,MAACS,EAAA,CAAW,QAAQ,KAAK,UAAU,KAAK,SAAA,WAExC,QACCA,EAAA,CAAW,QAAQ,QAAQ,MAAM,iBAAiB,SAAA,mDAAA,CAEnD,CAAA,EACF,ECyCE6I,GAAkB,IAAM,CAC5B,MAAMC,EAAW,CACf,CACE,MAAO,yBACP,YAAa,gGACb,WAAOlG,GAAA,EAAU,EACjB,MAAO,UACP,QAAS,CACP,4DACA,4DACA,4CACA,qCACA,kCAAA,CACF,EAEF,CACE,MAAO,gCACP,YAAa,wFACb,WAAOiB,EAAA,EAAiB,EACxB,MAAO,UACP,QAAS,CACP,uDACA,mDACA,kDACA,6CACA,8CAAA,CACF,EAEF,CACE,MAAO,wBACP,YAAa,2FACb,WAAOf,GAAA,EAAU,EACjB,MAAO,UACP,QAAS,CACP,wCACA,wCACA,4CACA,oCACA,6CAAA,CACF,EAEF,CACE,MAAO,sBACP,YAAa,mFACb,WAAOiG,GAAA,EAAc,EACrB,MAAO,QACP,QAAS,CACP,qCACA,8BACA,mCACA,sCACA,iCAAA,CACF,EAEF,CACE,MAAO,mBACP,YAAa,yFACb,WAAOnC,GAAA,EAAa,EACpB,MAAO,OACP,QAAS,CACP,8CACA,8CACA,oCACA,4BACA,wCAAA,CACF,EAEF,CACE,MAAO,oBACP,YAAa,wFACb,WAAOC,GAAA,EAAe,EACtB,MAAO,YACP,QAAS,CACP,kCACA,8CACA,mCACA,2BACA,8BAAA,CACF,CACF,EAGImC,EAAY,CAChB,CAAE,KAAM,QAAS,YAAa,iDAAkD,KAAMzJ,EAAAA,IAAC0J,KAAS,CAAA,EAChG,CAAE,KAAM,UAAW,YAAa,oCAAqC,KAAM1J,EAAAA,IAACqD,KAAU,CAAA,EACtF,CAAE,KAAM,YAAa,YAAa,qCAAsC,KAAMrD,EAAAA,IAAC2J,KAAW,CAAA,EAC1F,CAAE,KAAM,WAAY,YAAa,gCAAiC,KAAM3J,EAAAA,IAAC4J,KAAc,CAAA,EACvF,CAAE,KAAM,aAAc,YAAa,wBAAyB,KAAM5J,EAAAA,IAAC0J,KAAS,CAAA,EAC5E,CAAE,KAAM,cAAe,YAAa,uBAAwB,KAAM1J,EAAAA,IAAC6J,KAAe,CAAA,EAClF,CAAE,KAAM,aAAc,YAAa,qBAAsB,KAAM7J,EAAAA,IAACiH,KAAY,CAAA,EAC5E,CAAE,KAAM,SAAU,YAAa,mBAAoB,KAAMjH,EAAAA,IAAC8J,KAAW,CAAA,CAAG,EAGpEC,EAAe,CACnB,CACE,MAAO,qBACP,WAAY,CAAC,eAAgB,yBAA0B,sBAAsB,EAC7E,YAAa,0EAAA,EAEf,CACE,MAAO,YACP,WAAY,CAAC,mBAAoB,YAAa,uBAAuB,EACrE,YAAa,4EAAA,EAEf,CACE,MAAO,mBACP,WAAY,CAAC,kBAAmB,qBAAsB,iBAAiB,EACvE,YAAa,yEAAA,EAEf,CACE,MAAO,aACP,WAAY,CAAC,uBAAwB,wBAAyB,oBAAoB,EAClF,YAAa,sEAAA,EAEf,CACE,MAAO,oBACP,WAAY,CAAC,gBAAiB,eAAgB,kBAAkB,EAChE,YAAa,oEAAA,CACf,EAGF,OACEzJ,EAAAA,KAAC0J,IAAU,SAAS,KAAK,GAAI,CAAE,GAAI,GAEjC,SAAA,CAAA1J,EAAAA,KAACC,EAAA,CAAI,UAAU,SAAS,GAAI,EAC1B,SAAA,CAAAP,EAAAA,IAACS,GAAW,QAAQ,KAAK,UAAU,KAAK,aAAY,GAAC,SAAA,kBAAA,CAErD,EACAT,EAAAA,IAACS,GAAW,QAAQ,KAAK,MAAM,iBAAiB,UAAS,GAAC,SAAA,iCAAA,CAE1D,EACAT,EAAAA,IAACS,EAAA,CAAW,QAAQ,QAAQ,MAAM,iBAAiB,GAAI,CAAE,SAAU,IAAK,GAAI,OAAQ,GAAI,GAAK,SAAA,+LAG7F,SACCF,EAAA,CACC,SAAA,CAAAP,EAAAA,IAACe,EAAA,CACC,QAAQ,YACR,KAAK,QACL,gBAAYkJ,GAAA,EAAW,EACvB,KAAK,oCACL,OAAO,SACP,GAAI,CAAE,GAAI,EAAG,GAAI,CAAA,EAClB,SAAA,gBAAA,CAAA,EAGDjK,EAAAA,IAACe,EAAA,CACC,QAAQ,WACR,KAAK,QACL,gBAAYmJ,GAAA,EAAc,EAC1B,KAAK,oCACL,OAAO,SACP,GAAI,CAAE,GAAI,CAAA,EACX,SAAA,WAAA,CAAA,CAED,CAAA,CACF,CAAA,EACF,EAGA5J,EAAAA,KAACC,EAAA,CAAI,GAAI,EACP,SAAA,CAAAP,EAAAA,IAACS,EAAA,CAAW,QAAQ,KAAK,UAAU,KAAK,aAAY,GAAC,UAAU,SAAS,SAAA,cAAA,CAExE,QACCwC,EAAA,CAAK,UAAS,GAAC,QAAS,EACtB,SAAAsG,EAAS,IAAI,CAACY,EAASjG,IACtBlE,EAAAA,IAACiD,EAAA,CAAK,KAAI,GAAC,GAAI,GAAI,GAAI,EACrB,SAAAjD,EAAAA,IAACkD,GAAK,GAAI,CAAE,OAAQ,OAAQ,QAAS,OAAQ,cAAe,QAAA,EAC1D,gBAACC,EAAA,CAAY,GAAI,CAAE,SAAU,GAC3B,SAAA,CAAA7C,OAACC,GAAI,QAAQ,OAAO,WAAW,SAAS,GAAI,EAC1C,SAAA,CAAAP,EAAAA,IAACO,EAAA,CAAI,MAAO,GAAG4J,EAAQ,KAAK,QAAS,GAAI,EACtC,SAAAA,EAAQ,IAAA,CACX,QACC1J,EAAA,CAAW,QAAQ,KAAK,UAAU,KAChC,WAAQ,KAAA,CACX,CAAA,EACF,EACAT,EAAAA,IAACS,GAAW,QAAQ,QAAQ,MAAM,iBAAiB,UAAS,GACzD,SAAA0J,EAAQ,WAAA,CACX,EACAnK,EAAAA,IAACgE,EAAA,CAAK,MAAK,GACR,SAAAmG,EAAQ,QAAQ,IAAI,CAACC,EAAQC,IAC5B/J,OAAC8D,EAAA,CAA2B,eAAc,GACxC,SAAA,CAAApE,MAACqE,EAAA,CAAa,GAAI,CAAE,SAAU,IAC5B,SAAArE,MAACC,EAAA,CAAK,KAAK,QAAQ,MAAM,IAAI,MAAOkK,EAAQ,MAAc,EAC5D,EACAnK,EAAAA,IAACuE,EAAA,CAAa,QAAS6F,CAAA,CAAQ,CAAA,CAAA,EAJlBC,CAKf,CACD,CAAA,CACH,CAAA,CAAA,CACF,CAAA,CACF,GAzB6BnG,CA0B/B,CACD,CAAA,CACH,CAAA,EACF,EAGA5D,EAAAA,KAACC,EAAA,CAAI,GAAI,EACP,SAAA,CAAAP,EAAAA,IAACS,EAAA,CAAW,QAAQ,KAAK,UAAU,KAAK,aAAY,GAAC,UAAU,SAAS,SAAA,kBAAA,CAExE,EACAT,EAAAA,IAACiD,EAAA,CAAK,UAAS,GAAC,QAAS,EACtB,SAAAwG,EAAU,IAAI,CAACa,EAAMpG,IACpBlE,EAAAA,IAACiD,GAAK,KAAI,GAAC,GAAI,GAAI,GAAI,EAAG,GAAI,EAC5B,eAACC,EAAA,CAAK,GAAI,CAAE,UAAW,SAAU,EAAG,CAAA,EAClC,gBAACC,EAAA,CACC,SAAA,CAAAnD,MAACO,GAAI,MAAM,eAAe,GAAI,EAC3B,WAAK,KACR,QACCE,EAAA,CAAW,QAAQ,KAAK,aAAY,GAClC,WAAK,KACR,QACCA,EAAA,CAAW,QAAQ,QAAQ,MAAM,iBAC/B,WAAK,WAAA,CACR,CAAA,CAAA,CACF,CAAA,CACF,GAboCyD,CActC,CACD,CAAA,CACH,CAAA,EACF,EAGA5D,EAAAA,KAACC,EAAA,CAAI,GAAI,EACP,SAAA,CAAAP,EAAAA,IAACS,EAAA,CAAW,QAAQ,KAAK,UAAU,KAAK,aAAY,GAAC,UAAU,SAAS,SAAA,qBAAA,CAExE,EACAT,EAAAA,IAACiD,GAAK,UAAS,GAAC,QAAS,EACtB,SAAA8G,EAAa,IAAI,CAACQ,EAAOrG,IACxBlE,MAACiD,EAAA,CAAK,KAAI,GAAC,GAAI,GAAI,GAAI,EACrB,gBAACqF,GAAA,CACC,SAAA,CAAAtI,EAAAA,IAACuI,GAAA,CAAiB,WAAYvI,EAAAA,IAACwI,GAAA,CAAA,CAAe,EAC5C,SAAAxI,EAAAA,IAACS,EAAA,CAAW,QAAQ,KAAM,SAAA8J,EAAM,KAAA,CAAM,EACxC,SACC9B,GAAA,CACC,SAAA,CAAAzI,EAAAA,IAACS,EAAA,CAAW,QAAQ,QAAQ,MAAM,iBAAiB,UAAS,GACzD,WAAM,WAAA,CACT,QACCF,EAAA,CACE,SAAAgK,EAAM,WAAW,IAAI,CAACC,EAAWC,IAChCzK,EAAAA,IAACC,EAAA,CAEC,MAAOuK,EACP,KAAK,QACL,GAAI,CAAE,GAAI,EAAG,GAAI,CAAA,CAAE,EAHdC,CAAA,CAKR,CAAA,CACH,CAAA,CAAA,CACF,CAAA,EACF,CAAA,EApB6BvG,CAqB/B,CACD,CAAA,CACH,CAAA,EACF,EAGA5D,EAAAA,KAACC,EAAA,CAAI,GAAI,EACP,SAAA,CAAAP,EAAAA,IAACS,EAAA,CAAW,QAAQ,KAAK,UAAU,KAAK,aAAY,GAAC,UAAU,SAAS,SAAA,iBAAA,CAExE,SACCyG,EAAA,CAAM,GAAI,CAAE,EAAG,GACd,SAAA,CAAAlH,MAACS,EAAA,CAAW,QAAQ,KAAK,aAAY,GAAC,SAAA,cAEtC,EACAT,EAAAA,IAACO,EAAA,CAAI,UAAU,MAAM,GAAI,CACvB,QAAS,mBACT,EAAG,EACH,aAAc,EACd,SAAU,OACV,WAAY,YACZ,SAAU,UAAA,EAErB,SAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBASS,EAEAP,EAAAA,IAACS,EAAA,CAAW,QAAQ,KAAK,aAAY,GAAC,GAAI,CAAE,GAAI,CAAA,EAAK,SAAA,eAAA,CAErD,SACCuD,EAAA,CACC,SAAA,CAAA1D,OAAC8D,EAAA,CACC,SAAA,CAAApE,EAAAA,IAACqE,EAAA,CACC,eAACpE,EAAA,CAAK,KAAK,QAAQ,MAAM,IAAI,MAAM,SAAA,CAAU,CAAA,CAC/C,EACAD,EAAAA,IAACuE,EAAA,CAAa,QAAQ,sBAAA,CAAuB,CAAA,EAC/C,SACCH,EAAA,CACC,SAAA,CAAApE,EAAAA,IAACqE,EAAA,CACC,eAACpE,EAAA,CAAK,KAAK,QAAQ,MAAM,IAAI,MAAM,SAAA,CAAU,CAAA,CAC/C,EACAD,EAAAA,IAACuE,EAAA,CAAa,QAAQ,mCAAA,CAAoC,CAAA,EAC5D,SACCH,EAAA,CACC,SAAA,CAAApE,EAAAA,IAACqE,EAAA,CACC,eAACpE,EAAA,CAAK,KAAK,QAAQ,MAAM,IAAI,MAAM,SAAA,CAAU,CAAA,CAC/C,EACAD,EAAAA,IAACuE,EAAA,CAAa,QAAQ,iCAAA,CAAkC,CAAA,EAC1D,SACCH,EAAA,CACC,SAAA,CAAApE,EAAAA,IAACqE,EAAA,CACC,eAACpE,EAAA,CAAK,KAAK,QAAQ,MAAM,IAAI,MAAM,SAAA,CAAU,CAAA,CAC/C,EACAD,EAAAA,IAACuE,EAAA,CAAa,QAAQ,+BAAA,CAAgC,CAAA,EACxD,SACCH,EAAA,CACC,SAAA,CAAApE,EAAAA,IAACqE,EAAA,CACC,eAACpE,EAAA,CAAK,KAAK,QAAQ,MAAM,IAAI,MAAM,SAAA,CAAU,CAAA,CAC/C,EACAD,EAAAA,IAACuE,EAAA,CAAa,QAAQ,kCAAA,CAAmC,CAAA,EAC3D,SACCH,EAAA,CACC,SAAA,CAAApE,EAAAA,IAACqE,EAAA,CACC,eAACpE,EAAA,CAAK,KAAK,QAAQ,MAAM,IAAI,MAAM,SAAA,CAAU,CAAA,CAC/C,EACAD,EAAAA,IAACuE,EAAA,CAAa,QAAQ,4BAAA,CAA6B,CAAA,CAAA,CACrD,CAAA,CAAA,CACF,CAAA,CAAA,CACF,CAAA,EACF,EAGAjE,EAAAA,KAACC,EAAA,CAAI,GAAI,EACP,SAAA,CAAAP,EAAAA,IAACS,EAAA,CAAW,QAAQ,KAAK,UAAU,KAAK,aAAY,GAAC,UAAU,SAAS,SAAA,eAAA,CAExE,EACAH,EAAAA,KAAC2C,EAAA,CAAK,UAAS,GAAC,QAAS,EACvB,SAAA,CAAAjD,EAAAA,IAACiD,GAAK,KAAI,GAAC,GAAI,GAAI,GAAI,EAAG,GAAI,EAC5B,eAACC,EAAA,CAAK,GAAI,CAAE,UAAW,SAAU,EAAG,CAAA,EAClC,gBAACC,EAAA,CACC,SAAA,CAAAnD,EAAAA,IAAC0J,GAAA,CAAS,MAAM,UAAU,GAAI,CAAE,SAAU,GAAI,GAAI,CAAA,CAAE,CAAG,QACtDjJ,EAAA,CAAW,QAAQ,KAAK,aAAY,GAAC,SAAA,gBAEtC,EACAT,EAAAA,IAACS,GAAW,QAAQ,QAAQ,MAAM,iBAAiB,UAAS,GAAC,SAAA,0CAAA,CAE7D,QACCM,EAAA,CAAO,QAAQ,WAAW,KAAK,QAAQ,SAAA,WAAA,CAExC,CAAA,CAAA,CACF,EACF,EACF,EACAf,EAAAA,IAACiD,GAAK,KAAI,GAAC,GAAI,GAAI,GAAI,EAAG,GAAI,EAC5B,eAACC,EAAA,CAAK,GAAI,CAAE,UAAW,SAAU,EAAG,CAAA,EAClC,gBAACC,EAAA,CACC,SAAA,CAAAnD,EAAAA,IAAC2J,GAAA,CAAW,MAAM,UAAU,GAAI,CAAE,SAAU,GAAI,GAAI,CAAA,CAAE,CAAG,QACxDlJ,EAAA,CAAW,QAAQ,KAAK,aAAY,GAAC,SAAA,gBAEtC,EACAT,EAAAA,IAACS,GAAW,QAAQ,QAAQ,MAAM,iBAAiB,UAAS,GAAC,SAAA,kCAAA,CAE7D,QACCM,EAAA,CAAO,QAAQ,WAAW,KAAK,QAAQ,SAAA,YAAA,CAExC,CAAA,CAAA,CACF,EACF,EACF,EACAf,EAAAA,IAACiD,GAAK,KAAI,GAAC,GAAI,GAAI,GAAI,EAAG,GAAI,EAC5B,eAACC,EAAA,CAAK,GAAI,CAAE,UAAW,SAAU,EAAG,CAAA,EAClC,gBAACC,EAAA,CACC,SAAA,CAAAnD,EAAAA,IAACwJ,GAAA,CAAc,MAAM,UAAU,GAAI,CAAE,SAAU,GAAI,GAAI,CAAA,CAAE,CAAG,QAC3D/I,EAAA,CAAW,QAAQ,KAAK,aAAY,GAAC,SAAA,UAEtC,EACAT,EAAAA,IAACS,GAAW,QAAQ,QAAQ,MAAM,iBAAiB,UAAS,GAAC,SAAA,gCAAA,CAE7D,QACCM,EAAA,CAAO,QAAQ,WAAW,KAAK,QAAQ,SAAA,YAAA,CAExC,CAAA,CAAA,CACF,EACF,EACF,EACAf,EAAAA,IAACiD,GAAK,KAAI,GAAC,GAAI,GAAI,GAAI,EAAG,GAAI,EAC5B,eAACC,EAAA,CAAK,GAAI,CAAE,UAAW,SAAU,EAAG,CAAA,EAClC,gBAACC,EAAA,CACC,SAAA,CAAAnD,EAAAA,IAACsH,GAAA,CAAe,MAAM,UAAU,GAAI,CAAE,SAAU,GAAI,GAAI,CAAA,CAAE,CAAG,QAC5D7G,EAAA,CAAW,QAAQ,KAAK,aAAY,GAAC,SAAA,kBAEtC,EACAT,EAAAA,IAACS,GAAW,QAAQ,QAAQ,MAAM,iBAAiB,UAAS,GAAC,SAAA,6BAAA,CAE7D,QACCM,EAAA,CAAO,QAAQ,WAAW,KAAK,QAAQ,SAAA,YAAA,CAExC,CAAA,CAAA,CACF,EACF,CAAA,CACF,CAAA,CAAA,CACF,CAAA,EACF,EAGAT,EAAAA,KAACC,EAAA,CAAI,GAAI,EACP,SAAA,CAAAP,EAAAA,IAACS,EAAA,CAAW,QAAQ,KAAK,UAAU,KAAK,aAAY,GAAC,UAAU,SAAS,SAAA,cAAA,CAExE,SACCyG,EAAA,CAAM,GAAI,CAAE,EAAG,GACd,SAAA,CAAAlH,MAACS,EAAA,CAAW,QAAQ,QAAQ,UAAS,GAAC,SAAA,iGAEtC,SACCF,EAAA,CACC,SAAA,CAAAP,EAAAA,IAACe,EAAA,CACC,QAAQ,YACR,gBAAYkJ,GAAA,EAAW,EACvB,KAAK,8DACL,OAAO,SACP,GAAI,CAAE,GAAI,CAAA,EACX,SAAA,oBAAA,CAAA,EAGDjK,EAAAA,IAACe,EAAA,CACC,QAAQ,WACR,gBAAYyI,GAAA,EAAc,EAC1B,KAAK,2CACL,OAAO,SACR,SAAA,eAAA,CAAA,CAED,CAAA,CACF,CAAA,CAAA,CACF,CAAA,EACF,EAGAlJ,EAAAA,KAACC,EAAA,CAAI,UAAU,SACb,SAAA,CAAAP,MAACS,EAAA,CAAW,QAAQ,KAAK,aAAY,GAAC,SAAA,UAEtC,EACAT,EAAAA,IAACS,GAAW,QAAQ,QAAQ,MAAM,iBAAiB,UAAS,GAAC,SAAA,oFAAA,CAE7D,QACCA,EAAA,CAAW,QAAQ,QAAQ,MAAM,iBAAiB,SAAA,4CAAA,CAEnD,CAAA,CAAA,CACF,CAAA,EACF,CAEJ,EC/eMiK,GAAqB,IAAM,CAC/B,MAAMC,EAAWC,GAAA,EAEjB,OACEtK,EAAAA,KAACC,EAAA,CAAI,UAAU,SAAS,GAAI,EAC1B,SAAA,CAAAP,EAAAA,IAACS,GAAW,QAAQ,KAAK,UAAU,KAAK,aAAY,GAAC,SAAA,KAAA,CAErD,QACCA,EAAA,CAAW,QAAQ,KAAK,aAAY,GAAC,SAAA,iBAEtC,EACAT,EAAAA,IAACS,GAAW,QAAQ,QAAQ,MAAM,iBAAiB,UAAS,GAAC,SAAA,8CAAA,CAE7D,EACAT,EAAAA,IAACe,EAAA,CACC,QAAQ,YACR,QAAS,IAAM4J,EAAS,GAAG,EAC3B,KAAK,QACN,SAAA,SAAA,CAAA,CAED,EACF,CAEJ,ECZA,MAAME,WAAsBC,EAAAA,SAAwB,CAClD,YAAY1E,EAAc,CACxB,MAAMA,CAAK,EAab2E,GAAA,mBAAc,IAAM,CAClB,KAAK,SAAS,CAAE,SAAU,GAAO,MAAO,OAAW,UAAW,OAAW,CAC3E,GAdE,KAAK,MAAQ,CAAE,SAAU,EAAA,CAC3B,CAEA,OAAO,yBAAyBxJ,EAAqB,CACnD,MAAO,CAAE,SAAU,GAAM,MAAAA,CAAA,CAC3B,CAEA,kBAAkBA,EAAcyJ,EAAsB,CACpD,QAAQ,MAAM,iCAAkCzJ,EAAOyJ,CAAS,EAChE,KAAK,SAAS,CAAE,MAAAzJ,EAAO,UAAAyJ,CAAA,CAAW,CACpC,CAMA,QAAS,CACP,OAAI,KAAK,MAAM,SACT,KAAK,MAAM,SACN,KAAK,MAAM,SAIlBhL,EAAAA,IAACO,EAAA,CACC,QAAQ,OACR,eAAe,SACf,WAAW,SACX,UAAU,QACV,QAAQ,qBACR,EAAG,EAEH,SAAAD,EAAAA,KAAC4G,EAAA,CACC,UAAW,EACX,GAAI,CACF,EAAG,EACH,SAAU,IACV,UAAW,QAAA,EAGb,SAAA,CAAAlH,EAAAA,IAAC4C,GAAA,CAAU,MAAM,QAAQ,GAAI,CAAE,SAAU,GAAI,GAAI,CAAA,CAAE,CAAG,QACrDnC,EAAA,CAAW,QAAQ,KAAK,aAAY,GAAC,SAAA,uBAEtC,EACAT,EAAAA,IAACS,GAAW,QAAQ,QAAQ,MAAM,iBAAiB,UAAS,GAAC,SAAA,+DAAA,CAE7D,EAEC,GA0BDH,EAAAA,KAACC,EAAA,CAAI,GAAI,EACP,SAAA,CAAAP,EAAAA,IAACe,EAAA,CACC,QAAQ,YACR,gBAAYC,GAAA,EAAY,EACxB,QAAS,KAAK,YACd,GAAI,CAAE,GAAI,CAAA,EACX,SAAA,WAAA,CAAA,EAGDhB,EAAAA,IAACe,EAAA,CACC,QAAQ,WACR,QAAS,IAAM,OAAO,SAAS,OAAA,EAChC,SAAA,cAAA,CAAA,CAED,EACF,CAAA,CAAA,CAAA,CACF,CAAA,EAKC,KAAK,MAAM,QACpB,CACF,CC1EA,MAAMkK,GAAQC,GAAY,CACxB,QAAS,CACP,KAAM,OACN,QAAS,CACP,KAAM,UACN,MAAO,UACP,KAAM,SAAA,EAER,UAAW,CACT,KAAM,UACN,MAAO,UACP,KAAM,SAAA,EAER,WAAY,CACV,QAAS,UACT,MAAO,SAAA,EAET,KAAM,CACJ,QAAS,UACT,UAAW,SAAA,CACb,EAEF,WAAY,CACV,WAAY,6CACZ,GAAI,CACF,SAAU,SACV,WAAY,GAAA,EAEd,GAAI,CACF,SAAU,OACV,WAAY,GAAA,EAEd,GAAI,CACF,SAAU,UACV,WAAY,GAAA,EAEd,GAAI,CACF,SAAU,SACV,WAAY,GAAA,EAEd,GAAI,CACF,SAAU,UACV,WAAY,GAAA,EAEd,GAAI,CACF,SAAU,OACV,WAAY,GAAA,CACd,EAEF,WAAY,CACV,QAAS,CACP,eAAgB,CACd,KAAM,CACJ,gBAAiB,UACjB,OAAQ,iBACR,aAAc,KAAA,CAChB,CACF,EAEF,UAAW,CACT,eAAgB,CACd,KAAM,CACJ,aAAc,MACd,cAAe,OACf,WAAY,GAAA,CACd,CACF,EAEF,QAAS,CACP,eAAgB,CACd,KAAM,CACJ,aAAc,MAAA,CAChB,CACF,CACF,CAEJ,CAAC,EAGKC,GAAkB,CACtB,CAAE,GAAI,YAAa,MAAO,YAAa,KAAMnL,EAAAA,IAAC4J,GAAA,CAAA,CAAc,EAAI,KAAM,GAAA,EACtE,CAAE,GAAI,WAAY,MAAO,mBAAoB,KAAM5J,EAAAA,IAACsE,EAAA,CAAA,CAAiB,EAAI,KAAM,WAAA,EAC/E,CAAE,GAAI,YAAa,MAAO,YAAa,KAAMtE,EAAAA,IAACqD,GAAA,CAAA,CAAU,EAAI,KAAM,YAAA,EAClE,CAAE,GAAI,WAAY,MAAO,WAAY,KAAMrD,EAAAA,IAACsD,GAAA,CAAA,CAAa,EAAI,KAAM,WAAA,EACnE,CAAE,GAAI,UAAW,MAAO,kBAAmB,KAAMtD,EAAAA,IAACuD,GAAA,CAAA,CAAU,EAAI,KAAM,UAAA,EACtE,CAAE,GAAI,cAAe,MAAO,sBAAuB,KAAMvD,EAAAA,IAACwJ,GAAA,CAAA,CAAc,EAAI,KAAM,cAAA,EAClF,CAAE,GAAI,YAAa,MAAO,YAAa,KAAMxJ,EAAAA,IAACoL,GAAA,CAAA,CAAc,EAAI,KAAM,YAAA,EACtE,CAAE,GAAI,UAAW,MAAO,UAAW,KAAMpL,EAAAA,IAACwJ,GAAA,CAAA,CAAc,EAAI,KAAM,UAAA,EAClE,CAAE,GAAI,WAAY,MAAO,WAAY,KAAMxJ,EAAAA,IAACgD,GAAA,CAAA,CAAa,EAAI,KAAM,WAAA,CACrE,EAeMqI,GAAgB,IAAM,SAC1B,KAAM,CAACC,EAAOC,CAAQ,EAAIjK,WAAmB,CAC3C,QAAS,GACT,MAAO,KACP,cAAe,CAAA,EACf,WAAY,GACZ,YAAa,WAAA,CACd,EAGDS,EAAAA,UAAU,IAAM,EACQ,SAAY,CAChC,GAAI,CAQF,GAPAwJ,MAAkB,CAAE,GAAGC,EAAM,QAAS,IAAO,EAG7C,MAAM,IAAI,QAAQvJ,GAAW,WAAWA,EAAS,GAAI,CAAC,EAIlD,EADa,MAAM,MAAM,gBAAgB,GAC/B,GACZ,MAAM,IAAI,MAAM,6BAA6B,EAG/CsJ,EAASC,IAAS,CAChB,GAAGA,EACH,QAAS,GACT,MAAO,IAAA,EACP,EAGFC,EAAgB,4CAA6C,SAAS,CAExE,OAASlK,EAAO,CACd,QAAQ,MAAM,4BAA6BA,CAAK,EAChDgK,EAASC,IAAS,CAChB,GAAGA,EACH,QAAS,GACT,MAAOjK,aAAiB,MAAQA,EAAM,QAAU,eAAA,EAChD,EACFkK,EAAgB,mCAAoC,OAAO,CAC7D,CACF,GAEA,CACF,EAAG,CAAA,CAAE,EAEL,MAAMA,EAAkB,CAACtL,EAAiBU,IAAuD,CAC/F,MAAM6K,EAAe,CACnB,GAAI,KAAK,IAAA,EAAM,SAAA,EACf,QAAAvL,EACA,SAAAU,EACA,cAAe,IAAK,EAGtB0K,EAASC,IAAS,CAChB,GAAGA,EACH,cAAe,CAAC,GAAGA,EAAK,cAAeE,CAAY,CAAA,EACnD,CACJ,EAEMC,EAAsBC,GAAe,CACzCL,EAASC,IAAS,CAChB,GAAGA,EACH,cAAeA,EAAK,cAAc,OAAOK,GAAKA,EAAE,KAAOD,CAAE,CAAA,EACzD,CACJ,EAEME,EAAe,IAAM,CACzBP,EAASC,IAAS,CAAE,GAAGA,EAAM,WAAY,CAACA,EAAK,YAAa,CAC9D,EAEMO,EAAoBC,GAAmB,CAC3CT,MAAkB,CAAE,GAAGC,EAAM,YAAaQ,GAAS,CACrD,EAEA,OAAIV,EAAM,QAENhL,OAAC2L,IAAc,MAAAhB,GACb,SAAA,CAAAjL,EAAAA,IAACkM,GAAA,EAAY,EACblM,EAAAA,IAACO,EAAA,CACC,QAAQ,OACR,eAAe,SACf,WAAW,SACX,UAAU,QACV,QAAQ,qBAER,SAAAP,EAAAA,IAACE,GAAA,CAAe,KAAM,EAAA,CAAI,CAAA,CAAA,CAC5B,EACF,EAIAoL,EAAM,MAENhL,OAAC2L,IAAc,MAAAhB,GACb,SAAA,CAAAjL,EAAAA,IAACkM,GAAA,EAAY,EACb5L,EAAAA,KAACC,EAAA,CACC,QAAQ,OACR,eAAe,SACf,WAAW,SACX,UAAU,QACV,QAAQ,qBACR,cAAc,SACd,IAAK,EAEL,SAAA,CAAAP,EAAAA,IAACS,GAAW,QAAQ,KAAK,MAAM,QAAQ,aAAY,GAAC,SAAA,mBAAA,CAEpD,EACAT,EAAAA,IAACS,GAAW,QAAQ,QAAQ,MAAM,iBAAiB,UAAU,SAC1D,SAAA6K,EAAM,KAAA,CACT,EACAtL,EAAAA,IAACe,EAAA,CACC,QAAQ,YACR,MAAM,UACN,QAAS,IAAM,OAAO,SAAS,OAAA,EAC/B,GAAI,CAAE,GAAI,CAAA,EACX,SAAA,OAAA,CAAA,CAED,CAAA,CAAA,CACF,EACF,EAKFT,OAAC2L,IAAc,MAAAhB,GACb,SAAA,CAAAjL,EAAAA,IAACkM,GAAA,EAAY,EACblM,EAAAA,IAAC6K,GAAA,CACC,SAAAvK,EAAAA,KAAC6L,GAAA,CACC,SAAA,CAAA7L,OAACC,GAAI,GAAI,CAAE,QAAS,OAAQ,UAAW,SAErC,SAAA,CAAAP,EAAAA,IAACoM,GAAA,CAAO,SAAS,QAAQ,GAAI,CAAE,OAAQnB,GAAM,OAAO,OAAS,GAC3D,SAAA3K,EAAAA,KAAC+L,GAAA,CACC,SAAA,CAAArM,EAAAA,IAAC+C,EAAA,CACC,MAAM,UACN,aAAW,cACX,QAAS+I,EACT,KAAK,QACL,GAAI,CAAE,GAAI,CAAA,EAEV,eAACQ,GAAA,CAAA,CAAS,CAAA,CAAA,QAEXlJ,GAAA,CAAW,GAAI,CAAE,GAAI,GAAK,EAC3BpD,EAAAA,IAACS,EAAA,CAAW,QAAQ,KAAK,UAAU,MAAM,GAAI,CAAE,SAAU,CAAA,EAAK,SAAA,kBAAA,CAE9D,EACAT,MAACuM,GAAA,CAAM,aAAcjB,EAAM,cAAc,OAAQ,MAAM,YACrD,SAAAtL,EAAAA,IAAC+C,GAAW,MAAM,UAChB,SAAA/C,EAAAA,IAACwM,GAAA,CAAA,CAAkB,EACrB,EACF,QACCzJ,EAAA,CAAW,MAAM,UAChB,SAAA/C,EAAAA,IAACyM,KAAkB,CAAA,CACrB,CAAA,CAAA,CACF,CAAA,CACF,EAGAnM,EAAAA,KAACoM,GAAA,CACC,QAAQ,YACR,KAAMpB,EAAM,WACZ,QAASQ,EACT,GAAI,CACF,MAAO,IACP,WAAY,EACZ,qBAAsB,CACpB,MAAO,IACP,UAAW,aACX,gBAAiB,mBACjB,YAAa,gBAAA,CACf,EAGF,SAAA,CAAA9L,EAAAA,IAACqM,GAAA,EAAQ,EACT/L,OAACC,GAAI,GAAI,CAAE,SAAU,OAAQ,GAAI,GAC/B,SAAA,CAAAP,EAAAA,IAACgE,EAAA,CACE,SAAAmH,GAAgB,IAAKwB,GACpBrM,EAAAA,KAAC8D,EAAA,CAEC,OAAM,GACN,QAAS,IAAM,CACb2H,EAAiBY,EAAK,EAAE,EACxBb,EAAA,CACF,EACA,SAAUR,EAAM,cAAgBqB,EAAK,GACrC,GAAI,CACF,iBAAkB,CAChB,gBAAiB,eACjB,UAAW,CACT,gBAAiB,cAAA,CACnB,CACF,EAGF,SAAA,CAAA3M,MAACqE,GAAa,GAAI,CAAE,MAAO,SAAA,EACxB,WAAK,KACR,EACArE,EAAAA,IAACuE,EAAA,CAAa,QAASoI,EAAK,KAAA,CAAO,CAAA,CAAA,EAnB9BA,EAAK,EAAA,CAqBb,EACH,QACCnI,EAAA,CAAQ,GAAI,CAAE,GAAI,GAAK,EACxBxE,EAAAA,IAACgE,EAAA,CACC,SAAA1D,EAAAA,KAAC8D,EAAA,CAAS,OAAM,GAAC,QAAS,IAAM2H,EAAiB,OAAO,EACtD,SAAA,CAAA/L,EAAAA,IAACqE,EAAA,CACC,SAAArE,EAAAA,IAACiH,GAAA,CAAA,CAAY,EACf,EACAjH,EAAAA,IAACuE,EAAA,CAAa,QAAQ,OAAA,CAAQ,CAAA,CAAA,CAChC,CAAA,CACF,CAAA,CAAA,CACF,CAAA,CAAA,CAAA,EAIFvE,EAAAA,IAACO,EAAA,CACC,UAAU,OACV,GAAI,CACF,SAAU,EACV,EAAG,EACH,MAAO,CAAE,GAAI,oBAAA,EACb,GAAI,CAAE,GAAI,CAAA,EACV,GAAI,CAAA,EAGN,SAAAP,EAAAA,IAACgK,GAAA,CAAU,SAAS,KAClB,gBAAC4C,GAAA,CACC,SAAA,CAAA5M,MAAC6M,GAAM,KAAK,IAAI,QAAS7M,MAACmB,KAAU,EAAI,QACvC0L,EAAA,CAAM,KAAK,YAAY,QAAS7M,MAACmF,KAAgB,EAAI,QACrD0H,EAAA,CAAM,KAAK,aAAa,QAAS7M,MAACuG,KAAU,EAAI,QAChDsG,EAAA,CAAM,KAAK,YAAY,QAAS7M,MAACoI,KAAS,EAAI,QAC9CyE,EAAA,CAAM,KAAK,WAAW,QAAS7M,MAACkJ,KAAe,EAAI,QACnD2D,EAAA,CAAM,KAAK,eAAe,QAAS7M,MAACmJ,KAAmB,EAAI,QAC3D0D,EAAA,CAAM,KAAK,aAAa,QAAS7M,MAACiJ,KAAU,EAAI,QAChD4D,EAAA,CAAM,KAAK,WAAW,QAAS7M,MAACoJ,KAAQ,EAAI,QAC5CyD,EAAA,CAAM,KAAK,YAAY,QAAS7M,MAACqJ,KAAS,EAAI,QAC9CwD,EAAA,CAAM,KAAK,SAAS,QAAS7M,MAACsJ,KAAM,EAAI,QACxCuD,EAAA,CAAM,KAAK,IAAI,QAAS7M,EAAAA,IAAC0K,KAAS,CAAA,CAAI,CAAA,CAAA,CACzC,CAAA,CACF,CAAA,CAAA,CACF,EACF,EAGA1K,EAAAA,IAAC8M,GAAA,CACC,KAAMxB,EAAM,cAAc,OAAS,EACnC,iBAAkB,IAClB,QAAS,IAAA,OAAM,OAAAK,IAAmBoB,EAAAzB,EAAM,cAAc,CAAC,IAArB,YAAAyB,EAAwB,KAAM,EAAE,GAClE,aAAc,CAAE,SAAU,SAAU,WAAY,OAAA,EAEhD,SAAA/M,EAAAA,IAACc,GAAA,CACC,QAAS,IAAA,OAAM,OAAA6K,IAAmBoB,EAAAzB,EAAM,cAAc,CAAC,IAArB,YAAAyB,EAAwB,KAAM,EAAE,GAClE,WAAUA,EAAAzB,EAAM,cAAc,CAAC,IAArB,YAAAyB,EAAwB,WAAY,OAC9C,GAAI,CAAE,MAAO,MAAA,EAEZ,UAAAC,EAAA1B,EAAM,cAAc,CAAC,IAArB,YAAA0B,EAAwB,OAAA,CAAA,CAC3B,CAAA,CACF,CAAA,CACF,CAAA,CACF,CAAA,EACF,CAEJ,ECjZAC,GAAS,WAAW,SAAS,eAAe,MAAM,CAAE,EAAE,aACnD9I,GAAM,WAAN,CACC,SAAAnE,MAACqL,KAAI,CAAA,CACP,CACF","x_google_ignoreList":[0]}